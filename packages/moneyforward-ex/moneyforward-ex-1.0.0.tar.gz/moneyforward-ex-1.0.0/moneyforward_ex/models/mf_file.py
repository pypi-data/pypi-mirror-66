# coding: utf-8

"""
    マネーフォワード クラウド経費API

    このページは[マネーフォワード クラウド経費](https://expense.moneyforward.com)（クラウド型の経費精算・ワークフローサービス）のAPIドキュメントです。ご利用開始の手順については、[github](https://github.com/moneyforward/expense-api-doc) をご覧ください。バグ報告や改善要望はgithub上からissue登録をして頂ければ幸いです。このドキュメントは[Swagger](http://swagger.io)の仕様で作成されています。実際にこのページでAPIの試打を行うことができます。試打を行いたい場合は、APIを利用するアプリケーションの登録の際に、Redirect URIを`https://expense.moneyforward.com/api/oauth2-redirect.html`に指定してお試しください。  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from moneyforward_ex.configuration import Configuration


class MfFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'byte_size': 'int',
        'content_type': 'str',
        'created_at': 'Datetime',
        'updated_at': 'Datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'byte_size': 'byte_size',
        'content_type': 'content_type',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, byte_size=None, content_type=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """MfFile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._byte_size = None
        self._content_type = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.byte_size = byte_size
        self.content_type = content_type
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MfFile.  # noqa: E501

        MFファイルid  # noqa: E501

        :return: The id of this MfFile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MfFile.

        MFファイルid  # noqa: E501

        :param id: The id of this MfFile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 40):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `40`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this MfFile.  # noqa: E501

        ファイル名  # noqa: E501

        :return: The name of this MfFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MfFile.

        ファイル名  # noqa: E501

        :param name: The name of this MfFile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def byte_size(self):
        """Gets the byte_size of this MfFile.  # noqa: E501

        バイトサイズ  # noqa: E501

        :return: The byte_size of this MfFile.  # noqa: E501
        :rtype: int
        """
        return self._byte_size

    @byte_size.setter
    def byte_size(self, byte_size):
        """Sets the byte_size of this MfFile.

        バイトサイズ  # noqa: E501

        :param byte_size: The byte_size of this MfFile.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and byte_size is None:  # noqa: E501
            raise ValueError("Invalid value for `byte_size`, must not be `None`")  # noqa: E501

        self._byte_size = byte_size

    @property
    def content_type(self):
        """Gets the content_type of this MfFile.  # noqa: E501

        コンテントタイプ  # noqa: E501

        :return: The content_type of this MfFile.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this MfFile.

        コンテントタイプ  # noqa: E501

        :param content_type: The content_type of this MfFile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and content_type is None:  # noqa: E501
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                content_type is not None and len(content_type) > 255):
            raise ValueError("Invalid value for `content_type`, length must be less than or equal to `255`")  # noqa: E501

        self._content_type = content_type

    @property
    def created_at(self):
        """Gets the created_at of this MfFile.  # noqa: E501

        登録日時  # noqa: E501

        :return: The created_at of this MfFile.  # noqa: E501
        :rtype: Datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MfFile.

        登録日時  # noqa: E501

        :param created_at: The created_at of this MfFile.  # noqa: E501
        :type: Datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MfFile.  # noqa: E501

        更新日時  # noqa: E501

        :return: The updated_at of this MfFile.  # noqa: E501
        :rtype: Datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MfFile.

        更新日時  # noqa: E501

        :param updated_at: The updated_at of this MfFile.  # noqa: E501
        :type: Datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MfFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MfFile):
            return True

        return self.to_dict() != other.to_dict()
