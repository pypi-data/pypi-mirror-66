# coding: utf-8

"""
    マネーフォワード クラウド経費API

    このページは[マネーフォワード クラウド経費](https://expense.moneyforward.com)（クラウド型の経費精算・ワークフローサービス）のAPIドキュメントです。ご利用開始の手順については、[github](https://github.com/moneyforward/expense-api-doc) をご覧ください。バグ報告や改善要望はgithub上からissue登録をして頂ければ幸いです。このドキュメントは[Swagger](http://swagger.io)の仕様で作成されています。実際にこのページでAPIの試打を行うことができます。試打を行いたい場合は、APIを利用するアプリケーションの登録の際に、Redirect URIを`https://expense.moneyforward.com/api/oauth2-redirect.html`に指定してお試しください。  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from moneyforward_ex.configuration import Configuration


class Office(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'identification_code': 'str',
        'office_type_id': 'int',
        'name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'identification_code': 'identification_code',
        'office_type_id': 'office_type_id',
        'name': 'name'
    }

    def __init__(self, id=None, identification_code=None, office_type_id=None, name=None, local_vars_configuration=None):  # noqa: E501
        """Office - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._identification_code = None
        self._office_type_id = None
        self._name = None
        self.discriminator = None

        self.id = id
        if identification_code is not None:
            self.identification_code = identification_code
        if office_type_id is not None:
            self.office_type_id = office_type_id
        if name is not None:
            self.name = name

    @property
    def id(self):
        """Gets the id of this Office.  # noqa: E501

        事業所id  # noqa: E501

        :return: The id of this Office.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Office.

        事業所id  # noqa: E501

        :param id: The id of this Office.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 40):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `40`")  # noqa: E501

        self._id = id

    @property
    def identification_code(self):
        """Gets the identification_code of this Office.  # noqa: E501

        事業所番号  # noqa: E501

        :return: The identification_code of this Office.  # noqa: E501
        :rtype: str
        """
        return self._identification_code

    @identification_code.setter
    def identification_code(self, identification_code):
        """Sets the identification_code of this Office.

        事業所番号  # noqa: E501

        :param identification_code: The identification_code of this Office.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                identification_code is not None and len(identification_code) > 8):
            raise ValueError("Invalid value for `identification_code`, length must be less than or equal to `8`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                identification_code is not None and len(identification_code) < 8):
            raise ValueError("Invalid value for `identification_code`, length must be greater than or equal to `8`")  # noqa: E501

        self._identification_code = identification_code

    @property
    def office_type_id(self):
        """Gets the office_type_id of this Office.  # noqa: E501

        事業所種別。1は個人、2は法人  # noqa: E501

        :return: The office_type_id of this Office.  # noqa: E501
        :rtype: int
        """
        return self._office_type_id

    @office_type_id.setter
    def office_type_id(self, office_type_id):
        """Sets the office_type_id of this Office.

        事業所種別。1は個人、2は法人  # noqa: E501

        :param office_type_id: The office_type_id of this Office.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and office_type_id not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `office_type_id` ({0}), must be one of {1}"  # noqa: E501
                .format(office_type_id, allowed_values)
            )

        self._office_type_id = office_type_id

    @property
    def name(self):
        """Gets the name of this Office.  # noqa: E501

        事業所名  # noqa: E501

        :return: The name of this Office.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Office.

        事業所名  # noqa: E501

        :param name: The name of this Office.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 40):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Office):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Office):
            return True

        return self.to_dict() != other.to_dict()
