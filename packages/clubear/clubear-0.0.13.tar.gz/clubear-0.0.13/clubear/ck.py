from .fun import ispump
import IPython
import pandas as pd
import numpy as np
import os,time
import warnings
warnings.filterwarnings("ignore")


class check(object):

    def demo():
        demostr = '''
import clubear as cb
#clubear.csv is generated by cb.manager.demo()
pp=cb.pump('clubear.csv') #start a new data pump
ck=cb.check(pp)      #create a pump checker
ck.stats() #check all variblaes for their quants
'''
        print(demostr)

    def __init__(self, pp):
        self.pp = pp
        
        '''check whether the input is a pump first'''
        pump_check=ispump(self.pp)
        if pump_check != 'YES': print(pump_check); return
        
        '''initialization'''
        self.Stats=[];self.Table=[]

    def stats(self, niter=10):
        
        '''check carefully all the pre-conditions'''
        if not isinstance(niter,int): print('check.table: The niter must be an int.'); return
        if niter<1: print('check.table: The niter must be no less than one.'); return
        
        '''check whether we have something to stats'''
        df=self.pp.go();
        heads = list(df.columns);ncolumns=len(heads)
        if len(heads)==0: print('check.stats: No variable can be checked!'); return
        
        '''main part for computing statistics'''
        ncov = len(heads)
        N = np.zeros(niter)
        MU = np.zeros([niter, ncov])
        Min = np.zeros([niter, ncov])
        Med = np.zeros([niter, ncov])
        Max = np.zeros([niter, ncov])
        SD = np.zeros([niter, ncov])
        Skew = np.zeros([niter, ncov])
        Kurt = np.zeros([niter, ncov])
        Prob = np.zeros([niter,ncov])
        start_time=time.time()
        for i in range(niter):
            '''get data and make it float'''
            df = self.pp.go()
            for each in heads:
                df[each]=pd.to_numeric(df[each],errors='coerce');
            
            '''The 1st bach of stat *without* central'''
            N[i] = df.shape[0]
            MU[i] = np.nanmean(df, axis=0)
            Min[i] = np.nanmin(df, axis=0)
            Med[i] = np.nanmedian(df, axis=0)
            Max[i] = np.nanmax(df, axis=0)

            '''The 2nd batch of stat *with* central'''
            df = df-MU[i]
            SD[i] = np.nanmean(df**2, axis=0)
            Skew[i] = np.nanmean(df**3, axis=0)
            Kurt[i] = np.nanmean(df**4, axis=0)
            
            flag=(np.abs(df)>=0)*(np.abs(df)<1.0e+15)
            Prob[i]=np.mean(flag,axis=0)

            '''organize for interactive output'''
            MyN = np.mean(N[:(i+1)])
            MyMU = np.mean(MU[:(i+1)], axis=0)
            MyMin = np.min(Min[:(i+1)], axis=0)
            MyMed = np.median(Med[:(i+1)], axis=0)
            MyMax = np.max(Max[:(i+1)], axis=0)
            MySD = np.sqrt(np.mean(SD[:(i+1)], axis=0))+1.0e-12
            MySkew = np.mean(Skew[:(i+1)], axis=0)/MySD**3
            MyKurt = np.mean(Kurt[:(i+1)], axis=0)/MySD**4
            MyProb = np.mean(Prob[:(i+1)],axis=0)
            output = pd.DataFrame(list(zip(MyMin, MyMed, MyMax, MyProb)))
            output.columns = [ 'Min','Med', 'Max', 'rp']
            output.index = heads
            self.Stats=output
            
            '''output to screen for interactive analysis'''
            end_time=time.time();elapse_time=end_time-start_time            
            IPython.display.clear_output(wait=True)
            pd.set_option('display.float_format', lambda x: '%.1f' % x)
            progress = np.round((i+1)/niter*100, 2)
            print('Time elapsed:',int(elapse_time),'seconds.',end=' ')
            print('with subsample sizes', int(MyN), '.')
            print('Task accomplished: ', progress,
                  '% for a total of ', niter, 'random replications.')
            print('')
            print(np.round(output, 3))

        

