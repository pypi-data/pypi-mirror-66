environment:
  # For new releases, only one job will upload the source code to Pypi, and only
  # one job each for Python 2 and 3 will upload a wheel.
  matrix:
    - PYTHON: "C:\\Miniconda37-x64"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"
      PYPI_UPLOAD_SOURCE: yes
      PYPI_UPLOAD_WHEEL: yes
      platform: x64

    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      PYPI_UPLOAD_SOURCE: yes
      PYPI_UPLOAD_WHEEL: yes
      platform: x64

    # - PYTHON: "C:\\Miniconda35-x64"
    #   PYTHON_VERSION: "3.5"
    #   PYTHON_ARCH: "64"
    #   PYPI_UPLOAD_SOURCE: yes
    #   PYPI_UPLOAD_WHEEL: yes
    #   platform: x64

    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      PYPI_UPLOAD_SOURCE: no
      PYPI_UPLOAD_WHEEL: no
      platform: x64

  ANACONDA_TOKEN:
    secure: 7drSxrQivCMViVHFeeFsfVzN3mELF6vkv4JAcuzdNedzFOvX1HAcGBTe0WolTsUJ

  TWINE_PASSWORD:
    secure: T5fSzOqc6Z1D5P+Bt2qgXA==

install:
  # Add the paths for anaconda
  - 'set PATH=%PYTHON%;%PYTHON%\Library\bin;%PYTHON%\Scripts;%PATH%'
  # Install MPI
  - ps: (new-object net.webclient).DownloadFile(
        "https://download.microsoft.com/download/A/E/0/AE002626-9D9D-448D-8197-1EA510E297CE/msmpisetup.exe",
        "C:\projects\MSMpiSetup.exe")
  - C:\projects\MSMpiSetup.exe -unattend -minimal
  - ps: (new-object net.webclient).DownloadFile(
        "https://download.microsoft.com/download/A/E/0/AE002626-9D9D-448D-8197-1EA510E297CE/msmpisdk.msi",
        "C:\projects\MSMpiSdk.msi")
  - ps: msiexec /i C:\projects\MSMpiSdk.msi /quiet /qn /norestart
  - set PATH=C:\Program Files\Microsoft MPI\Bin;%PATH%
  - set PATH=C:\Program Files (x86)\Microsoft SDKs\MPI;%PATH%
  # Check that we have the expected version and architecture for Python
  - 'python --version'
  - 'python -c "import struct; print(struct.calcsize(''P'') * 8)"'

build: false  # not a C# project

test_script:
  - conda install --yes --quiet conda
  # Stay with the conda version to avoid a downgrade to 4.3 from conda-forge
  - conda config --set auto_update_conda False
  - conda config --add channels conda-forge
  - conda config --add channels intel
  - conda install --yes --quiet conda-build setuptools wheel
  - conda build -c spyking-circus -c conda-forge -c intel conda_recipe
  - python packaging_tools/move_conda_package.py
  - conda install --yes --quiet wheel
  - python setup.py sdist --formats=zip,gztar,bztar
  - python setup.py bdist_wheel
  # Try installing from the source package (install dependencies via conda first)
  - conda install --yes --quiet -c spyking-circus tqdm mpi4py numpy cython scipy matplotlib h5py colorama psutil qt pyqt python-blosc statsmodels scikit-learn
  - FOR /R dist %%F in (*.tar.gz) do pip install %%F
  - spyking-circus -h
  - pip uninstall -y -q spyking-circus
  # Try installing from the binary wheel
  - FOR /R dist %%F in (*.whl) do pip install %%F
  - spyking-circus -h

after_test:
  - 'if "%APPVEYOR_PULL_REQUEST_NUMBER%" == "" if "%APPVEYOR_REPO_NAME%" == "spyking-circus/spyking-circus" if "%APPVEYOR_REPO_TAG%" == "true" (
      conda install --yes --quiet anaconda-client &&
      conda install --yes --quiet -c conda-forge twine &&
      python packaging_tools\conda-server-push.py %APPVEYOR_REPO_TAG_NAME%
     )'
  - 'if "%APPVEYOR_PULL_REQUEST_NUMBER%" == "" if "%APPVEYOR_REPO_NAME%" == "spyking-circus/spyking-circus" if "%APPVEYOR_REPO_TAG%" == "true" if "%PYPI_UPLOAD_SOURCE%" == "yes" (twine upload -u pierre.yger --skip-existing dist/*.tar.bz2)'
  - 'if "%APPVEYOR_PULL_REQUEST_NUMBER%" == "" if "%APPVEYOR_REPO_NAME%" == "spyking-circus/spyking-circus" if "%APPVEYOR_REPO_TAG%" == "true" if "%PYPI_UPLOAD_WHEEL%" == "yes" (twine upload -u pierre.yger --skip-existing dist/*.whl)'

artifacts:
  # Archive the generated conda package in the ci.appveyor.com build report.
  - path: '*.tar.bz2'
    name: conda package
  - path: dist\*
    name: PyPI binaries
  
