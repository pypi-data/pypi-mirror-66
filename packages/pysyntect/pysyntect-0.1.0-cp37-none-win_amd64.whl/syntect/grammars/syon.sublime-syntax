%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: SyON
file_extensions:
  - sy
scope: source.sy
contexts:
  main:
    - include: comment
    - include: regexp
    - include: fieldQuotedEarly
    - include: heredoc
    - include: string
    - include: stringJunk
    - include: block
    - include: field
    - include: array
    - include: byteArray
    - include: brackets
    - include: boolean
    - include: "null"
    - include: date
    - include: number
    - include: comma
    - include: operator
  comment:
    - match: '(?:^|(?<=\s|\xC2\xAD|\xAD))(#{3,})(?=\s|$)'
      captures:
        1: punctuation.definition.comment.begin.sy
      push:
        - meta_scope: comment.block.sy
        - match: \1
          captures:
            0: punctuation.definition.comment.end.sy
          pop: true
    - match: (?:^|(?<=\s|\xC2\xAD|\xAD))#(?=\s|$)
      captures:
        0: punctuation.definition.comment.sy
      push:
        - meta_scope: comment.line.number-sign.sy
        - match: $
          pop: true
  array:
    - match: '\['
      captures:
        0: punctuation.definition.array.begin.bracket.square.sy
      push:
        - meta_scope: meta.array.sy
        - match: '\]'
          captures:
            0: punctuation.definition.array.end.bracket.square.sy
          pop: true
        - include: main
        - match: '(?:[^,\[\]{}<>"''`\s:]|:(?=\S))+'
          scope: string.unquoted.sy
  block:
    - match: '((?:[^{}\[\]:\s,]|[:#](?=\S))(?:[^:{}]|:(?=\S)|\\[{:])*?)({)'
      captures:
        1: entity.name.block.tag.label.sy
        2: punctuation.section.scope.block.begin.bracket.curly.sy
      push:
        - meta_scope: meta.block.tagged.sy
        - match: "}"
          captures:
            0: punctuation.section.scope.block.end.bracket.curly.sy
          pop: true
        - include: blockInnards
    - match: "{"
      captures:
        0: punctuation.section.scope.block.begin.bracket.curly.sy
      push:
        - meta_scope: meta.block.sy
        - match: "}"
          captures:
            0: punctuation.section.scope.block.end.bracket.curly.sy
          pop: true
        - include: blockInnards
  blockInnards:
    - include: fieldQuotedEarly
    - include: main
    - match: '((?:[^{}\[\]:\s,]|[:#](?=\S))(?:[^:{}]|:(?=\S)|\\[{:])*?)'
      captures:
        1: entity.name.tag.property.sy
  boolean:
    - match: |-
        (?x)
        (?:^|(?<=[\s\[{,]))
        (?:true|yes|on|TRUE|YES|ON)
        (?=$|[\s\]},])
      scope: constant.language.boolean.true.sy
    - match: |-
        (?x)
        (?:^|(?<=[\s\[{,]))
        (?:false|no|off|TRUE|YES|ON)
        (?=$|[\s\]},])
      scope: constant.language.boolean.false.sy
  brackets:
    - match: \(
      captures:
        0: punctuation.section.scope.block.begin.bracket.round.sy
      push:
        - meta_scope: meta.expression.sy
        - match: \)
          captures:
            0: punctuation.section.scope.block.end.bracket.round.sy
          pop: true
        - include: operator
        - include: main
  byteArray:
    - match: (<)(base64)(:)
      captures:
        1: punctuation.section.byte-array.begin.bracket.angle.sy
        2: storage.modifier.encoding.base64.sy
        3: punctuation.separator.key-value.sy
      push:
        - meta_scope: meta.byte-array.base64.sy
        - match: '(>)\s*([^:,}\]]+)'
          captures:
            1: punctuation.section.byte-array.end.bracket.angle.sy
            2: invalid.illegal.characters.sy
          pop: true
        - match: "[A-Za-z0-9+/=]+"
          scope: constant.character.encoded.base64.sy
        - include: comment
        - match: '[^\s>]+'
          scope: invalid.illegal.character.sy
    - match: <~
      captures:
        0: punctuation.section.byte-array.begin.bracket.angle.sy
      push:
        - meta_scope: meta.byte-array.base85.sy
        - match: ~>
          captures:
            0: punctuation.section.byte-array.end.bracket.angle.sy
          pop: true
        - match: "[!-uz]+"
          scope: constant.character.encoded.base85.sy
        - match: '[^!-uz\s~]'
          scope: invalid.illegal.character.sy
    - match: <
      captures:
        0: punctuation.section.byte-array.begin.bracket.angle.sy
      push:
        - meta_scope: meta.byte-array.sy
        - match: '(>)\s*([^:,}\]]+)'
          captures:
            1: punctuation.section.byte-array.end.bracket.angle.sy
            2: invalid.illegal.characters.sy
          pop: true
        - match: "[A-Fa-f0-9]+"
          scope: constant.numeric.integer.int.hexadecimal.hex.sy
        - include: comment
        - match: '[^\s>]+'
          scope: invalid.illegal.character.sy
  comma:
    - match: ","
      scope: punctuation.separator.delimiter.comma.sy
  date:
    - match: |-
        (?x)
        # Date
        [0-9]{4} - # Year
        [0-9]{2} - # Month
        [0-9]{2}   # Day

        # Time
        (?:
        	(?:T|\s+)
        	[0-9]{1,2} :     # Hours
        	[0-9]{1,2} :     # Minutes
        	[0-9]{1,2}       # Seconds
        	(?:\.[0-9]+)?   # Milliseconds
        	(\+[0-9]{4}|Z)? # Timezone
        )?

        # Followed by delimiter, EOL, or comment
        (?= \s* (?:$|[,\]}])
        |   \s+ \#(?:$|\s)
        )
      scope: constant.other.date.sy
  escape:
    - match: \\$\s*
      captures:
        0: punctuation.backslash.definition.escape.sy
      push:
        - meta_scope: constant.character.escape.newline.sy
        - match: ^
          pop: true
    - match: '(\\)x[A-Fa-f0-9]{2}'
      scope: constant.character.escape.unicode.sy
      captures:
        1: punctuation.backslash.definition.escape.sy
    - match: '(\\)u[A-Fa-f0-9]{4}'
      scope: constant.character.escape.unicode.sy
      captures:
        1: punctuation.backslash.definition.escape.sy
    - match: '(\\)u({)[A-Fa-f0-9]+(})'
      scope: constant.character.escape.unicode.sy
      captures:
        1: punctuation.backslash.definition.escape.sy
        2: punctuation.definition.unicode-escape.begin.bracket.curly.sy
        3: punctuation.definition.unicode-escape.end.bracket.curly.sy
    - match: '\\u{[^}"]*}'
      scope: invalid.illegal.unicode-escape.sy
    - match: '\\u(?![A-Fa-f0-9]{4})[^"]*'
      scope: invalid.illegal.unicode-escape.sy
    - match: (\\).
      scope: constant.character.escape.sy
      captures:
        0: punctuation.backslash.definition.escape.sy
  escapeVerbatim:
    - match: "``"
      scope: constant.character.escape.backtick.sy
  expression:
    - match: |-
        (?x)
        \G
        (
        	(?:\s*\()*
        	\s*
        	~? [-+]? ~?
        	\d
        	[-+*/%~^&|\(\)eE\s.oOxXbB\d]*
        )
        (?=
        	\s*
        	(?: $
        	|   ,
        	| \]
        	| \}
        	| (?<=\s)\#(?=\s|$)
        	)
        )
      scope: meta.expression.sy
      captures:
  field:
    - match: |-
        (?x)
        (?:
        	# Quoted property name
        	(?<=[:{\[]) \s*
        	(?: ("(?:[^"\\]|\\.)*")
        	|   ('(?:[^'\\]|\\.)*')
        	|   (`(?:[^`]|``)*+`(?!`))
        	) \s* (:)

        	|

        	# Unquoted property name
        	([^{}\[\]<>\s][^,]*?)
        	(?<!\\) (:)

        	|

        	# Presumably one following a multiline string
        	(?<=["'`]) \s* (:)
        )
        (?=\s|$)
        \s*
      captures:
        1: entity.name.tag.property.quoted.double.sy
        2: entity.name.tag.property.quoted.single.sy
        3: entity.name.tag.property.quoted.backtick.sy
        4: punctuation.separator.key-value.sy
        5: entity.name.tag.property.sy
        6: punctuation.separator.key-value.sy
        7: punctuation.separator.key-value.sy
      push:
        - meta_scope: meta.field.sy
        - match: '(?=\s*})|^(?!\G)'
          pop: true
        - include: fieldInnards
  fieldInnards:
    - include: date
    - include: expression
    - include: main
    - match: |-
        (?x) \G
        (?! ~?[-+]?[0-9]
        |  (?<=\s)\#(?=\s|$)
        )
        [^\s{}\[\]<:"'`]

        (?: [^\#,}\]:]
        |   (?<=\S) [\#:]
        |   [:\#] (?=\S)
        )*
        (?!
        	\s*
        	(?:[\{:])
        )
      scope: string.unquoted.sy
      captures:
  fieldQuotedEarly:
    - match: |-
        (?x) ^ \s*
        (?: ("(?:[^"\\]|\\.)*")
        |   ('(?:[^'\\]|\\.)*')
        |   (`(?:[^`]|``)*+`(?!`))
        ) \s* (:)
        (?=\s|$)
        \s*
      captures:
        1: entity.name.tag.property.quoted.double.sy
        2: entity.name.tag.property.quoted.single.sy
        3: entity.name.tag.property.quoted.backtick.sy
        4: punctuation.separator.key-value.sy
      push:
        - meta_scope: meta.field.sy
        - match: '(?=\s*})|^(?!\G)'
          pop: true
        - include: fieldInnards
  heredoc:
    - include: heredocDouble
    - include: heredocSingle
    - include: heredocVerbatim
  heredocDouble:
    - match: '(?i)(X?HTML)[ \t]+("{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: text.embedded.html.basic
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: text.embedded.html.basic
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(CSS)[ \t]+("{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.css
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.css
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(JS|JavaScript)[ \t]+("{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.js
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.js
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(MD|Markdown|GFM)[ \t]+("{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.gfm
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.gfm
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(bash|shell(?:-script)?|[zkc]?sh|mksh)[ \t]+("{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.shell
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.shell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(powershell|pw?sh|ps1)[ \t]+("{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.powershell
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.powershell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(bat|batch(?:-?(?:script|file))?)[ \t]+("{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.batchfile
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.batchfile
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '([-\w]+)[ \t]+("{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: "source.embedded.${1:/downcase}"
        - match: \2
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
    - match: '("{3,})'
      captures:
        0: punctuation.definition.string.begin.sy
      push:
        - meta_scope: string.quoted.double.heredoc.sy
        - match: \1
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
        - include: stringInnards
  heredocSingle:
    - match: '(?i)(X?HTML)[ \t]+(''{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: text.embedded.html.basic
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: text.embedded.html.basic
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(CSS)[ \t]+(''{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.css
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.css
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(JS|JavaScript)[ \t]+(''{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.js
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.js
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(MD|Markdown|GFM)[ \t]+(''{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.gfm
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.gfm
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(bash|shell(?:-script)?|[zkc]?sh|mksh)[ \t]+(''{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.shell
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.shell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(powershell|pw?sh|ps1)[ \t]+(''{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.powershell
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.powershell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(bat|batch(?:-?(?:script|file))?)[ \t]+(''{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.batchfile
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.batchfile
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '([-\w]+)[ \t]+(''{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: "source.embedded.${1:/downcase}"
        - match: \2
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
    - match: "('{3,})"
      captures:
        0: punctuation.definition.string.begin.sy
      push:
        - meta_scope: string.quoted.single.heredoc.sy
        - match: \1
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
        - include: stringInnards
  heredocVerbatim:
    - match: '(?i)(X?HTML)[ \t]+(`{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: text.embedded.html.basic
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: text.embedded.html.basic
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(CSS)[ \t]+(`{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.css
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.css
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(JS|JavaScript)[ \t]+(`{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.js
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.js
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(MD|Markdown|GFM)[ \t]+(`{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.gfm
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.gfm
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(bash|shell(?:-script)?|[zkc]?sh|mksh)[ \t]+(`{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.shell
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.shell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(powershell|pw?sh|ps1)[ \t]+(`{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.powershell
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.powershell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '(?i)(bat|batch(?:-?(?:script|file))?)[ \t]+(`{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.batchfile
        - match: ((?:(?!\2).)*+)(\2)
          captures:
            1: source.embedded.batchfile
            2: punctuation.definition.string.end.sy
          pop: true
        - match: .+
          captures:
    - match: '([-\w]+)[ \t]+(`{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.heredoc.annotated.${1:/downcase}.sy"
        - meta_content_scope: "source.embedded.${1:/downcase}"
        - match: \2
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
    - match: "(`{3,})"
      captures:
        0: punctuation.definition.string.begin.sy
      push:
        - meta_scope: string.quoted.verbatim.backtick.heredoc.sy
        - match: \1
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
  "null":
    - match: |-
        (?x)
        (?:^|(?<=[\s\[{,]))
        (?:null|NULL)
        (?=$|[\s\]},])
      scope: constant.language.null.sy
  number:
    - match: |-
        (?x)
        (?:^|(?<=[\s\[\({,~]))
        (?: ([-+]?0[xX][A-Fa-f0-9_]+) # Hexadecimal
        |   ([-+]?0[oO][0-7_]+)       # Octal
        |   ([-+]?0[bB][0-1_]+)       # Binary
        |   ([-+]?[0-9_]+\.(?:[0-9_]*[eE][+-]?[0-9_]+|[0-9_]+)) # Float
        |   ([-+]?[0-9_]+(?:[eE][+-]?[0-9_]+)?) # Integer
        )
        \s*
        (?= $
        |   [-+*/%^&|\)<>\s\]},]
        |   (?<=\s)\#(?=\s|$)
        )
      captures:
        1: constant.numeric.integer.int.hexadecimal.hex.sy
        2: constant.numeric.integer.int.octal.oct.sy
        3: constant.numeric.integer.int.binary.bin.sy
        4: constant.numeric.float.decimal.dec.sy
        5: constant.numeric.integer.int.decimal.dec.sy
  operator:
    - match: '\*\*|[-+*/%]'
      scope: keyword.operator.arithmetic.sy
    - match: "(<<|>>|>>>|[~&|^])"
      scope: keyword.operator.bitwise.sy
  regexp:
    - match: '(?:([-\w]+)[ \t]+)?(/{3,})'
      captures:
        1: storage.modifier.type.annotation.sy
      push:
        - meta_scope: string.regexp.multiline.sy
        - match: '(\2)([A-Za-z]*)'
          pop: true
        - include: scope:source.regexp#main
    - match: '(?:([-\w]+)[ \t]+)?(/)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: string.regexp.sy
        - match: "(/)([A-Za-z]*)"
          captures:
            1: punctuation.definition.string.end.sy
          pop: true
        - include: scope:source.regexp#main
  string:
    - include: stringDouble
    - include: stringSingle
    - include: stringVerbatim
  stringDouble:
    - match: '(?i)(X?HTML)[ \t]+(")'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.annotated.${1:/downcase}.sy"
        - meta_content_scope: text.embedded.html.basic
        - match: '((?:[^\\"]|\\.)*+)(")'
          captures:
            1: text.embedded.html.basic
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\"]|\\.)+'
          captures:
    - match: '(?i)(CSS)[ \t]+(")'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.css
        - match: '((?:[^\\"]|\\.)*+)(")'
          captures:
            1: source.embedded.css
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\"]|\\.)+'
          captures:
    - match: '(?i)(JS|JavaScript)[ \t]+(")'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.js
        - match: '((?:[^\\"]|\\.)*+)(")'
          captures:
            1: source.embedded.js
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\"]|\\.)+'
          captures:
    - match: '(?i)(MD|Markdown|GFM)[ \t]+(")'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.gfm
        - match: '((?:[^\\"]|\\.)*+)(")'
          captures:
            1: source.embedded.gfm
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\"]|\\.)+'
          captures:
    - match: '(?i)(bash|shell(?:-script)?|[zkc]?sh|mksh)[ \t]+(")'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.shell
        - match: '((?:[^\\"]|\\.)*+)(")'
          captures:
            1: source.embedded.shell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\"]|\\.)+'
          captures:
    - match: '(?i)(powershell|pw?sh|ps1)[ \t]+(")'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.powershell
        - match: '((?:[^\\"]|\\.)*+)(")'
          captures:
            1: source.embedded.powershell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\"]|\\.)+'
          captures:
    - match: '(?i)(bat|batch(?:-?(?:script|file))?)[ \t]+(")'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.batchfile
        - match: '((?:[^\\"]|\\.)*+)(")'
          captures:
            1: source.embedded.batchfile
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\"]|\\.)+'
          captures:
    - match: '([-\w]+)[ \t]+(")'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.double.annotated.${1:/downcase}.sy"
        - meta_content_scope: "source.embedded.${1:/downcase}"
        - match: '"'
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.sy
      push:
        - meta_scope: string.quoted.double.sy
        - match: '"'
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
        - include: stringInnards
  stringInnards:
    - include: url
    - include: escape
  stringJunk:
    - match: '(?<=["''`])(?!\s*$)(?=\s*[^:,}\]])'
      push:
        - meta_scope: invalid.illegal.syntax.sy
        - match: '(?=[:,}\]])'
          pop: true
  stringSingle:
    - match: '(?i)(X?HTML)[ \t]+('')'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.annotated.${1:/downcase}.sy"
        - meta_content_scope: text.embedded.html.basic
        - match: '((?:[^\\'']|\\.)*+)('')'
          captures:
            1: text.embedded.html.basic
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\'']|\\.)+'
          captures:
    - match: '(?i)(CSS)[ \t]+('')'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.css
        - match: '((?:[^\\'']|\\.)*+)('')'
          captures:
            1: source.embedded.css
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\'']|\\.)+'
          captures:
    - match: '(?i)(JS|JavaScript)[ \t]+('')'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.js
        - match: '((?:[^\\'']|\\.)*+)('')'
          captures:
            1: source.embedded.js
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\'']|\\.)+'
          captures:
    - match: '(?i)(MD|Markdown|GFM)[ \t]+('')'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.gfm
        - match: '((?:[^\\'']|\\.)*+)('')'
          captures:
            1: source.embedded.gfm
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\'']|\\.)+'
          captures:
    - match: '(?i)(bash|shell(?:-script)?|[zkc]?sh|mksh)[ \t]+('')'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.shell
        - match: '((?:[^\\'']|\\.)*+)('')'
          captures:
            1: source.embedded.shell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\'']|\\.)+'
          captures:
    - match: '(?i)(powershell|pw?sh|ps1)[ \t]+('')'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.powershell
        - match: '((?:[^\\'']|\\.)*+)('')'
          captures:
            1: source.embedded.powershell
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\'']|\\.)+'
          captures:
    - match: '(?i)(bat|batch(?:-?(?:script|file))?)[ \t]+('')'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.batchfile
        - match: '((?:[^\\'']|\\.)*+)('')'
          captures:
            1: source.embedded.batchfile
            2: punctuation.definition.string.end.sy
          pop: true
        - match: '(?:[^\\'']|\\.)+'
          captures:
    - match: '([-\w]+)[ \t]+('')'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.single.annotated.${1:/downcase}.sy"
        - meta_content_scope: "source.embedded.${1:/downcase}"
        - match: "'"
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.sy
      push:
        - meta_scope: string.quoted.single.sy
        - match: "'"
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
        - include: stringInnards
  stringVerbatim:
    - match: '(?i)(X?HTML)[ \t]+(`)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.annotated.${1:/downcase}.sy"
        - meta_content_scope: text.embedded.html.basic
        - match: "([^`]*)(`)(?!`)"
          captures:
            1: text.embedded.html.basic
            2: punctuation.definition.string.end.sy
          pop: true
        - include: escapeVerbatim
        - match: "[^`]+"
          captures:
    - match: '(?i)(CSS)[ \t]+(`)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.css
        - match: "([^`]*)(`)(?!`)"
          captures:
            1: source.embedded.css
            2: punctuation.definition.string.end.sy
          pop: true
        - include: escapeVerbatim
        - match: "[^`]+"
          captures:
    - match: '(?i)(JS|JavaScript)[ \t]+(`)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.js
        - match: "([^`]*)(`)(?!`)"
          captures:
            1: source.embedded.js
            2: punctuation.definition.string.end.sy
          pop: true
        - include: escapeVerbatim
        - match: "[^`]+"
          captures:
    - match: '(?i)(MD|Markdown|GFM)[ \t]+(`)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.gfm
        - match: "([^`]*)(`)(?!`)"
          captures:
            1: source.embedded.gfm
            2: punctuation.definition.string.end.sy
          pop: true
        - include: escapeVerbatim
        - match: "[^`]+"
          captures:
    - match: '(?i)(bash|shell(?:-script)?|[zkc]?sh|mksh)[ \t]+(`)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.shell
        - match: "([^`]*)(`)(?!`)"
          captures:
            1: source.embedded.shell
            2: punctuation.definition.string.end.sy
          pop: true
        - include: escapeVerbatim
        - match: "[^`]+"
          captures:
    - match: '(?i)(powershell|pw?sh|ps1)[ \t]+(`)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.powershell
        - match: "([^`]*)(`)(?!`)"
          captures:
            1: source.embedded.powershell
            2: punctuation.definition.string.end.sy
          pop: true
        - include: escapeVerbatim
        - match: "[^`]+"
          captures:
    - match: '(?i)(bat|batch(?:-?(?:script|file))?)[ \t]+(`)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.annotated.${1:/downcase}.sy"
        - meta_content_scope: source.embedded.batchfile
        - match: "([^`]*)(`)(?!`)"
          captures:
            1: source.embedded.batchfile
            2: punctuation.definition.string.end.sy
          pop: true
        - include: escapeVerbatim
        - match: "[^`]+"
          captures:
    - match: '([-\w]+)[ \t]+(`)'
      captures:
        1: storage.modifier.type.annotation.sy
        2: punctuation.definition.string.begin.sy
      push:
        - meta_scope: "string.quoted.verbatim.backtick.annotated.${1:/downcase}.sy"
        - meta_content_scope: "source.embedded.${1:/downcase}"
        - match: "`"
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
    - match: "`"
      captures:
        0: punctuation.definition.string.begin.sy
      push:
        - meta_scope: string.quoted.verbatim.backtick.sy
        - match: "`(?!`)"
          captures:
            0: punctuation.definition.string.end.sy
          pop: true
        - include: escapeVerbatim
  url:
    - match: |-
        (?x) \b
        # Protocol
        ( https?
        | s?ftp
        | ftps
        | file
        | wss?
        | smb
        | git (?:\+https?)
        | ssh
        | rsync
        | afp
        | nfs
        | (?:x-)?man(?:-page)?
        | gopher
        | txmt
        | issue
        | atom
        ) ://

        # Path specifier
        (?:
        	(?! \#\w*\#)
        	(?: [-:\@\w.,~%+_/?=&\#;|!])
        )+

        # Don't include trailing punctuation
        (?<![-.,?:\#;])
      scope: constant.other.reference.link.underline.sy
    - match: |-
        (?x) \b
        mailto: (?:
        	(?! \#\w*\#)
        	(?: [-:@\w.,~%+_/?=&\#;|!])
        )+
        (?<![-.,?:\#;])
      scope: markup.underline.link.mailto.sy
