# ================
# ChIP-Seq - ROSE2
# ================
---

- slug: rose2
  name: ROSE2
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/bamliquidator:1.2.0
  data_name: "{{ rankby|sample_name|default('?') }}"
  version: 4.3.1
  type: data:chipseq:rose2
  entity:
    type: sample
    input: input
  category: ChIP-Seq:Post Process
  persistence: CACHED
  description: |
    For identification of super enhancers R2 uses the Rank Ordering of
    Super-Enhancers algorithm (ROSE2). This takes the peaks called by RSEG for
    acetylation and calculates the distances in-between to judge whether they
    can be considered super-enhancers. The ranked values can be plotted and by
    locating the inflection point in the resulting graph, super-enhancers can
    be assigned. It can also be used with the MACS calculated data. See
    [here](http://younglab.wi.mit.edu/super_enhancer_code.html) for more
    information.
  input:
    - name: input
      label: BED/narrowPeak file (MACS results)
      type: data:chipseq:callpeak
      required: false
    - name: input_upload
      label: BED file (Upload)
      type: data:bed
      required: false
    - name: rankby
      label: BAM File
      type: data:alignment:bam
      description: |
        bamfile to rank enhancer by
    - name: control
      label: Control BAM File
      type: data:alignment:bam
      required: false
      description: |
        bamfile to rank enhancer by
    - name: tss
      label: TSS exclusion
      type: basic:integer
      default: 0
      description: |
        Enter a distance from TSS to exclude. 0 = no TSS exclusion
    - name: stitch
      label: Stitch
      type: basic:integer
      required: false
      description: |
        Enter a max linking distance for stitching. If not given, optimal stitching parameter will be determined automatically.
    - name: mask
      label: Masking BED file
      type: data:bed
      required: false
      description: |
        Mask a set of regions from analysis. Provide a BED of masking regions.
  output:
    - name: all_enhancers
      label: All enhancers table
      type: basic:file
    - name: enhancers_with_super
      label: Super enhancers table
      type: basic:file
    - name: plot_points
      label: Plot points
      type: basic:file
    - name: plot_panel
      label: Plot panel
      type: basic:file
    - name: enhancer_gene
      label: Enhancer to gene
      type: basic:file
    - name: enhancer_top_gene
      label: Enhancer to top gene
      type: basic:file
    - name: gene_enhancer
      label: Gene to Enhancer
      type: basic:file
    - name: stitch_parameter
      label: Stitch parameter
      type: basic:file
      required: false
    - name: all_output
      label: All output
      type: basic:file
    - name: scatter_plot
      label: Super-Enhancer plot
      type: basic:json
    - name: species
      label: Species
      type: basic:string
    - name: build
      label: Build
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      {% if not input and not input_upload %}
        re-error "Peaks file missing. Please provide .bed peaks file as a file upload or MACS14 output."
      {% endif %}

      {% if input and input_upload %}
        re-error "Please provide only one .bed peaks file."
      {% endif %}

      {% if input %}
        {% if input.species != rankby.species %}
          re-error \
            {{ ('Species of rankby bam file (%s) and MACS bed file (%s) do not match. ' ~
               'Please provide aligned reads and annotation with the same species.')
               |format(rankby.species, input.species) }}
        {% endif %}
        {% if input.build != rankby.build %}
          re-error \
            {{ ('Genome builds of rankby bam file (%s) and MACS bed file (%s) do not match. ' ~
               'Please provide aligned reads and annotation with the same genome build.')
               |format(rankby.build, input.build) }}
        {% endif %}
      {% endif %}

      {% if input_upload %}
        {% if input_upload.species != rankby.species %}
          re-error \
            {{ ('Species of rankby bam file (%s) and uploaded bed file (%s) do not match. ' ~
               'Please provide aligned reads and annotation with the same species.')
               |format(rankby.species, input_upload.species) }}
        {% endif %}
        {% if input_upload.build != rankby.build %}
          re-error \
            {{ ('Genome builds of rankby bam file (%s) and uploaded bed file (%s) do not match. ' ~
               'Please provide aligned reads and annotation with the same genome build.')
               |format(rankby.build, input_upload.build) }}
        {% endif %}
      {% endif %}

      {% if control %}
        {% if control.species != rankby.species %}
          re-error \
            {{ ('Species of rankby bam file (%s) and control bam file (%s) do not match. ' ~
               'Please provide aligned reads with the same species.')
               |format(rankby.species, control.species) }}
        {% endif %}
        {% if control.build != rankby.build %}
          re-error \
            {{ ('Genome builds of rankby bam file (%s) and control bam  file (%s) do not match. ' ~
               'Please provide aligned reads with the same genome build.')
               |format(rankby.build, control.build) }}
        {% endif %}
      {% endif %}

      {% if mask %}
        {% if mask.species != rankby.species %}
          re-error \
            {{ ('Species of the masking bed file (%s) does not match other inputs` species. ' ~
               'Please provide a masking file of the same species as other inputs.')
               |format(mask.species) }}
        {% endif %}
        {% if mask.build != rankby.build %}
          re-error \
            {{ ('Genome build of the masking bed file (%s) does not match other inputs` build. ' ~
               'Please provide a masking file of the same genome build as other inputs.')
               |format(mask.build) }}
        {% endif %}
      {% endif %}

      {% set genome_list = [
        'hg19',
        'hg18',
        'mm10',
        'mm9',
        'mm8',
        'rn6',
        'rn4',
        ]
      %}
      {% if rankby.build not in genome_list %}
        re-error \
          {{ ('"%s" is not a valid genome build. Accepted genome builds are: "%s".')
             |format(rankby.build, genome_list|join('", "')) }}
      {% endif %}

      {% set genome = rankby.build|upper %}

      {% if input_upload %}
        {% if (input_upload.bed.file|basename)[-4:] == '.bed' %}
          NAME=`basename {{ input_upload.bed.file }} .bed`
          cp {{ input_upload.bed.file }} "${NAME}.bed"
        {% else %}
          NAME=`basename {{ input_upload.bed.file }} .bed.gz`
          bgzip -cd {{ input_upload.bed.file }} > "${NAME}".bed
        {% endif %}

      {% elif input|type|subtype('data:chipseq:callpeak:macs14') %}
        {% if (input.peaks_bed.file|basename)[-4:] == '.bed' %}
          NAME=`basename {{ input.peaks_bed.file }} .bed`
          cp {{ input.peaks_bed.file }} "${NAME}".bed
        {% else %}
          NAME=`basename {{ input.peaks_bed.file }} .bed.gz`
          bgzip -cd {{ input.peaks_bed.file }} > "${NAME}".bed
        {% endif %}

      {% elif input|type|subtype('data:chipseq:callpeak:macs2') %}
        {% if (input.narrow_peaks.file|basename)[-11:] == '.narrowPeak' %}
          NAME=`basename {{ input.narrow_peaks.file }} .narrowPeak`
          cp {{ input.narrow_peaks.file }} "${NAME}".bed
        {% else %}
          NAME=`basename {{ input.narrow_peaks.file }} .narrowPeak.gz`
          bgzip -cd {{ input.narrow_peaks.file }} > "${NAME}".bed
        {% endif %}
      {% endif %}

      rose2 \
        --genome {{ genome }} \
        -i "${NAME}.bed" \
        --rankby {{ rankby.bam.file }} \
        {% if control %}--control {{ control.bam.file }}{% endif %} \
        --tss {{ tss }} \
        {% if stitch or stitch == 0 %}--stitch {{ stitch }} {% endif %} \
        {% if mask %}--mask {{ mask.bed.file }} {% endif %} \
        --out .
      re-checkrc "Rose2 run failed."

      re-save-file all_enhancers "${NAME}_AllEnhancers.table.txt"
      re-save-file enhancers_with_super "${NAME}_Enhancers_withSuper.bed"
      re-save-file plot_points "${NAME}_Plot_points.png"
      re-save-file plot_panel "${NAME}_Plot_panel.png"
      re-save-file enhancer_gene "${NAME}_SuperEnhancers_ENHANCER_TO_GENE.txt"
      re-save-file enhancer_top_gene "${NAME}_SuperEnhancers_ENHANCER_TO_TOP_GENE.txt"
      re-save-file gene_enhancer "${NAME}_SuperEnhancers_GENE_TO_ENHANCER.txt"
      {% if stitch is not defined %}
        re-save-file stitch_parameter "${NAME}_stitch_parameter.pdf"
      {% endif %}

      plot_enhancers.py ${NAME}_AllEnhancers.table.txt scatter_plot.json {% if control %} -c {% endif %}
      re-checkrc

      zip "${NAME}"_output_all.zip "${NAME}"_*
      re-save-file all_output ${NAME}_output_all.zip
      re-save scatter_plot scatter_plot.json

      re-save species {{ rankby.species }}
      re-save build {{ rankby.build }}
