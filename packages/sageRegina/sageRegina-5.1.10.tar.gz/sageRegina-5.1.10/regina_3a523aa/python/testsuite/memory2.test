# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2015-2018, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests the independence and lifespans of engine-generated packets.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

def watcher(p):
    c = Container()
    p.insertChildLast(c)
    return c

def ensureAlive(watcher):
    try:
        watcher.label()
    except:
        print('ERROR: ensureAlive failed')

def ensureDestroyed(watcher):
    try:
        watcher.label()
        print('ERROR: ensureDestroyed failed')
    except:
        pass

print('Script variables #1')
a = Container(); aw = watcher(a)
b = Triangulation3(); b.newSimplex(); bw = watcher(b)
c = Script(); cw = watcher(c)
a.insertChildLast(b)
a.insertChildLast(c)
c.addVariable('foo', b)
ensureAlive(aw); ensureAlive(bw); ensureAlive(cw)
val = c.variableValue('foo')
ensureAlive(aw); ensureAlive(bw); ensureAlive(cw)
a = None
ensureDestroyed(aw); ensureDestroyed(bw); ensureDestroyed(cw)

print('Script variables #2')
a = Container(); aw = watcher(a)
b = Triangulation3(); b.newSimplex(); bw = watcher(b)
c = Script(); cw = watcher(c)
a.insertChildLast(b)
a.insertChildLast(c)
c.addVariable('foo', a)
ensureAlive(aw); ensureAlive(bw); ensureAlive(cw)
val = c.variableValue('foo')
ensureAlive(aw); ensureAlive(bw); ensureAlive(cw)
a = None
ensureAlive(aw); ensureAlive(bw); ensureAlive(cw)
val = None
ensureDestroyed(aw); ensureDestroyed(bw); ensureDestroyed(cw)

print('Example triangulation')
f = ExampleSnapPea.figureEight(); fw = watcher(f)
ensureAlive(fw)
f = None
ensureDestroyed(fw)

print('Vertex link #1')
t = Example3.lens(7,1); tw = watcher(t)
v = t.vertex(0).buildLink(); vw = watcher(v)
t.insertChildLast(v)
ensureAlive(tw); ensureAlive(vw)
t = None
ensureDestroyed(tw); ensureDestroyed(vw)

print('Vertex link #2')
t = Example3.lens(7,1); tw = watcher(t)
v = t.vertex(0).buildLink(); vw = watcher(v)
ensureAlive(tw); ensureAlive(vw)
t = None
ensureDestroyed(tw); ensureAlive(vw)
v = None
ensureDestroyed(tw); ensureDestroyed(vw)

print('Vertex link detailed #1')
t = Example3.lens(7,1); tw = watcher(t)
v = t.vertex(0).buildLinkDetail(); vw = watcher(v[0])
t.insertChildLast(v[0])
ensureAlive(tw); ensureAlive(vw)
t = None
ensureDestroyed(tw); ensureDestroyed(vw)

print('Vertex link detailed #2')
t = Example3.lens(7,1); tw = watcher(t)
v = t.vertex(0).buildLinkDetail(); vw = watcher(v[0])
ensureAlive(tw); ensureAlive(vw)
t = None
ensureDestroyed(tw); ensureAlive(vw)
v = None
ensureDestroyed(tw); ensureDestroyed(vw)

