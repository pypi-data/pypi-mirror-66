# coding: utf-8

"""
    Jordskredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AlertInfoArea(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area_desc_field': 'str',
        'polygon_field': 'list[str]',
        'geocode_field': 'list[AlertInfoAreaGeocode]',
        'altitude_field': 'float',
        'altitude_field_specified': 'bool',
        'ceiling_field': 'float',
        'ceiling_field_specified': 'bool'
    }

    attribute_map = {
        'area_desc_field': 'areaDescField',
        'polygon_field': 'polygonField',
        'geocode_field': 'geocodeField',
        'altitude_field': 'altitudeField',
        'altitude_field_specified': 'altitudeFieldSpecified',
        'ceiling_field': 'ceilingField',
        'ceiling_field_specified': 'ceilingFieldSpecified'
    }

    def __init__(self, area_desc_field=None, polygon_field=None, geocode_field=None, altitude_field=None, altitude_field_specified=None, ceiling_field=None, ceiling_field_specified=None):  # noqa: E501
        """AlertInfoArea - a model defined in Swagger"""  # noqa: E501
        self._area_desc_field = None
        self._polygon_field = None
        self._geocode_field = None
        self._altitude_field = None
        self._altitude_field_specified = None
        self._ceiling_field = None
        self._ceiling_field_specified = None
        self.discriminator = None
        if area_desc_field is not None:
            self.area_desc_field = area_desc_field
        if polygon_field is not None:
            self.polygon_field = polygon_field
        if geocode_field is not None:
            self.geocode_field = geocode_field
        if altitude_field is not None:
            self.altitude_field = altitude_field
        if altitude_field_specified is not None:
            self.altitude_field_specified = altitude_field_specified
        if ceiling_field is not None:
            self.ceiling_field = ceiling_field
        if ceiling_field_specified is not None:
            self.ceiling_field_specified = ceiling_field_specified

    @property
    def area_desc_field(self):
        """Gets the area_desc_field of this AlertInfoArea.  # noqa: E501


        :return: The area_desc_field of this AlertInfoArea.  # noqa: E501
        :rtype: str
        """
        return self._area_desc_field

    @area_desc_field.setter
    def area_desc_field(self, area_desc_field):
        """Sets the area_desc_field of this AlertInfoArea.


        :param area_desc_field: The area_desc_field of this AlertInfoArea.  # noqa: E501
        :type: str
        """

        self._area_desc_field = area_desc_field

    @property
    def polygon_field(self):
        """Gets the polygon_field of this AlertInfoArea.  # noqa: E501


        :return: The polygon_field of this AlertInfoArea.  # noqa: E501
        :rtype: list[str]
        """
        return self._polygon_field

    @polygon_field.setter
    def polygon_field(self, polygon_field):
        """Sets the polygon_field of this AlertInfoArea.


        :param polygon_field: The polygon_field of this AlertInfoArea.  # noqa: E501
        :type: list[str]
        """

        self._polygon_field = polygon_field

    @property
    def geocode_field(self):
        """Gets the geocode_field of this AlertInfoArea.  # noqa: E501


        :return: The geocode_field of this AlertInfoArea.  # noqa: E501
        :rtype: list[AlertInfoAreaGeocode]
        """
        return self._geocode_field

    @geocode_field.setter
    def geocode_field(self, geocode_field):
        """Sets the geocode_field of this AlertInfoArea.


        :param geocode_field: The geocode_field of this AlertInfoArea.  # noqa: E501
        :type: list[AlertInfoAreaGeocode]
        """

        self._geocode_field = geocode_field

    @property
    def altitude_field(self):
        """Gets the altitude_field of this AlertInfoArea.  # noqa: E501


        :return: The altitude_field of this AlertInfoArea.  # noqa: E501
        :rtype: float
        """
        return self._altitude_field

    @altitude_field.setter
    def altitude_field(self, altitude_field):
        """Sets the altitude_field of this AlertInfoArea.


        :param altitude_field: The altitude_field of this AlertInfoArea.  # noqa: E501
        :type: float
        """

        self._altitude_field = altitude_field

    @property
    def altitude_field_specified(self):
        """Gets the altitude_field_specified of this AlertInfoArea.  # noqa: E501


        :return: The altitude_field_specified of this AlertInfoArea.  # noqa: E501
        :rtype: bool
        """
        return self._altitude_field_specified

    @altitude_field_specified.setter
    def altitude_field_specified(self, altitude_field_specified):
        """Sets the altitude_field_specified of this AlertInfoArea.


        :param altitude_field_specified: The altitude_field_specified of this AlertInfoArea.  # noqa: E501
        :type: bool
        """

        self._altitude_field_specified = altitude_field_specified

    @property
    def ceiling_field(self):
        """Gets the ceiling_field of this AlertInfoArea.  # noqa: E501


        :return: The ceiling_field of this AlertInfoArea.  # noqa: E501
        :rtype: float
        """
        return self._ceiling_field

    @ceiling_field.setter
    def ceiling_field(self, ceiling_field):
        """Sets the ceiling_field of this AlertInfoArea.


        :param ceiling_field: The ceiling_field of this AlertInfoArea.  # noqa: E501
        :type: float
        """

        self._ceiling_field = ceiling_field

    @property
    def ceiling_field_specified(self):
        """Gets the ceiling_field_specified of this AlertInfoArea.  # noqa: E501


        :return: The ceiling_field_specified of this AlertInfoArea.  # noqa: E501
        :rtype: bool
        """
        return self._ceiling_field_specified

    @ceiling_field_specified.setter
    def ceiling_field_specified(self, ceiling_field_specified):
        """Sets the ceiling_field_specified of this AlertInfoArea.


        :param ceiling_field_specified: The ceiling_field_specified of this AlertInfoArea.  # noqa: E501
        :type: bool
        """

        self._ceiling_field_specified = ceiling_field_specified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertInfoArea, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertInfoArea):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
