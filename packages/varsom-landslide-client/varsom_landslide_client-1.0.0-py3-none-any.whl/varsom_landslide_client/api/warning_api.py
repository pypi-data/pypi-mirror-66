# coding: utf-8

"""
    Jordskredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from varsom_landslide_client.api_client import ApiClient


class WarningApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def warning_all(self, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """warning_all  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.warning_all(langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[Warning]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.warning_all_with_http_info(langkey, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.warning_all_with_http_info(langkey, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def warning_all_with_http_info(self, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """warning_all  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.warning_all_with_http_info(langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[Warning]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['langkey', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method warning_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `warning_all`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `warning_all`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `warning_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Warning/All/{langkey}/{startdate}/{enddate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Warning]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def warning_county(self, county, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """warning_county  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.warning_county(county, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str county: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[Warning]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.warning_county_with_http_info(county, langkey, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.warning_county_with_http_info(county, langkey, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def warning_county_with_http_info(self, county, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """warning_county  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.warning_county_with_http_info(county, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str county: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[Warning]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['county', 'langkey', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method warning_county" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'county' is set
        if ('county' not in params or
                params['county'] is None):
            raise ValueError("Missing the required parameter `county` when calling `warning_county`")  # noqa: E501
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `warning_county`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `warning_county`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `warning_county`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'county' in params:
            path_params['county'] = params['county']  # noqa: E501
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Warning/County/{county}/{langkey}/{startdate}/{enddate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Warning]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def warning_get(self, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """warning_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.warning_get(langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[Warning]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.warning_get_with_http_info(langkey, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.warning_get_with_http_info(langkey, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def warning_get_with_http_info(self, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """warning_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.warning_get_with_http_info(langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[Warning]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['langkey', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method warning_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `warning_get`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `warning_get`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `warning_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Warning/{langkey}/{startdate}/{enddate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Warning]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def warning_municipality(self, municipality, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """warning_municipality  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.warning_municipality(municipality, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str municipality: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[Warning]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.warning_municipality_with_http_info(municipality, langkey, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.warning_municipality_with_http_info(municipality, langkey, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def warning_municipality_with_http_info(self, municipality, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """warning_municipality  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.warning_municipality_with_http_info(municipality, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str municipality: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[Warning]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['municipality', 'langkey', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method warning_municipality" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'municipality' is set
        if ('municipality' not in params or
                params['municipality'] is None):
            raise ValueError("Missing the required parameter `municipality` when calling `warning_municipality`")  # noqa: E501
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `warning_municipality`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `warning_municipality`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `warning_municipality`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'municipality' in params:
            path_params['municipality'] = params['municipality']  # noqa: E501
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Warning/Municipality/{municipality}/{langkey}/{startdate}/{enddate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Warning]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
