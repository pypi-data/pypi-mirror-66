# coding: utf-8

"""
    Jordskredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Alert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier_field': 'str',
        'sender_field': 'int',
        'sent_field': 'datetime',
        'status_field': 'int',
        'msg_type_field': 'int',
        'scope_field': 'int',
        'code_field': 'int',
        'references_field': 'str',
        'incidents_field': 'str',
        'info_field': 'list[AlertInfo]'
    }

    attribute_map = {
        'identifier_field': 'identifierField',
        'sender_field': 'senderField',
        'sent_field': 'sentField',
        'status_field': 'statusField',
        'msg_type_field': 'msgTypeField',
        'scope_field': 'scopeField',
        'code_field': 'codeField',
        'references_field': 'referencesField',
        'incidents_field': 'incidentsField',
        'info_field': 'infoField'
    }

    def __init__(self, identifier_field=None, sender_field=None, sent_field=None, status_field=None, msg_type_field=None, scope_field=None, code_field=None, references_field=None, incidents_field=None, info_field=None):  # noqa: E501
        """Alert - a model defined in Swagger"""  # noqa: E501
        self._identifier_field = None
        self._sender_field = None
        self._sent_field = None
        self._status_field = None
        self._msg_type_field = None
        self._scope_field = None
        self._code_field = None
        self._references_field = None
        self._incidents_field = None
        self._info_field = None
        self.discriminator = None
        if identifier_field is not None:
            self.identifier_field = identifier_field
        if sender_field is not None:
            self.sender_field = sender_field
        if sent_field is not None:
            self.sent_field = sent_field
        if status_field is not None:
            self.status_field = status_field
        if msg_type_field is not None:
            self.msg_type_field = msg_type_field
        if scope_field is not None:
            self.scope_field = scope_field
        if code_field is not None:
            self.code_field = code_field
        if references_field is not None:
            self.references_field = references_field
        if incidents_field is not None:
            self.incidents_field = incidents_field
        if info_field is not None:
            self.info_field = info_field

    @property
    def identifier_field(self):
        """Gets the identifier_field of this Alert.  # noqa: E501


        :return: The identifier_field of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._identifier_field

    @identifier_field.setter
    def identifier_field(self, identifier_field):
        """Sets the identifier_field of this Alert.


        :param identifier_field: The identifier_field of this Alert.  # noqa: E501
        :type: str
        """

        self._identifier_field = identifier_field

    @property
    def sender_field(self):
        """Gets the sender_field of this Alert.  # noqa: E501


        :return: The sender_field of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._sender_field

    @sender_field.setter
    def sender_field(self, sender_field):
        """Sets the sender_field of this Alert.


        :param sender_field: The sender_field of this Alert.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if sender_field not in allowed_values:
            raise ValueError(
                "Invalid value for `sender_field` ({0}), must be one of {1}"  # noqa: E501
                .format(sender_field, allowed_values)
            )

        self._sender_field = sender_field

    @property
    def sent_field(self):
        """Gets the sent_field of this Alert.  # noqa: E501


        :return: The sent_field of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._sent_field

    @sent_field.setter
    def sent_field(self, sent_field):
        """Sets the sent_field of this Alert.


        :param sent_field: The sent_field of this Alert.  # noqa: E501
        :type: datetime
        """

        self._sent_field = sent_field

    @property
    def status_field(self):
        """Gets the status_field of this Alert.  # noqa: E501


        :return: The status_field of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._status_field

    @status_field.setter
    def status_field(self, status_field):
        """Sets the status_field of this Alert.


        :param status_field: The status_field of this Alert.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if status_field not in allowed_values:
            raise ValueError(
                "Invalid value for `status_field` ({0}), must be one of {1}"  # noqa: E501
                .format(status_field, allowed_values)
            )

        self._status_field = status_field

    @property
    def msg_type_field(self):
        """Gets the msg_type_field of this Alert.  # noqa: E501


        :return: The msg_type_field of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._msg_type_field

    @msg_type_field.setter
    def msg_type_field(self, msg_type_field):
        """Sets the msg_type_field of this Alert.


        :param msg_type_field: The msg_type_field of this Alert.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if msg_type_field not in allowed_values:
            raise ValueError(
                "Invalid value for `msg_type_field` ({0}), must be one of {1}"  # noqa: E501
                .format(msg_type_field, allowed_values)
            )

        self._msg_type_field = msg_type_field

    @property
    def scope_field(self):
        """Gets the scope_field of this Alert.  # noqa: E501


        :return: The scope_field of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._scope_field

    @scope_field.setter
    def scope_field(self, scope_field):
        """Sets the scope_field of this Alert.


        :param scope_field: The scope_field of this Alert.  # noqa: E501
        :type: int
        """
        allowed_values = [0]  # noqa: E501
        if scope_field not in allowed_values:
            raise ValueError(
                "Invalid value for `scope_field` ({0}), must be one of {1}"  # noqa: E501
                .format(scope_field, allowed_values)
            )

        self._scope_field = scope_field

    @property
    def code_field(self):
        """Gets the code_field of this Alert.  # noqa: E501


        :return: The code_field of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._code_field

    @code_field.setter
    def code_field(self, code_field):
        """Sets the code_field of this Alert.


        :param code_field: The code_field of this Alert.  # noqa: E501
        :type: int
        """
        allowed_values = [0]  # noqa: E501
        if code_field not in allowed_values:
            raise ValueError(
                "Invalid value for `code_field` ({0}), must be one of {1}"  # noqa: E501
                .format(code_field, allowed_values)
            )

        self._code_field = code_field

    @property
    def references_field(self):
        """Gets the references_field of this Alert.  # noqa: E501


        :return: The references_field of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._references_field

    @references_field.setter
    def references_field(self, references_field):
        """Sets the references_field of this Alert.


        :param references_field: The references_field of this Alert.  # noqa: E501
        :type: str
        """

        self._references_field = references_field

    @property
    def incidents_field(self):
        """Gets the incidents_field of this Alert.  # noqa: E501


        :return: The incidents_field of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._incidents_field

    @incidents_field.setter
    def incidents_field(self, incidents_field):
        """Sets the incidents_field of this Alert.


        :param incidents_field: The incidents_field of this Alert.  # noqa: E501
        :type: str
        """

        self._incidents_field = incidents_field

    @property
    def info_field(self):
        """Gets the info_field of this Alert.  # noqa: E501


        :return: The info_field of this Alert.  # noqa: E501
        :rtype: list[AlertInfo]
        """
        return self._info_field

    @info_field.setter
    def info_field(self, info_field):
        """Sets the info_field of this Alert.


        :param info_field: The info_field of this Alert.  # noqa: E501
        :type: list[AlertInfo]
        """

        self._info_field = info_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
