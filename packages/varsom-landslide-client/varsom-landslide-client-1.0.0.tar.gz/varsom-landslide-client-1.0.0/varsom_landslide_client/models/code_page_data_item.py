# coding: utf-8

"""
    Jordskredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CodePageDataItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'm_data_index': 'int',
        'm_ui_family_code_page': 'int',
        'm_web_name': 'str',
        'm_header_name': 'str',
        'm_body_name': 'str',
        'm_flags': 'int'
    }

    attribute_map = {
        'm_data_index': 'm_dataIndex',
        'm_ui_family_code_page': 'm_uiFamilyCodePage',
        'm_web_name': 'm_webName',
        'm_header_name': 'm_headerName',
        'm_body_name': 'm_bodyName',
        'm_flags': 'm_flags'
    }

    def __init__(self, m_data_index=None, m_ui_family_code_page=None, m_web_name=None, m_header_name=None, m_body_name=None, m_flags=None):  # noqa: E501
        """CodePageDataItem - a model defined in Swagger"""  # noqa: E501
        self._m_data_index = None
        self._m_ui_family_code_page = None
        self._m_web_name = None
        self._m_header_name = None
        self._m_body_name = None
        self._m_flags = None
        self.discriminator = None
        if m_data_index is not None:
            self.m_data_index = m_data_index
        if m_ui_family_code_page is not None:
            self.m_ui_family_code_page = m_ui_family_code_page
        if m_web_name is not None:
            self.m_web_name = m_web_name
        if m_header_name is not None:
            self.m_header_name = m_header_name
        if m_body_name is not None:
            self.m_body_name = m_body_name
        if m_flags is not None:
            self.m_flags = m_flags

    @property
    def m_data_index(self):
        """Gets the m_data_index of this CodePageDataItem.  # noqa: E501


        :return: The m_data_index of this CodePageDataItem.  # noqa: E501
        :rtype: int
        """
        return self._m_data_index

    @m_data_index.setter
    def m_data_index(self, m_data_index):
        """Sets the m_data_index of this CodePageDataItem.


        :param m_data_index: The m_data_index of this CodePageDataItem.  # noqa: E501
        :type: int
        """

        self._m_data_index = m_data_index

    @property
    def m_ui_family_code_page(self):
        """Gets the m_ui_family_code_page of this CodePageDataItem.  # noqa: E501


        :return: The m_ui_family_code_page of this CodePageDataItem.  # noqa: E501
        :rtype: int
        """
        return self._m_ui_family_code_page

    @m_ui_family_code_page.setter
    def m_ui_family_code_page(self, m_ui_family_code_page):
        """Sets the m_ui_family_code_page of this CodePageDataItem.


        :param m_ui_family_code_page: The m_ui_family_code_page of this CodePageDataItem.  # noqa: E501
        :type: int
        """

        self._m_ui_family_code_page = m_ui_family_code_page

    @property
    def m_web_name(self):
        """Gets the m_web_name of this CodePageDataItem.  # noqa: E501


        :return: The m_web_name of this CodePageDataItem.  # noqa: E501
        :rtype: str
        """
        return self._m_web_name

    @m_web_name.setter
    def m_web_name(self, m_web_name):
        """Sets the m_web_name of this CodePageDataItem.


        :param m_web_name: The m_web_name of this CodePageDataItem.  # noqa: E501
        :type: str
        """

        self._m_web_name = m_web_name

    @property
    def m_header_name(self):
        """Gets the m_header_name of this CodePageDataItem.  # noqa: E501


        :return: The m_header_name of this CodePageDataItem.  # noqa: E501
        :rtype: str
        """
        return self._m_header_name

    @m_header_name.setter
    def m_header_name(self, m_header_name):
        """Sets the m_header_name of this CodePageDataItem.


        :param m_header_name: The m_header_name of this CodePageDataItem.  # noqa: E501
        :type: str
        """

        self._m_header_name = m_header_name

    @property
    def m_body_name(self):
        """Gets the m_body_name of this CodePageDataItem.  # noqa: E501


        :return: The m_body_name of this CodePageDataItem.  # noqa: E501
        :rtype: str
        """
        return self._m_body_name

    @m_body_name.setter
    def m_body_name(self, m_body_name):
        """Sets the m_body_name of this CodePageDataItem.


        :param m_body_name: The m_body_name of this CodePageDataItem.  # noqa: E501
        :type: str
        """

        self._m_body_name = m_body_name

    @property
    def m_flags(self):
        """Gets the m_flags of this CodePageDataItem.  # noqa: E501


        :return: The m_flags of this CodePageDataItem.  # noqa: E501
        :rtype: int
        """
        return self._m_flags

    @m_flags.setter
    def m_flags(self, m_flags):
        """Sets the m_flags of this CodePageDataItem.


        :param m_flags: The m_flags of this CodePageDataItem.  # noqa: E501
        :type: int
        """

        self._m_flags = m_flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodePageDataItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodePageDataItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
