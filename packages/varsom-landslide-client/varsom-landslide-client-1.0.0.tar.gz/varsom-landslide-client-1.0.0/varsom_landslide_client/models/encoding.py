# coding: utf-8

"""
    Jordskredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Encoding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'm_code_page': 'int',
        'data_item': 'CodePageDataItem',
        'm_is_read_only': 'bool',
        'encoder_fallback': 'EncoderFallback',
        'decoder_fallback': 'DecoderFallback'
    }

    attribute_map = {
        'm_code_page': 'm_codePage',
        'data_item': 'dataItem',
        'm_is_read_only': 'm_isReadOnly',
        'encoder_fallback': 'encoderFallback',
        'decoder_fallback': 'decoderFallback'
    }

    def __init__(self, m_code_page=None, data_item=None, m_is_read_only=None, encoder_fallback=None, decoder_fallback=None):  # noqa: E501
        """Encoding - a model defined in Swagger"""  # noqa: E501
        self._m_code_page = None
        self._data_item = None
        self._m_is_read_only = None
        self._encoder_fallback = None
        self._decoder_fallback = None
        self.discriminator = None
        if m_code_page is not None:
            self.m_code_page = m_code_page
        if data_item is not None:
            self.data_item = data_item
        if m_is_read_only is not None:
            self.m_is_read_only = m_is_read_only
        if encoder_fallback is not None:
            self.encoder_fallback = encoder_fallback
        if decoder_fallback is not None:
            self.decoder_fallback = decoder_fallback

    @property
    def m_code_page(self):
        """Gets the m_code_page of this Encoding.  # noqa: E501


        :return: The m_code_page of this Encoding.  # noqa: E501
        :rtype: int
        """
        return self._m_code_page

    @m_code_page.setter
    def m_code_page(self, m_code_page):
        """Sets the m_code_page of this Encoding.


        :param m_code_page: The m_code_page of this Encoding.  # noqa: E501
        :type: int
        """

        self._m_code_page = m_code_page

    @property
    def data_item(self):
        """Gets the data_item of this Encoding.  # noqa: E501


        :return: The data_item of this Encoding.  # noqa: E501
        :rtype: CodePageDataItem
        """
        return self._data_item

    @data_item.setter
    def data_item(self, data_item):
        """Sets the data_item of this Encoding.


        :param data_item: The data_item of this Encoding.  # noqa: E501
        :type: CodePageDataItem
        """

        self._data_item = data_item

    @property
    def m_is_read_only(self):
        """Gets the m_is_read_only of this Encoding.  # noqa: E501


        :return: The m_is_read_only of this Encoding.  # noqa: E501
        :rtype: bool
        """
        return self._m_is_read_only

    @m_is_read_only.setter
    def m_is_read_only(self, m_is_read_only):
        """Sets the m_is_read_only of this Encoding.


        :param m_is_read_only: The m_is_read_only of this Encoding.  # noqa: E501
        :type: bool
        """

        self._m_is_read_only = m_is_read_only

    @property
    def encoder_fallback(self):
        """Gets the encoder_fallback of this Encoding.  # noqa: E501


        :return: The encoder_fallback of this Encoding.  # noqa: E501
        :rtype: EncoderFallback
        """
        return self._encoder_fallback

    @encoder_fallback.setter
    def encoder_fallback(self, encoder_fallback):
        """Sets the encoder_fallback of this Encoding.


        :param encoder_fallback: The encoder_fallback of this Encoding.  # noqa: E501
        :type: EncoderFallback
        """

        self._encoder_fallback = encoder_fallback

    @property
    def decoder_fallback(self):
        """Gets the decoder_fallback of this Encoding.  # noqa: E501


        :return: The decoder_fallback of this Encoding.  # noqa: E501
        :rtype: DecoderFallback
        """
        return self._decoder_fallback

    @decoder_fallback.setter
    def decoder_fallback(self, decoder_fallback):
        """Sets the decoder_fallback of this Encoding.


        :param decoder_fallback: The decoder_fallback of this Encoding.  # noqa: E501
        :type: DecoderFallback
        """

        self._decoder_fallback = decoder_fallback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Encoding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Encoding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
