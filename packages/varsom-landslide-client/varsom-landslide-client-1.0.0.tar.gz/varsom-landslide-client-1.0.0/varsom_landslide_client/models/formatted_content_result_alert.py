# coding: utf-8

"""
    Jordskredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FormattedContentResultAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_code': 'int',
        'content': 'Alert',
        'formatter': 'MediaTypeFormatter',
        'media_type': 'MediaTypeHeaderValue',
        'request': 'object'
    }

    attribute_map = {
        'status_code': 'StatusCode',
        'content': 'Content',
        'formatter': 'Formatter',
        'media_type': 'MediaType',
        'request': 'Request'
    }

    def __init__(self, status_code=None, content=None, formatter=None, media_type=None, request=None):  # noqa: E501
        """FormattedContentResultAlert - a model defined in Swagger"""  # noqa: E501
        self._status_code = None
        self._content = None
        self._formatter = None
        self._media_type = None
        self._request = None
        self.discriminator = None
        if status_code is not None:
            self.status_code = status_code
        if content is not None:
            self.content = content
        if formatter is not None:
            self.formatter = formatter
        if media_type is not None:
            self.media_type = media_type
        if request is not None:
            self.request = request

    @property
    def status_code(self):
        """Gets the status_code of this FormattedContentResultAlert.  # noqa: E501


        :return: The status_code of this FormattedContentResultAlert.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this FormattedContentResultAlert.


        :param status_code: The status_code of this FormattedContentResultAlert.  # noqa: E501
        :type: int
        """
        allowed_values = [100, 101, 200, 201, 202, 203, 204, 205, 206, 300, 301, 302, 303, 304, 305, 306, 307, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 500, 501, 502, 503, 504, 505]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    @property
    def content(self):
        """Gets the content of this FormattedContentResultAlert.  # noqa: E501


        :return: The content of this FormattedContentResultAlert.  # noqa: E501
        :rtype: Alert
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this FormattedContentResultAlert.


        :param content: The content of this FormattedContentResultAlert.  # noqa: E501
        :type: Alert
        """

        self._content = content

    @property
    def formatter(self):
        """Gets the formatter of this FormattedContentResultAlert.  # noqa: E501


        :return: The formatter of this FormattedContentResultAlert.  # noqa: E501
        :rtype: MediaTypeFormatter
        """
        return self._formatter

    @formatter.setter
    def formatter(self, formatter):
        """Sets the formatter of this FormattedContentResultAlert.


        :param formatter: The formatter of this FormattedContentResultAlert.  # noqa: E501
        :type: MediaTypeFormatter
        """

        self._formatter = formatter

    @property
    def media_type(self):
        """Gets the media_type of this FormattedContentResultAlert.  # noqa: E501


        :return: The media_type of this FormattedContentResultAlert.  # noqa: E501
        :rtype: MediaTypeHeaderValue
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this FormattedContentResultAlert.


        :param media_type: The media_type of this FormattedContentResultAlert.  # noqa: E501
        :type: MediaTypeHeaderValue
        """

        self._media_type = media_type

    @property
    def request(self):
        """Gets the request of this FormattedContentResultAlert.  # noqa: E501


        :return: The request of this FormattedContentResultAlert.  # noqa: E501
        :rtype: object
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this FormattedContentResultAlert.


        :param request: The request of this FormattedContentResultAlert.  # noqa: E501
        :type: object
        """

        self._request = request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormattedContentResultAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormattedContentResultAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
