# coding: utf-8

"""
    Music Database Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Album(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'band': 'str',
        'title': 'str',
        'style': 'str',
        'year': 'str',
        'country': 'str',
        'type': 'str',
        'score': 'str',
        'review': 'str',
        'copy': 'str'
    }

    attribute_map = {
        'id': 'id',
        'band': 'band',
        'title': 'title',
        'style': 'style',
        'year': 'year',
        'country': 'country',
        'type': 'type',
        'score': 'score',
        'review': 'review',
        'copy': 'copy'
    }

    def __init__(self, id=None, band=None, title=None, style=None, year=None, country=None, type=None, score=None, review=None, copy=None):  # noqa: E501
        """Album - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._band = None
        self._title = None
        self._style = None
        self._year = None
        self._country = None
        self._type = None
        self._score = None
        self._review = None
        self._copy = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if band is not None:
            self.band = band
        if title is not None:
            self.title = title
        if style is not None:
            self.style = style
        if year is not None:
            self.year = year
        if country is not None:
            self.country = country
        if type is not None:
            self.type = type
        if score is not None:
            self.score = score
        if review is not None:
            self.review = review
        if copy is not None:
            self.copy = copy

    @property
    def id(self):
        """Gets the id of this Album.  # noqa: E501


        :return: The id of this Album.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Album.


        :param id: The id of this Album.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def band(self):
        """Gets the band of this Album.  # noqa: E501


        :return: The band of this Album.  # noqa: E501
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band):
        """Sets the band of this Album.


        :param band: The band of this Album.  # noqa: E501
        :type: str
        """

        self._band = band

    @property
    def title(self):
        """Gets the title of this Album.  # noqa: E501


        :return: The title of this Album.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Album.


        :param title: The title of this Album.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def style(self):
        """Gets the style of this Album.  # noqa: E501


        :return: The style of this Album.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this Album.


        :param style: The style of this Album.  # noqa: E501
        :type: str
        """

        self._style = style

    @property
    def year(self):
        """Gets the year of this Album.  # noqa: E501


        :return: The year of this Album.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Album.


        :param year: The year of this Album.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def country(self):
        """Gets the country of this Album.  # noqa: E501


        :return: The country of this Album.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Album.


        :param country: The country of this Album.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def type(self):
        """Gets the type of this Album.  # noqa: E501


        :return: The type of this Album.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Album.


        :param type: The type of this Album.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def score(self):
        """Gets the score of this Album.  # noqa: E501


        :return: The score of this Album.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Album.


        :param score: The score of this Album.  # noqa: E501
        :type: str
        """

        self._score = score

    @property
    def review(self):
        """Gets the review of this Album.  # noqa: E501


        :return: The review of this Album.  # noqa: E501
        :rtype: str
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this Album.


        :param review: The review of this Album.  # noqa: E501
        :type: str
        """

        self._review = review

    @property
    def copy(self):
        """Gets the copy of this Album.  # noqa: E501


        :return: The copy of this Album.  # noqa: E501
        :rtype: str
        """
        return self._copy

    @copy.setter
    def copy(self, copy):
        """Sets the copy of this Album.


        :param copy: The copy of this Album.  # noqa: E501
        :type: str
        """

        self._copy = copy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Album, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Album):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
