# coding: utf-8

"""
    Music Database Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Song(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'disc_id': 'str',
        'title': 'str',
        'file_name': 'str',
        'track_number': 'str',
        'score': 'str',
        'type': 'str',
        'album': 'Album'
    }

    attribute_map = {
        'id': 'id',
        'disc_id': 'disc_id',
        'title': 'title',
        'file_name': 'file_name',
        'track_number': 'track_number',
        'score': 'score',
        'type': 'type',
        'album': 'album'
    }

    def __init__(self, id=None, disc_id=None, title=None, file_name=None, track_number=None, score=None, type=None, album=None):  # noqa: E501
        """Song - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._disc_id = None
        self._title = None
        self._file_name = None
        self._track_number = None
        self._score = None
        self._type = None
        self._album = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if disc_id is not None:
            self.disc_id = disc_id
        if title is not None:
            self.title = title
        if file_name is not None:
            self.file_name = file_name
        if track_number is not None:
            self.track_number = track_number
        if score is not None:
            self.score = score
        if type is not None:
            self.type = type
        if album is not None:
            self.album = album

    @property
    def id(self):
        """Gets the id of this Song.  # noqa: E501


        :return: The id of this Song.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Song.


        :param id: The id of this Song.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def disc_id(self):
        """Gets the disc_id of this Song.  # noqa: E501


        :return: The disc_id of this Song.  # noqa: E501
        :rtype: str
        """
        return self._disc_id

    @disc_id.setter
    def disc_id(self, disc_id):
        """Sets the disc_id of this Song.


        :param disc_id: The disc_id of this Song.  # noqa: E501
        :type: str
        """

        self._disc_id = disc_id

    @property
    def title(self):
        """Gets the title of this Song.  # noqa: E501


        :return: The title of this Song.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Song.


        :param title: The title of this Song.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def file_name(self):
        """Gets the file_name of this Song.  # noqa: E501


        :return: The file_name of this Song.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Song.


        :param file_name: The file_name of this Song.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def track_number(self):
        """Gets the track_number of this Song.  # noqa: E501


        :return: The track_number of this Song.  # noqa: E501
        :rtype: str
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this Song.


        :param track_number: The track_number of this Song.  # noqa: E501
        :type: str
        """

        self._track_number = track_number

    @property
    def score(self):
        """Gets the score of this Song.  # noqa: E501


        :return: The score of this Song.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Song.


        :param score: The score of this Song.  # noqa: E501
        :type: str
        """

        self._score = score

    @property
    def type(self):
        """Gets the type of this Song.  # noqa: E501


        :return: The type of this Song.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Song.


        :param type: The type of this Song.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def album(self):
        """Gets the album of this Song.  # noqa: E501


        :return: The album of this Song.  # noqa: E501
        :rtype: Album
        """
        return self._album

    @album.setter
    def album(self, album):
        """Sets the album of this Song.


        :param album: The album of this Song.  # noqa: E501
        :type: Album
        """

        self._album = album

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Song, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Song):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
