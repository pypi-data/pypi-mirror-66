# Code generated by protoc-gen-twirp_python v5.10.1, DO NOT EDIT.
# source: squareup.proto

try:
	import httplib
	from urllib2 import Request, HTTPError, urlopen
except ImportError:
	import http.client as httplib
	from urllib.request import Request, urlopen
	from urllib.error import HTTPError
import json
from google.protobuf import symbol_database as _symbol_database
import sys

_sym_db = _symbol_database.Default()


class TwirpException(httplib.HTTPException):
	def __init__(self, code, message, meta):
		self.code = code
		self.message = message
		self.meta = meta
		super(TwirpException, self).__init__(message)

	@classmethod
	def from_http_err(cls, err):
		try:
			jsonerr = json.load(err)
			code = jsonerr["code"]
			msg = jsonerr["msg"]
			meta = jsonerr.get("meta")
			if meta is None:
				meta = {}
		except:
			code = "internal"
			msg = "Error from intermediary with HTTP status code {} {}".format(
				err.code, httplib.responses[err.code],
			)
			meta = {}
		return cls(code, msg, meta)


class EstimateFrontendServiceClient(object):
	def __init__(self, server_address):
		"""Creates a new client for the EstimateFrontendService service.

        Args:
            server_address: The address of the server to send requests to, in
                the full protocol://host:port form.
        """
		if sys.version_info[0] > 2:
			self.__target = server_address
		else:
			self.__target = server_address.encode("ascii")
		self.__service_name = "squareup.estimate.frontend.EstimateFrontendService"

	def __make_request(self, body, full_method):
		req = Request(
			url=self.__target + "/services" + full_method,
			data=body,
			headers={
				"Content-Type": "application/x-protobuf",
				"Accept": "application/x-protobuf",
			},
		)
		try:
			resp = urlopen(req)
		except HTTPError as err:
			raise TwirpException.from_http_err(err)

		return resp.read()

	def get_estimate(self, get_estimate_request):
		serialize = _sym_db.GetSymbol(
			"squareup.estimate.frontend.GetEstimateRequest"
		).SerializeToString
		deserialize = _sym_db.GetSymbol(
			"squareup.estimate.frontend.GetEstimateResponse"
		).FromString

		full_method = "/{}/{}".format(self.__service_name, "GetEstimate")
		body = serialize(get_estimate_request)
		resp_str = self.__make_request(body=body, full_method=full_method)
		return deserialize(resp_str)

	def accept_estimate(self, accept_estimate_request):
		serialize = _sym_db.GetSymbol(
			"squareup.estimate.frontend.AcceptEstimateRequest"
		).SerializeToString
		deserialize = _sym_db.GetSymbol(
			"squareup.estimate.frontend.AcceptEstimateResponse"
		).FromString

		full_method = "/{}/{}".format(self.__service_name, "AcceptEstimate")
		body = serialize(accept_estimate_request)
		resp_str = self.__make_request(body=body, full_method=full_method)
		return deserialize(resp_str)


class InvoiceFrontendServiceClient(object):
	def __init__(self, server_address):
		"""Creates a new client for the InvoiceFrontendService service.

        Args:
            server_address: The address of the server to send requests to, in
                the full protocol://host:port form.
        """
		if sys.version_info[0] > 2:
			self.__target = server_address
		else:
			self.__target = server_address.encode("ascii")
		self.__service_name = "squareup.invoice.frontend.InvoiceFrontendService"

	def __make_request(self, body, full_method):
		req = Request(
			url=self.__target + "/services" + full_method,
			data=body,
			headers={
				"Content-Type": "application/x-protobuf",
				"Accept": "application/x-protobuf",
			},
		)
		try:
			resp = urlopen(req)
		except HTTPError as err:
			raise TwirpException.from_http_err(err)

		return resp.read()

	def get_invoice(self, get_invoice_request):
		serialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.GetInvoiceRequest"
		).SerializeToString
		deserialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.GetInvoiceResponse"
		).FromString

		full_method = "/{}/{}".format(self.__service_name, "GetInvoice")
		body = serialize(get_invoice_request)
		resp_str = self.__make_request(body=body, full_method=full_method)
		return deserialize(resp_str)

	def get_series_next_invoice(self, get_series_next_invoice_request):
		serialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.GetSeriesNextInvoiceRequest"
		).SerializeToString
		deserialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.GetInvoiceResponse"
		).FromString

		full_method = "/{}/{}".format(self.__service_name, "GetSeriesNextInvoice")
		body = serialize(get_series_next_invoice_request)
		resp_str = self.__make_request(body=body, full_method=full_method)
		return deserialize(resp_str)

	def pay_invoice(self, pay_invoice_request):
		serialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.PayInvoiceRequest"
		).SerializeToString
		deserialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.PayInvoiceResponse"
		).FromString

		full_method = "/{}/{}".format(self.__service_name, "PayInvoice")
		body = serialize(pay_invoice_request)
		resp_str = self.__make_request(body=body, full_method=full_method)
		return deserialize(resp_str)

	def log_view(self, log_view_request):
		serialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.LogViewRequest"
		).SerializeToString
		deserialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.LogViewResponse"
		).FromString

		full_method = "/{}/{}".format(self.__service_name, "LogView")
		body = serialize(log_view_request)
		resp_str = self.__make_request(body=body, full_method=full_method)
		return deserialize(resp_str)

	def get_referral_code_for_unit(self, get_referral_code_for_unit_request):
		serialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.GetReferralCodeForUnitRequest"
		).SerializeToString
		deserialize = _sym_db.GetSymbol(
			"squareup.invoice.frontend.GetReferralCodeForUnitResponse"
		).FromString

		full_method = "/{}/{}".format(self.__service_name, "GetReferralCodeForUnit")
		body = serialize(get_referral_code_for_unit_request)
		resp_str = self.__make_request(body=body, full_method=full_method)
		return deserialize(resp_str)
