import torch

from pau_torch.pade_activation_unit import PAU
import numpy as np

t = [[-6, -5, -4],
     [-3, -2, -1],
     [-0.5, 0, 0.5],
     [1, 2, 3],
     [4, 5, 6]]

inp = torch.from_numpy(np.array(t)).reshape(-1)


# computed by hand
expected_res = np.array(
    [-0.576677938400843, -0.3114005716898072, -0.1274597324278882, -0.037163186051086095, -0.020142444368761187,
     -0.007251981952840256, -0.00880489218246351, 0.0549891645, 0.49619580853257234, 1.0027483800319341,
     1.9998578382456675, 2.9928344329318093, 3.9125327788419635, 4.738585448062268, 5.4833009706811895])
print('Pade A pass test: ', np.all(np.isclose(PAU(version='A', cuda=False)(inp).detach().numpy(), expected_res)))

expected_res = np.array(
    [-0.576679060412505, -0.31140131490386275, -0.12746012263278983, -0.03716334138928356, -0.020142569916396656,
     -0.00725205547501205, -0.00880498853999141, 0.0549891645, 0.4961958085325724, 1.0027483800319341,
     1.9998578382456675, 2.9928344329318093, 3.9125327788419635, 4.738585448062268, 5.4833009706811895])
print('Pade B pass test: ', np.all(np.isclose(PAU(version='B', cuda=False)(inp).detach().numpy(), expected_res)))

expected_res = np.array(
    [-0.5784622767541475, -0.3131590907676678, -0.1288992025475961, -0.03811629967752744, -0.021587229684366608,
     -0.00962875014026907, -0.01962455557738011, 0.549891645, 1.1059061841771545, 1.3313717136448775,
     2.1432901248567915, 3.0695776439751525, 3.9567068294403374, 4.765333411987946, 5.50025648976474])
print('Pade C pass test: ', np.all(np.isclose(PAU(version='C', cuda=False)(inp).detach().numpy(), expected_res)))
