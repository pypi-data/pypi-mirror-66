import torch

from pau_torch.pade_activation_unit import PAU
import numpy as np

t = [[-6, -5, -4],
     [-3, -2, -1],
     [-0.5, 0, 0.5],
     [1, 2, 3],
     [4, 5, 6]]

inp = torch.from_numpy(np.array(t)).reshape(-1)


# computed by hand
expected_res = np.array(
    [-0.13355141377739513, -0.0619413757811037, -0.03646978148253958, -0.032655850878918466, -0.01944828952873663,
     -0.010106687605756857, -0.02000806000270244, 0.09163206842254161, 0.48498930771604903, 0.9998907488864881,
     2.0005508674368584, 2.997343831178446, 4.0035305482127255, 4.98806094915683, 5.926454739793884])
print('Pade A pass test: ', np.all(np.isclose(PAU(version='A', cuda=False)(inp).detach().numpy(), expected_res)))

expected_res = np.array(
    [-0.1335534260726669, -0.061942266528118566, -0.036470252999078044, -0.03265619211367341, -0.019448420790274566,
     -0.010106709442643294, -0.020008068455664735, 0.09163206842254161, 0.48498968020087785, 0.9998917307389753,
     2.0005524015430365, 2.9973454127699837, 4.003532018471603, 4.988062253138456, 5.926455867099212])
print('Pade B pass test: ', np.all(np.isclose(PAU(version='B', cuda=False)(inp).detach().numpy(), expected_res)))

expected_res = np.array(
    [-0.13560896177554654, -0.0635304197793349, -0.03814467483896467, -0.03565460387705061, -0.02381404596768598,
     -0.019051035688668942, -0.07533562984157928, 0.916320684225416, 1.8261152003712784, 1.8847829043648106,
     2.4496170351652955, 3.2725513632211634, 4.187339719909377, 5.115950575831143, 6.017669233625428])
print('Pade C pass test: ', np.all(np.isclose(PAU(version='C', cuda=False)(inp).detach().numpy(), expected_res)))
