{"version":3,"sources":["webpack:///./src/data/weather.ts","webpack:///./src/panels/lovelace/entity-rows/hui-weather-entity-row.ts"],"names":["weatherImages","clear-night","cloudy","fog","hail","lightning","lightning-rainy","partlycloudy","pouring","rainy","snowy","snowy-rainy","sunny","windy","windy-variant","weatherIcons","exceptional","getWeatherUnit","hass","measure","lengthUnit","config","unit_system","length","concat","customElement","property","entity","Error","this","_config","changedProps","hasConfigOrEntityChanged","html","_templateObject","stateObj","states","_templateObject2","localize","weatherRowConfig","Object","assign","icon","state","image","_templateObject3","UNAVAILABLE_STATES","includes","_templateObject4","attributes","temperature","_getSecondaryAttribute","_stateObj$attributes$","value","attribute","extrema","_getExtrema","forecast","undefined","precipitation","humidity","_stateObj$attributes$2","tempLow","tempHigh","_step","today","Date","getDate","_iterator","_createForOfIteratorHelper","s","n","done","datetime","templow","err","e","f","unit","css","_templateObject5","LitElement"],"mappings":"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","file":"chunk.a3a9f9128b14b9bceda6.js","sourcesContent":["import { HomeAssistant } from \"../types\";\n\nexport const weatherImages = {\n  \"clear-night\": \"/static/images/weather/night.png\",\n  cloudy: \"/static/images/weather/cloudy.png\",\n  fog: \"/static/images/weather/cloudy.png\",\n  hail: \"/static/images/weather/rainy.png\",\n  lightning: \"/static/images/weather/lightning.png\",\n  \"lightning-rainy\": \"/static/images/weather/lightning-rainy.png\",\n  partlycloudy: \"/static/images/weather/partly-cloudy.png\",\n  pouring: \"/static/images/weather/pouring.png\",\n  rainy: \"/static/images/weather/rainy.png\",\n  snowy: \"/static/images/weather/snowy.png\",\n  \"snowy-rainy\": \"/static/images/weather/rainy.png\",\n  sunny: \"/static/images/weather/sunny.png\",\n  windy: \"/static/images/weather/windy.png\",\n  \"windy-variant\": \"/static/images/weather/windy.png\",\n};\n\nexport const weatherIcons = {\n  exceptional: \"hass:alert-circle-outline\",\n};\n\nexport const cardinalDirections = [\n  \"N\",\n  \"NNE\",\n  \"NE\",\n  \"ENE\",\n  \"E\",\n  \"ESE\",\n  \"SE\",\n  \"SSE\",\n  \"S\",\n  \"SSW\",\n  \"SW\",\n  \"WSW\",\n  \"W\",\n  \"WNW\",\n  \"NW\",\n  \"NNW\",\n  \"N\",\n];\n\nconst getWindBearingText = (degree: string): string => {\n  const degreenum = parseInt(degree, 10);\n  if (isFinite(degreenum)) {\n    // eslint-disable-next-line no-bitwise\n    return cardinalDirections[(((degreenum + 11.25) / 22.5) | 0) % 16];\n  }\n  return degree;\n};\n\nexport const getWindBearing = (bearing: string): string => {\n  if (bearing != null) {\n    return getWindBearingText(bearing);\n  }\n  return \"\";\n};\n\nexport const getWeatherUnit = (\n  hass: HomeAssistant,\n  measure: string\n): string => {\n  const lengthUnit = hass.config.unit_system.length || \"\";\n  switch (measure) {\n    case \"pressure\":\n      return lengthUnit === \"km\" ? \"hPa\" : \"inHg\";\n    case \"wind_speed\":\n      return `${lengthUnit}/h`;\n    case \"length\":\n      return lengthUnit;\n    case \"precipitation\":\n      return lengthUnit === \"km\" ? \"mm\" : \"in\";\n    case \"humidity\":\n    case \"precipitation_probability\":\n      return \"%\";\n    default:\n      return hass.config.unit_system[measure] || \"\";\n  }\n};\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport \"../../../components/entity/state-badge\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport {\n  getWeatherUnit,\n  weatherIcons,\n  weatherImages,\n} from \"../../../data/weather\";\nimport { HomeAssistant, WeatherEntity } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-warning\";\nimport { LovelaceRow } from \"./types\";\n\n@customElement(\"hui-weather-entity-row\")\nclass HuiWeatherEntityRow extends LitElement implements LovelaceRow {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    if (!config?.entity) {\n      throw new Error(\"Invalid Configuration: 'entity' required\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    const weatherRowConfig = {\n      ...this._config,\n      icon: weatherIcons[stateObj.state],\n      image: weatherImages[stateObj.state],\n    };\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${weatherRowConfig}>\n        <div class=\"attributes\">\n          <div>\n            ${UNAVAILABLE_STATES.includes(stateObj.state)\n              ? this.hass.localize(`state.default.${stateObj.state}`) ||\n                stateObj.state\n              : html`\n                  ${stateObj.attributes.temperature}\n                  ${getWeatherUnit(this.hass, \"temperature\")}\n                `}\n          </div>\n          <div class=\"secondary\">\n            ${!UNAVAILABLE_STATES.includes(stateObj.state)\n              ? this._getSecondaryAttribute(stateObj)\n              : \"\"}\n          </div>\n        </div>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  private _getSecondaryAttribute(stateObj: WeatherEntity): string | undefined {\n    const extrema = this._getExtrema(stateObj);\n\n    if (extrema) {\n      return extrema;\n    }\n\n    let value: number;\n    let attribute: string;\n\n    if (\n      stateObj.attributes.forecast?.length &&\n      stateObj.attributes.forecast[0].precipitation !== undefined &&\n      stateObj.attributes.forecast[0].precipitation !== null\n    ) {\n      value = stateObj.attributes.forecast[0].precipitation!;\n      attribute = \"precipitation\";\n    } else if (\"humidity\" in stateObj.attributes) {\n      value = stateObj.attributes.humidity!;\n      attribute = \"humidity\";\n    } else {\n      return undefined;\n    }\n\n    return `\n      ${this.hass!.localize(\n        `ui.card.weather.attributes.${attribute}`\n      )} ${value} ${getWeatherUnit(this.hass!, attribute)}\n    `;\n  }\n\n  private _getExtrema(stateObj: WeatherEntity): string | undefined {\n    if (!stateObj.attributes.forecast?.length) {\n      return undefined;\n    }\n\n    let tempLow: number | undefined;\n    let tempHigh: number | undefined;\n    const today = new Date().getDate();\n\n    for (const forecast of stateObj.attributes.forecast!) {\n      if (new Date(forecast.datetime).getDate() !== today) {\n        break;\n      }\n      if (!tempHigh || forecast.temperature > tempHigh) {\n        tempHigh = forecast.temperature;\n      }\n      if (!tempLow || (forecast.templow && forecast.templow < tempLow)) {\n        tempLow = forecast.templow;\n      }\n      if (!forecast.templow && (!tempLow || forecast.temperature < tempLow)) {\n        tempLow = forecast.temperature;\n      }\n    }\n\n    if (!tempLow && !tempHigh) {\n      return undefined;\n    }\n\n    const unit = getWeatherUnit(this.hass!, \"temperature\");\n\n    return `\n      ${\n        tempHigh\n          ? `\n              ${this.hass!.localize(`ui.card.weather.high`)} ${tempHigh} ${unit}\n            `\n          : \"\"\n      }\n      ${tempLow && tempHigh ? \" / \" : \"\"}\n      ${\n        tempLow\n          ? `\n            ${this.hass!.localize(`ui.card.weather.low`)} ${tempLow} ${unit}\n          `\n          : \"\"\n      }\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .attributes {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        text-align: right;\n      }\n\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-entity-row\": HuiWeatherEntityRow;\n  }\n}\n"],"sourceRoot":""}