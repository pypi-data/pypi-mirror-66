{"version":3,"sources":["webpack:///./src/components/ha-dialog.ts","webpack:///./src/components/ha-icon-input.ts","webpack:///./src/panels/config/lovelace/dashboards/dialog-lovelace-dashboard-detail.ts"],"names":["MwcDialog","customElements","get","createCloseHeading","hass","title","html","localize","_decorate","customElement","_initialize","_MwcDialog","F","[object Object]","args","super","this","d","kind","static","key","value","style","css","_LitElement","decorators","property","attribute","type","Boolean","label","placeholder","_valueChanged","disabled","errorMessage","ev","detail","fireEvent","bubbles","composed","LitElement","DialogLovelaceDashboardDetail","async","params","_params","_error","undefined","_urlPath","urlPath","dashboard","_showInSidebar","show_in_sidebar","_icon","icon","_title","_requireAdmin","require_admin","updateComplete","_this$hass$userData","_this$hass$userData2","_this$_params$dashboa","_this$_params$dashboa2","defaultPanelUrlPath","defaultPanel","urlInvalid","test","titleInvalid","trim","_close","id","_titleChanged","userData","showAdvanced","_fillUrlPath","_iconChanged","_urlChanged","_showSidebarChanged","_requireAdminChanged","_deleteDashboard","_submitting","_toggleDefault","_updateDashboard","_this$hass$userData3","_this$hass$userData4","parts","toLowerCase","split","length","join","target","checked","_this$_params","setDefaultPanel","DEFAULT_PANEL","_this$_params2","_this$_params$dashboa3","values","updateDashboard","url_path","mode","createDashboard","err","message","removeDashboard","haStyleDialog"],"mappings":"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","file":"chunk.4e4ef30dc15ffbf6f1b5.js","sourcesContent":["import \"@material/mwc-dialog\";\nimport type { Dialog } from \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport { css, CSSResult, customElement, html } from \"lit-element\";\nimport type { Constructor, HomeAssistant } from \"../types\";\n\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <paper-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    icon=\"hass:close\"\n    dialogAction=\"close\"\n    class=\"close_button\"\n  ></paper-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .close_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-input\")\nexport class HaIconInput extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .value=${this.value}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        @value-changed=${this._valueChanged}\n        .disabled=${this.disabled}\n        auto-validate\n        .errorMessage=${this.errorMessage}\n        pattern=\"^\\\\S+:\\\\S+$\"\n      >\n        ${this.value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this.value || this.placeholder} slot=\"suffix\">\n              </ha-icon>\n            `\n          : \"\"}\n      </paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    this.value = ev.detail.value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: ev.detail.value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  static get styles() {\n    return css`\n      ha-icon {\n        position: relative;\n        bottom: 4px;\n      }\n    `;\n  }\n}\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-icon-input\";\nimport { HaSwitch } from \"../../../../components/ha-switch\";\nimport {\n  LovelaceDashboard,\n  LovelaceDashboardCreateParams,\n  LovelaceDashboardMutableParams,\n} from \"../../../../data/lovelace\";\nimport { DEFAULT_PANEL, setDefaultPanel } from \"../../../../data/panel\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceDashboardDetailsDialogParams } from \"./show-dialog-lovelace-dashboard-detail\";\n\n@customElement(\"dialog-lovelace-dashboard-detail\")\nexport class DialogLovelaceDashboardDetail extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _params?: LovelaceDashboardDetailsDialogParams;\n\n  @property() private _urlPath!: LovelaceDashboard[\"url_path\"];\n\n  @property() private _showInSidebar!: boolean;\n\n  @property() private _icon!: string;\n\n  @property() private _title!: string;\n\n  @property() private _requireAdmin!: LovelaceDashboard[\"require_admin\"];\n\n  @property() private _error?: string;\n\n  @property() private _submitting = false;\n\n  public async showDialog(\n    params: LovelaceDashboardDetailsDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._urlPath = this._params.urlPath || \"\";\n    if (this._params.dashboard) {\n      this._showInSidebar = !!this._params.dashboard.show_in_sidebar;\n      this._icon = this._params.dashboard.icon || \"\";\n      this._title = this._params.dashboard.title || \"\";\n      this._requireAdmin = this._params.dashboard.require_admin || false;\n    } else {\n      this._showInSidebar = true;\n      this._icon = \"\";\n      this._title = \"\";\n      this._requireAdmin = false;\n    }\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const defaultPanelUrlPath = this.hass.defaultPanel;\n    const urlInvalid =\n      this._params.urlPath !== \"lovelace\" &&\n      !/^[a-zA-Z0-9_-]+-[a-zA-Z0-9_-]+$/.test(this._urlPath);\n    const titleInvalid = !this._title.trim();\n    return html`\n      <ha-dialog\n        open\n        @closing=\"${this._close}\"\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.urlPath\n            ? this._title ||\n                this.hass.localize(\n                  \"ui.panel.config.lovelace.dashboards.detail.edit_dashboard\"\n                )\n            : this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.detail.new_dashboard\"\n              )\n        )}\n      >\n        <div>\n          ${this._params.dashboard && !this._params.dashboard.id\n            ? this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.cant_edit_yaml\"\n              )\n            : this._params.urlPath === \"lovelace\"\n            ? this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.cant_edit_default\"\n              )\n            : html`\n                ${this._error\n                  ? html` <div class=\"error\">${this._error}</div> `\n                  : \"\"}\n                <div class=\"form\">\n                  <paper-input\n                    .value=${this._title}\n                    @value-changed=${this._titleChanged}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.title\"\n                    )}\n                    @blur=${this.hass.userData?.showAdvanced\n                      ? this._fillUrlPath\n                      : undefined}\n                    .invalid=${titleInvalid}\n                    .errorMessage=${this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.title_required\"\n                    )}\n                    dialogInitialFocus\n                  ></paper-input>\n                  <ha-icon-input\n                    .value=${this._icon}\n                    @value-changed=${this._iconChanged}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.icon\"\n                    )}\n                  ></ha-icon-input>\n                  ${!this._params.dashboard && this.hass.userData?.showAdvanced\n                    ? html`\n                        <paper-input\n                          .value=${this._urlPath}\n                          @value-changed=${this._urlChanged}\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.lovelace.dashboards.detail.url\"\n                          )}\n                          .errorMessage=${this.hass.localize(\n                            \"ui.panel.config.lovelace.dashboards.detail.url_error_msg\"\n                          )}\n                          .invalid=${urlInvalid}\n                        ></paper-input>\n                      `\n                    : \"\"}\n                  <ha-switch\n                    .checked=${this._showInSidebar}\n                    @change=${this._showSidebarChanged}\n                    >${this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.show_sidebar\"\n                    )}\n                  </ha-switch>\n                  <ha-switch\n                    .checked=${this._requireAdmin}\n                    @change=${this._requireAdminChanged}\n                    >${this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.require_admin\"\n                    )}\n                  </ha-switch>\n                </div>\n              `}\n        </div>\n        ${this._params.urlPath\n          ? html`\n              ${this._params.dashboard?.id\n                ? html`\n                    <mwc-button\n                      slot=\"secondaryAction\"\n                      class=\"warning\"\n                      @click=${this._deleteDashboard}\n                      .disabled=${this._submitting}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.lovelace.dashboards.detail.delete\"\n                      )}\n                    </mwc-button>\n                  `\n                : \"\"}\n              <mwc-button\n                slot=\"secondaryAction\"\n                @click=${this._toggleDefault}\n                .disabled=${this._params.urlPath === \"lovelace\" &&\n                defaultPanelUrlPath === \"lovelace\"}\n              >\n                ${this._params.urlPath === defaultPanelUrlPath\n                  ? this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.remove_default\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.set_default\"\n                    )}\n              </mwc-button>\n            `\n          : \"\"}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=\"${this._updateDashboard}\"\n          .disabled=${urlInvalid || titleInvalid || this._submitting}\n        >\n          ${this._params.urlPath\n            ? this._params.dashboard?.id\n              ? this.hass.localize(\n                  \"ui.panel.config.lovelace.dashboards.detail.update\"\n                )\n              : this.hass.localize(\"ui.common.close\")\n            : this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.detail.create\"\n              )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _urlChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._urlPath = ev.detail.value;\n  }\n\n  private _iconChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _titleChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._title = ev.detail.value;\n    if (!this.hass.userData?.showAdvanced) {\n      this._fillUrlPath();\n    }\n  }\n\n  private _fillUrlPath() {\n    if ((this.hass.userData?.showAdvanced && this._urlPath) || !this._title) {\n      return;\n    }\n    const parts = this._title.toLowerCase().split(\" \");\n\n    this._urlPath =\n      parts.length === 1 ? `lovelace-${parts[0]}` : parts.join(\"_\");\n  }\n\n  private _showSidebarChanged(ev: Event) {\n    this._showInSidebar = (ev.target as HaSwitch).checked;\n  }\n\n  private _requireAdminChanged(ev: Event) {\n    this._requireAdmin = (ev.target as HaSwitch).checked;\n  }\n\n  private _toggleDefault() {\n    const urlPath = this._params?.urlPath;\n    if (!urlPath) {\n      return;\n    }\n    setDefaultPanel(\n      this,\n      urlPath === this.hass.defaultPanel ? DEFAULT_PANEL : urlPath\n    );\n  }\n\n  private async _updateDashboard() {\n    if (this._params?.urlPath && !this._params.dashboard?.id) {\n      this._close();\n    }\n    this._submitting = true;\n    try {\n      const values: Partial<LovelaceDashboardMutableParams> = {\n        require_admin: this._requireAdmin,\n        show_in_sidebar: this._showInSidebar,\n        icon: this._icon || undefined,\n        title: this._title,\n      };\n      if (this._params!.dashboard) {\n        await this._params!.updateDashboard(values);\n      } else {\n        (values as LovelaceDashboardCreateParams).url_path = this._urlPath.trim();\n        (values as LovelaceDashboardCreateParams).mode = \"storage\";\n        await this._params!.createDashboard(\n          values as LovelaceDashboardCreateParams\n        );\n      }\n      this._close();\n    } catch (err) {\n      this._error = err?.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteDashboard() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeDashboard()) {\n        this._close();\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _close(): void {\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-switch {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-lovelace-dashboard-detail\": DialogLovelaceDashboardDetail;\n  }\n}\n"],"sourceRoot":""}