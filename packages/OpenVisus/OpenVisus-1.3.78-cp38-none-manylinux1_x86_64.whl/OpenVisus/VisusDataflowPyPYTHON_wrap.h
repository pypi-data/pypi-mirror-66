/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_VisusDataflowPy_WRAP_H_
#define SWIG_VisusDataflowPy_WRAP_H_

#include <map>
#include <string>


class SwigDirector_NodeJob : public Visus::NodeJob, public Swig::Director {

public:
    SwigDirector_NodeJob(PyObject *self);
    virtual ~SwigDirector_NodeJob();
    virtual void runJob();
    virtual void abort();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class NodeJob doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[2];
#endif

};


class SwigDirector_Node : public Visus::Node, public Swig::Director {

public:
    SwigDirector_Node(PyObject *self);
    virtual ~SwigDirector_Node();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();
    virtual bool processInputSwigPublic() {
      return Visus::Node::processInput();
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class Node doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_NodeCreator : public Visus::NodeCreator, public Swig::Director {

public:
    SwigDirector_NodeCreator(PyObject *self);
    virtual ~SwigDirector_NodeCreator();
    virtual Visus::Node *createInstance();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class NodeCreator doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[1];
#endif

};


class SwigDirector_DataflowListener : public Visus::DataflowListener, public Swig::Director {

public:
    SwigDirector_DataflowListener(PyObject *self);
    virtual ~SwigDirector_DataflowListener();
    virtual void dataflowMessageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void dataflowBeingDestroyed();
    virtual void dataflowBeforeProcessInput(Visus::Node *node);
    virtual void dataflowAfterProcessInput(Visus::Node *node);
    virtual void dataflowSetName(Visus::Node *node, Visus::String old_value, Visus::String new_value);
    virtual void dataflowSetHidden(Visus::Node *node, bool old_value, bool new_value);
    virtual void dataflowAddNode(Visus::Node *node);
    virtual void dataflowRemoveNode(Visus::Node *node);
    virtual void dataflowMoveNode(Visus::Node *dst, Visus::Node *src, int index);
    virtual void dataflowSetSelection(Visus::Node *old_selection, Visus::Node *new_selection);
    virtual void dataflowConnectNodes(Visus::Node *from, Visus::String oport, Visus::String iport, Visus::Node *to);
    virtual void dataflowDisconnectNodes(Visus::Node *from, Visus::String oport, Visus::String iport, Visus::Node *to);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class DataflowListener doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[12];
#endif

};


#endif
