/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_VisusNodesPy_WRAP_H_
#define SWIG_VisusNodesPy_WRAP_H_

#include <map>
#include <string>


class SwigDirector_CpuPaletteNode : public Visus::CpuPaletteNode, public Swig::Director {

public:
    SwigDirector_CpuPaletteNode(PyObject *self, std::shared_ptr< Visus::TransferFunction > fn = std::shared_ptr< Visus::TransferFunction >());
    virtual ~SwigDirector_CpuPaletteNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class CpuPaletteNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_FieldNode : public Visus::FieldNode, public Swig::Director {

public:
    SwigDirector_FieldNode(PyObject *self);
    virtual ~SwigDirector_FieldNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();
    virtual bool processInputSwigPublic() {
      return Visus::Node::processInput();
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class FieldNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_ModelViewNode : public Visus::ModelViewNode, public Swig::Director {

public:
    SwigDirector_ModelViewNode(PyObject *self);
    virtual ~SwigDirector_ModelViewNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();
    virtual bool processInputSwigPublic() {
      return Visus::Node::processInput();
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class ModelViewNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_PaletteNode : public Visus::PaletteNode, public Swig::Director {

public:
    SwigDirector_PaletteNode(PyObject *self, Visus::String default_palette = "GrayOpaque");
    virtual ~SwigDirector_PaletteNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class PaletteNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_ScriptingNode : public Visus::ScriptingNode, public Swig::Director {

public:
    SwigDirector_ScriptingNode(PyObject *self);
    virtual ~SwigDirector_ScriptingNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class ScriptingNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_StatisticsNode : public Visus::StatisticsNode, public Swig::Director {

public:
    SwigDirector_StatisticsNode(PyObject *self);
    virtual ~SwigDirector_StatisticsNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class StatisticsNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_TimeNode : public Visus::TimeNode, public Swig::Director {

public:
    SwigDirector_TimeNode(PyObject *self, double current_time = 0.0, Visus::DatasetTimesteps const &timesteps = Visus::DatasetTimesteps());
    virtual ~SwigDirector_TimeNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();
    virtual bool processInputSwigPublic() {
      return Visus::Node::processInput();
    }

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class TimeNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_DatasetNode : public Visus::DatasetNode, public Swig::Director {

public:
    SwigDirector_DatasetNode(PyObject *self);
    virtual ~SwigDirector_DatasetNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class DatasetNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_QueryNode : public Visus::QueryNode, public Swig::Director {

public:
    SwigDirector_QueryNode(PyObject *self);
    virtual ~SwigDirector_QueryNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class QueryNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


class SwigDirector_KdQueryNode : public Visus::KdQueryNode, public Swig::Director {

public:
    SwigDirector_KdQueryNode(PyObject *self);
    virtual ~SwigDirector_KdQueryNode();
    virtual Visus::String getTypeName() const;
    virtual Visus::String getOsDependentTypeName() const;
    virtual Visus::Position getBounds();
    virtual void enterInDataflow();
    virtual void exitFromDataflow();
    virtual void addNodeJob(Visus::NodeJob *disown);
    virtual void abortProcessing();
    virtual void joinProcessing();
    virtual void messageHasBeenPublished(Visus::DataflowMessage msg);
    virtual void execute(Visus::Archive &ar);
    virtual void write(Visus::Archive &ar) const;
    virtual void read(Visus::Archive &ar);
    virtual bool processInput();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class KdQueryNode doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[13];
#endif

};


#endif
