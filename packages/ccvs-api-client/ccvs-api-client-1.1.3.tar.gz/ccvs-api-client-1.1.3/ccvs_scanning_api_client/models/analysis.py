"""
CCVS API.

Central Container Vulnerability Scanning  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import re  # noqa: F401

import six


class Analysis(object):
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'image': 'str',
        'result': 'str',
        'vendors': 'object',
        'vulnerabilities': 'object'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'image': 'image',
        'result': 'result',
        'vendors': 'vendors',
        'vulnerabilities': 'vulnerabilities'
    }

    def __init__(self, id=None, status=None, created_at=None, updated_at=None,
                 image=None, result=None, vendors=None, vulnerabilities=None):
        """Analysis - a model defined in Swagger"""

        self._id = None
        self._status = None
        self._created_at = None
        self._updated_at = None
        self._image = None
        self._result = None
        self._vendors = None
        self._vulnerabilities = None

        if id is not None:
            self.id = id
        self.type = type
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        self.image = image
        if result is not None:
            self.result = result
        if vendors is not None:
            self.vendors = vendors
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities

    @property
    def id(self):
        """
        Gets the id of this Analysis.

        :return: The id of this Analysis.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Analysis.

        :param id: The id of this Analysis.
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this Analysis.

        :return: The status of this Analysis.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Gets the status of this Analysis.

        :return: The status of this Analysis.
        :rtype: str
        """
        allowed_values = ['pending', 'started', 'finished', 'failed']
        if status not in allowed_values:
            raise ValueError(
                'Invalid value for `status` ({0}), must be one of {1}'
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self):
        """
        Gets the created_at of this Analysis.

        :return: The created_at of this Analysis.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Gets the created_at of this Analysis.

        :return: The created_at of this Analysis.
        :rtype: str
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Analysis.

        :return: The updated_at of this Analysis.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Gets the updated_at of this Analysis.

        :return: The updated_at of this Analysis.
        :rtype: str
        """

        self._updated_at = updated_at

    @property
    def image(self):
        """
        Gets the image of this Analysis.

        :return: The image of this Analysis.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Gets the image of this Analysis.

        :return: The image of this Analysis.
        :rtype: str
        """
        if image is None:
            raise ValueError('Invalid value for `image`, must not be `None`')

        self._image = image

    @property
    def result(self):
        """
        Gets the result of this Analysis.

        :return: The result of this Analysis.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Gets the result of this Analysis.

        :return: The result of this Analysis.
        :rtype: str
        """

        self._result = result

    @property
    def vendors(self):
        """
        Gets the vendors of this Analysis.

        :return: The vendors of this Analysis.
        :rtype: object
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """
        Gets the vendors of this Analysis.

        :return: The vendors of this Analysis.
        :rtype: object
        """

        self._vendors = vendors

    @property
    def vulnerabilities(self):
        """
        Gets the vulnerabilities of this Analysis.

        :return: The vulnerabilities of this Analysis.
        :rtype: object
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """
        Gets the vulnerabilities of this Analysis.

        :return: The vulnerabilities of this Analysis.
        :rtype: object
        """

        self._vulnerabilities = vulnerabilities

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, 'to_dict') else x,
                    value
                ))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], 'to_dict') else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Analysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Analysis):
            return False

        return self.__dict__ == other.__dict__

    @property
    def __dict__(self):
        """Returns a custom dict."""

        return self.to_dict()
