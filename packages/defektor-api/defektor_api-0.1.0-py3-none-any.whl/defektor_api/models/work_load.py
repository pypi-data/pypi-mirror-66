# coding: utf-8

"""
    defektor Controll API

    defektor controll aplication interface  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sob@dei.uc.pt
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from defektor_api.configuration import Configuration


class WorkLoad(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'image': 'DockerImage',
        'cmd': 'str',
        'env': 'list[str]',
        'replicas': 'int',
        'slaves': 'int',
        'duration': 'int'
    }

    attribute_map = {
        'image': 'image',
        'cmd': 'cmd',
        'env': 'env',
        'replicas': 'replicas',
        'slaves': 'slaves',
        'duration': 'duration'
    }

    def __init__(self, image=None, cmd=None, env=None, replicas=1, slaves=1, duration=120, local_vars_configuration=None):  # noqa: E501
        """WorkLoad - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._image = None
        self._cmd = None
        self._env = None
        self._replicas = None
        self._slaves = None
        self._duration = None
        self.discriminator = None

        self.image = image
        if cmd is not None:
            self.cmd = cmd
        if env is not None:
            self.env = env
        if replicas is not None:
            self.replicas = replicas
        if slaves is not None:
            self.slaves = slaves
        if duration is not None:
            self.duration = duration

    @property
    def image(self):
        """Gets the image of this WorkLoad.  # noqa: E501


        :return: The image of this WorkLoad.  # noqa: E501
        :rtype: DockerImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this WorkLoad.


        :param image: The image of this WorkLoad.  # noqa: E501
        :type: DockerImage
        """
        if self.local_vars_configuration.client_side_validation and image is None:  # noqa: E501
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def cmd(self):
        """Gets the cmd of this WorkLoad.  # noqa: E501


        :return: The cmd of this WorkLoad.  # noqa: E501
        :rtype: str
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this WorkLoad.


        :param cmd: The cmd of this WorkLoad.  # noqa: E501
        :type: str
        """

        self._cmd = cmd

    @property
    def env(self):
        """Gets the env of this WorkLoad.  # noqa: E501


        :return: The env of this WorkLoad.  # noqa: E501
        :rtype: list[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this WorkLoad.


        :param env: The env of this WorkLoad.  # noqa: E501
        :type: list[str]
        """

        self._env = env

    @property
    def replicas(self):
        """Gets the replicas of this WorkLoad.  # noqa: E501


        :return: The replicas of this WorkLoad.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this WorkLoad.


        :param replicas: The replicas of this WorkLoad.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def slaves(self):
        """Gets the slaves of this WorkLoad.  # noqa: E501


        :return: The slaves of this WorkLoad.  # noqa: E501
        :rtype: int
        """
        return self._slaves

    @slaves.setter
    def slaves(self, slaves):
        """Sets the slaves of this WorkLoad.


        :param slaves: The slaves of this WorkLoad.  # noqa: E501
        :type: int
        """

        self._slaves = slaves

    @property
    def duration(self):
        """Gets the duration of this WorkLoad.  # noqa: E501

        Duration of the workload in seconds. If the container terminates earlier it gets restarted.  # noqa: E501

        :return: The duration of this WorkLoad.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this WorkLoad.

        Duration of the workload in seconds. If the container terminates earlier it gets restarted.  # noqa: E501

        :param duration: The duration of this WorkLoad.  # noqa: E501
        :type: int
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkLoad):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkLoad):
            return True

        return self.to_dict() != other.to_dict()
