# coding: utf-8

"""
    defektor Controll API

    defektor controll aplication interface  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sob@dei.uc.pt
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from defektor_api.configuration import Configuration


class Injektion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ijk': 'str',
        'work_load': 'WorkLoad',
        'target': 'Target'
    }

    attribute_map = {
        'ijk': 'ijk',
        'work_load': 'workLoad',
        'target': 'target'
    }

    def __init__(self, ijk=None, work_load=None, target=None, local_vars_configuration=None):  # noqa: E501
        """Injektion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ijk = None
        self._work_load = None
        self._target = None
        self.discriminator = None

        self.ijk = ijk
        if work_load is not None:
            self.work_load = work_load
        self.target = target

    @property
    def ijk(self):
        """Gets the ijk of this Injektion.  # noqa: E501


        :return: The ijk of this Injektion.  # noqa: E501
        :rtype: str
        """
        return self._ijk

    @ijk.setter
    def ijk(self, ijk):
        """Sets the ijk of this Injektion.


        :param ijk: The ijk of this Injektion.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ijk is None:  # noqa: E501
            raise ValueError("Invalid value for `ijk`, must not be `None`")  # noqa: E501

        self._ijk = ijk

    @property
    def work_load(self):
        """Gets the work_load of this Injektion.  # noqa: E501


        :return: The work_load of this Injektion.  # noqa: E501
        :rtype: WorkLoad
        """
        return self._work_load

    @work_load.setter
    def work_load(self, work_load):
        """Sets the work_load of this Injektion.


        :param work_load: The work_load of this Injektion.  # noqa: E501
        :type: WorkLoad
        """

        self._work_load = work_load

    @property
    def target(self):
        """Gets the target of this Injektion.  # noqa: E501


        :return: The target of this Injektion.  # noqa: E501
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Injektion.


        :param target: The target of this Injektion.  # noqa: E501
        :type: Target
        """
        if self.local_vars_configuration.client_side_validation and target is None:  # noqa: E501
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Injektion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Injektion):
            return True

        return self.to_dict() != other.to_dict()
