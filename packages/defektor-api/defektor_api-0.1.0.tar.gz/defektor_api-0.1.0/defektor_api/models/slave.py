# coding: utf-8

"""
    defektor Controll API

    defektor controll aplication interface  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: sob@dei.uc.pt
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from defektor_api.configuration import Configuration


class Slave(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'address': 'str',
        'port': 'int',
        'credentials': 'SSHCredentials'
    }

    attribute_map = {
        'id': 'id',
        'address': 'address',
        'port': 'port',
        'credentials': 'credentials'
    }

    def __init__(self, id=None, address=None, port=22, credentials=None, local_vars_configuration=None):  # noqa: E501
        """Slave - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._address = None
        self._port = None
        self._credentials = None
        self.discriminator = None

        self.id = id
        self.address = address
        self.port = port
        self.credentials = credentials

    @property
    def id(self):
        """Gets the id of this Slave.  # noqa: E501


        :return: The id of this Slave.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Slave.


        :param id: The id of this Slave.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def address(self):
        """Gets the address of this Slave.  # noqa: E501


        :return: The address of this Slave.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Slave.


        :param address: The address of this Slave.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def port(self):
        """Gets the port of this Slave.  # noqa: E501


        :return: The port of this Slave.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Slave.


        :param port: The port of this Slave.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def credentials(self):
        """Gets the credentials of this Slave.  # noqa: E501


        :return: The credentials of this Slave.  # noqa: E501
        :rtype: SSHCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Slave.


        :param credentials: The credentials of this Slave.  # noqa: E501
        :type: SSHCredentials
        """
        if self.local_vars_configuration.client_side_validation and credentials is None:  # noqa: E501
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Slave):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Slave):
            return True

        return self.to_dict() != other.to_dict()
