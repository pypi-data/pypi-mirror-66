name: Release
on:
  release:
    types:
      - created
      - edited
jobs:
  build_test_deploy:
    name: Build, test and deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos]
        python-version: [3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install prerequisites
      env:
        FURY_AUTH: ${{ secrets.FURY_AUTH }}
      run: pip install --pre -r requirements.txt
    - name: Install dotnet SDK (Linux)
      if: runner.os == 'Linux'
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        sudo apt-add-repository https://packages.microsoft.com/ubuntu/18.04/prod
        sudo apt-get update
        sudo apt-get install dotnet-sdk-3.1
        echo "::add-path::~/.dotnet/tools"
    - name: Install dotnet SDK (MacOS)
      if: runner.os == 'macOS'
      run: |
        brew install mono-libgdiplus
        wget https://dot.net/v1/dotnet-install.sh
        chmod a+x dotnet-install.sh
        ./dotnet-install.sh --channel 3.1
    - name: Install iqsharp
      run: |
        dotnet tool install -g Microsoft.Quantum.IQSharp
        dotnet iqsharp install --user
    - name: Make sdist
      run:
        python setup.py sdist
    - name: Install from sdist
      run: for sdist in dist/*.tar.gz ; do pip install $sdist ; done
    - name: Run tests
      run: |
        cd tests
        pytest --doctest-modules --junitxml=${GITHUB_WORKSPACE}/junit/test-results-${{ runner.os }}-${{ matrix.python-version }}.xml
    - name: Upload test results
      # Run this step even when there are test failures
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}.xml
    - name: Deploy to Gemfury
      env:
        FURY_PUSH: ${{ secrets.FURY_PUSH }}
      run: for sdist in dist/*.tar.gz ; do curl -F package=@"$sdist" https://${FURY_PUSH}@push.fury.io/cqcl/ ; done
