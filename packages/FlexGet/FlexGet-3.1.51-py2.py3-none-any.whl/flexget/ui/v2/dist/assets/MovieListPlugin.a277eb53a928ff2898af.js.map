{"version":3,"sources":["webpack:///./src/plugins/lists/movies/types.ts","webpack:///./src/plugins/lists/movies/hooks.tsx","webpack:///./src/plugins/lists/movies/MovieList.tsx"],"names":["SortBy","MovieIds","movieToEntry","movie","entry","camelize","moviesListIds","reduce","obj","idName","idValue","movieName","title","movieYear","year","useMovieAPI","url","method","useFlexgetAPI","state","makeRequest","useCallback","resp","ok","data","Array","isArray","map","MovieListContainer","createPluginContainer","sortByOptions","useMemo","value","Added","label","Title","URL","addEntryProps","name","api","list","useGet","useAdd","Method","Post","useRemove","listId","Delete","query","entryId","useRemoveBulk","PendingList","Provider"],"mappings":"kGAAWA,EAMAC,E,kCALX,SAAWD,GACPA,EAAM,MAAY,QAClBA,EAAM,MAAY,QAClBA,EAAM,IAAU,eAHpB,CAIGA,IAAWA,EAAS,KAEvB,SAAWC,GACPA,EAAQ,MAAY,iBACpBA,EAAQ,KAAW,UACnBA,EAAQ,KAAW,UAHvB,CAIGA,IAAaA,EAAW,K,mzCCN3B,IAAMC,EAAe,SAACC,GAAD,kBACdA,EADc,CAEjBC,MAAOC,YAAQ,UAACF,EAAMG,qBAAP,aAAC,EAAqBC,QAAO,SAACC,EAAD,eACrCA,EADqC,OAAQC,OAAR,EAAgBC,YAGxD,CACAC,UAAWR,EAAMS,MACjBC,UAAWV,EAAMW,WAGzB,SAASC,EAAYC,EAAKC,GAAQ,QACDC,YAAcF,EAAKC,GADlB,GACvBE,EADuB,KAChBC,EADgB,KAW9B,MAAO,CAACD,EATQE,sBAAW,e,EAAA,G,EAAA,yBAAC,+HACLD,EAAW,WAAX,KADK,cAClBE,EADkB,QAEfC,KACLD,EAAKE,KAAOC,MAAMC,QAAQJ,EAAKE,MACzBF,EAAKE,KAAKG,IAAIzB,GACdA,EAAaoB,EAAKE,OALJ,kBAOjBF,GAPiB,0C,+KAAD,qDAQxB,CAACF,KAGD,IAAMQ,EAAqBC,aAAsB,WACpD,MAAO,CACHC,cAAeC,mBAAQ,iBAAM,CACzB,CACIC,MAAOhC,EAAOiC,MACdC,MAAO,cAEX,CACIF,MAAOhC,EAAOmC,MACdD,MAAO,SAEX,CACIF,MAAOhC,EAAOoC,IACdF,MAAO,UAEZ,IACHG,cAAeN,mBAAQ,iBAAM,CACzB,CACIG,MAAO,aACPI,KAAM,gBAEX,IACHC,IAAK,CACDC,KAAM,CACFC,OAAQ,kBAAMvB,YAAc,gBAC5BwB,OAAQ,kBAAMxB,YAAc,cAAeyB,IAAOC,OAClDC,UAAW,SAACC,GAAD,OAAY5B,YAAc,eAAD,OAAgB4B,GAAUH,IAAOI,UAEzE3C,MAAO,CACHqC,OAAQ,SAACK,EAAQE,GAAT,OAAmBjC,EAAY,eAAD,OAAgB+B,EAAhB,mBAAiCE,KACvEN,OAAQ,SAACI,GAAD,OAAY/B,EAAY,eAAD,OAAgB+B,EAAhB,WAAiCH,IAAOC,OACvEC,UAAW,SAACC,EAAQG,GAAT,OAAqB/B,YAAc,eAAD,OAAgB4B,EAAhB,mBAAiCG,GAAWN,IAAOI,SAChGG,cAAe,SAACJ,GAAD,OAAY5B,YAAc,eAAD,OAAgB4B,EAAhB,iBAAuCH,IAAOI,e,OCnDnFI,UALC,WAChB,OAAQ,YAACvB,EAAmBwB,SAApB,KACN,YAAC,IAAD,CAAaxC,MAAM","file":"MovieListPlugin.a277eb53a928ff2898af.js","sourcesContent":["export var SortBy;\n(function (SortBy) {\n    SortBy[\"Added\"] = \"added\";\n    SortBy[\"Title\"] = \"title\";\n    SortBy[\"URL\"] = \"original_url\";\n})(SortBy || (SortBy = {}));\nexport var MovieIds;\n(function (MovieIds) {\n    MovieIds[\"Trakt\"] = \"trakt_movie_id\";\n    MovieIds[\"TMDB\"] = \"tmdb_id\";\n    MovieIds[\"IMDB\"] = \"imdb_id\";\n})(MovieIds || (MovieIds = {}));\n","import { useMemo, useCallback } from 'react';\nimport { useFlexgetAPI } from 'core/api';\nimport { Method, camelize } from 'utils/fetch';\nimport { SortBy } from './types';\nimport { createPluginContainer } from '../base/hooks/api';\nconst movieToEntry = (movie) => ({\n    ...movie,\n    entry: camelize(movie.moviesListIds?.reduce((obj, { idName, idValue }) => ({\n        ...obj,\n        [idName]: idValue,\n    }), {\n        movieName: movie.title,\n        movieYear: movie.year,\n    })),\n});\nfunction useMovieAPI(url, method) {\n    const [state, makeRequest] = useFlexgetAPI(url, method);\n    const request = useCallback(async (...args) => {\n        const resp = await makeRequest(...args);\n        if (resp.ok) {\n            resp.data = Array.isArray(resp.data)\n                ? resp.data.map(movieToEntry)\n                : movieToEntry(resp.data);\n        }\n        return resp;\n    }, [makeRequest]);\n    return [state, request];\n}\nexport const MovieListContainer = createPluginContainer(() => {\n    return {\n        sortByOptions: useMemo(() => [\n            {\n                value: SortBy.Added,\n                label: 'Date Added',\n            },\n            {\n                value: SortBy.Title,\n                label: 'Title',\n            },\n            {\n                value: SortBy.URL,\n                label: 'URL',\n            },\n        ], []),\n        addEntryProps: useMemo(() => [\n            {\n                label: 'Movie Name',\n                name: 'movieName',\n            },\n        ], []),\n        api: {\n            list: {\n                useGet: () => useFlexgetAPI('/movie_list'),\n                useAdd: () => useFlexgetAPI('/movie_list', Method.Post),\n                useRemove: (listId) => useFlexgetAPI(`/movie_list/${listId}`, Method.Delete),\n            },\n            entry: {\n                useGet: (listId, query) => useMovieAPI(`/movie_list/${listId}/movies?${query}`),\n                useAdd: (listId) => useMovieAPI(`/movie_list/${listId}/movies`, Method.Post),\n                useRemove: (listId, entryId) => useFlexgetAPI(`/movie_list/${listId}/movies/${entryId}`, Method.Delete),\n                useRemoveBulk: (listId) => useFlexgetAPI(`/movie_list/${listId}/movies/batch`, Method.Delete),\n            },\n        },\n    };\n});\n","import React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport ManagedList from '../base';\nimport { MovieListContainer } from './hooks';\nconst PendingList = () => {\n    return (<MovieListContainer.Provider>\n      <ManagedList title=\"Movie List\"/>\n    </MovieListContainer.Provider>);\n};\nexport default hot(PendingList);\n"],"sourceRoot":""}