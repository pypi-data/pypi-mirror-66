# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _libcolgraph
else:
    import _libcolgraph

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libcolgraph.delete_SwigPyIterator

    def value(self):
        return _libcolgraph.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libcolgraph.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libcolgraph.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libcolgraph.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libcolgraph.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libcolgraph.SwigPyIterator_copy(self)

    def next(self):
        return _libcolgraph.SwigPyIterator_next(self)

    def __next__(self):
        return _libcolgraph.SwigPyIterator___next__(self)

    def previous(self):
        return _libcolgraph.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libcolgraph.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libcolgraph.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libcolgraph.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libcolgraph.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libcolgraph.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libcolgraph.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libcolgraph.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libcolgraph:
_libcolgraph.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _libcolgraph.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libcolgraph.IntVector___nonzero__(self)

    def __bool__(self):
        return _libcolgraph.IntVector___bool__(self)

    def __len__(self):
        return _libcolgraph.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libcolgraph.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libcolgraph.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libcolgraph.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libcolgraph.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libcolgraph.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libcolgraph.IntVector___setitem__(self, *args)

    def pop(self):
        return _libcolgraph.IntVector_pop(self)

    def append(self, x):
        return _libcolgraph.IntVector_append(self, x)

    def empty(self):
        return _libcolgraph.IntVector_empty(self)

    def size(self):
        return _libcolgraph.IntVector_size(self)

    def swap(self, v):
        return _libcolgraph.IntVector_swap(self, v)

    def begin(self):
        return _libcolgraph.IntVector_begin(self)

    def end(self):
        return _libcolgraph.IntVector_end(self)

    def rbegin(self):
        return _libcolgraph.IntVector_rbegin(self)

    def rend(self):
        return _libcolgraph.IntVector_rend(self)

    def clear(self):
        return _libcolgraph.IntVector_clear(self)

    def get_allocator(self):
        return _libcolgraph.IntVector_get_allocator(self)

    def pop_back(self):
        return _libcolgraph.IntVector_pop_back(self)

    def erase(self, *args):
        return _libcolgraph.IntVector_erase(self, *args)

    def __init__(self, *args):
        _libcolgraph.IntVector_swiginit(self, _libcolgraph.new_IntVector(*args))

    def push_back(self, x):
        return _libcolgraph.IntVector_push_back(self, x)

    def front(self):
        return _libcolgraph.IntVector_front(self)

    def back(self):
        return _libcolgraph.IntVector_back(self)

    def assign(self, n, x):
        return _libcolgraph.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libcolgraph.IntVector_resize(self, *args)

    def insert(self, *args):
        return _libcolgraph.IntVector_insert(self, *args)

    def reserve(self, n):
        return _libcolgraph.IntVector_reserve(self, n)

    def capacity(self):
        return _libcolgraph.IntVector_capacity(self)
    __swig_destroy__ = _libcolgraph.delete_IntVector

# Register IntVector in _libcolgraph:
_libcolgraph.IntVector_swigregister(IntVector)

class LongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _libcolgraph.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libcolgraph.LongVector___nonzero__(self)

    def __bool__(self):
        return _libcolgraph.LongVector___bool__(self)

    def __len__(self):
        return _libcolgraph.LongVector___len__(self)

    def __getslice__(self, i, j):
        return _libcolgraph.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libcolgraph.LongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libcolgraph.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libcolgraph.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libcolgraph.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libcolgraph.LongVector___setitem__(self, *args)

    def pop(self):
        return _libcolgraph.LongVector_pop(self)

    def append(self, x):
        return _libcolgraph.LongVector_append(self, x)

    def empty(self):
        return _libcolgraph.LongVector_empty(self)

    def size(self):
        return _libcolgraph.LongVector_size(self)

    def swap(self, v):
        return _libcolgraph.LongVector_swap(self, v)

    def begin(self):
        return _libcolgraph.LongVector_begin(self)

    def end(self):
        return _libcolgraph.LongVector_end(self)

    def rbegin(self):
        return _libcolgraph.LongVector_rbegin(self)

    def rend(self):
        return _libcolgraph.LongVector_rend(self)

    def clear(self):
        return _libcolgraph.LongVector_clear(self)

    def get_allocator(self):
        return _libcolgraph.LongVector_get_allocator(self)

    def pop_back(self):
        return _libcolgraph.LongVector_pop_back(self)

    def erase(self, *args):
        return _libcolgraph.LongVector_erase(self, *args)

    def __init__(self, *args):
        _libcolgraph.LongVector_swiginit(self, _libcolgraph.new_LongVector(*args))

    def push_back(self, x):
        return _libcolgraph.LongVector_push_back(self, x)

    def front(self):
        return _libcolgraph.LongVector_front(self)

    def back(self):
        return _libcolgraph.LongVector_back(self)

    def assign(self, n, x):
        return _libcolgraph.LongVector_assign(self, n, x)

    def resize(self, *args):
        return _libcolgraph.LongVector_resize(self, *args)

    def insert(self, *args):
        return _libcolgraph.LongVector_insert(self, *args)

    def reserve(self, n):
        return _libcolgraph.LongVector_reserve(self, n)

    def capacity(self):
        return _libcolgraph.LongVector_capacity(self)
    __swig_destroy__ = _libcolgraph.delete_LongVector

# Register LongVector in _libcolgraph:
_libcolgraph.LongVector_swigregister(LongVector)

class IntVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _libcolgraph.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libcolgraph.IntVectorVector___nonzero__(self)

    def __bool__(self):
        return _libcolgraph.IntVectorVector___bool__(self)

    def __len__(self):
        return _libcolgraph.IntVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _libcolgraph.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libcolgraph.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libcolgraph.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libcolgraph.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libcolgraph.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libcolgraph.IntVectorVector___setitem__(self, *args)

    def pop(self):
        return _libcolgraph.IntVectorVector_pop(self)

    def append(self, x):
        return _libcolgraph.IntVectorVector_append(self, x)

    def empty(self):
        return _libcolgraph.IntVectorVector_empty(self)

    def size(self):
        return _libcolgraph.IntVectorVector_size(self)

    def swap(self, v):
        return _libcolgraph.IntVectorVector_swap(self, v)

    def begin(self):
        return _libcolgraph.IntVectorVector_begin(self)

    def end(self):
        return _libcolgraph.IntVectorVector_end(self)

    def rbegin(self):
        return _libcolgraph.IntVectorVector_rbegin(self)

    def rend(self):
        return _libcolgraph.IntVectorVector_rend(self)

    def clear(self):
        return _libcolgraph.IntVectorVector_clear(self)

    def get_allocator(self):
        return _libcolgraph.IntVectorVector_get_allocator(self)

    def pop_back(self):
        return _libcolgraph.IntVectorVector_pop_back(self)

    def erase(self, *args):
        return _libcolgraph.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        _libcolgraph.IntVectorVector_swiginit(self, _libcolgraph.new_IntVectorVector(*args))

    def push_back(self, x):
        return _libcolgraph.IntVectorVector_push_back(self, x)

    def front(self):
        return _libcolgraph.IntVectorVector_front(self)

    def back(self):
        return _libcolgraph.IntVectorVector_back(self)

    def assign(self, n, x):
        return _libcolgraph.IntVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _libcolgraph.IntVectorVector_resize(self, *args)

    def insert(self, *args):
        return _libcolgraph.IntVectorVector_insert(self, *args)

    def reserve(self, n):
        return _libcolgraph.IntVectorVector_reserve(self, n)

    def capacity(self):
        return _libcolgraph.IntVectorVector_capacity(self)
    __swig_destroy__ = _libcolgraph.delete_IntVectorVector

# Register IntVectorVector in _libcolgraph:
_libcolgraph.IntVectorVector_swigregister(IntVectorVector)

class GBVIt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    it = property(_libcolgraph.GBVIt_it_get, _libcolgraph.GBVIt_it_set)
    len = property(_libcolgraph.GBVIt_len_get, _libcolgraph.GBVIt_len_set)

    def __init__(self, *args):
        _libcolgraph.GBVIt_swiginit(self, _libcolgraph.new_GBVIt(*args))
    __swig_destroy__ = _libcolgraph.delete_GBVIt

    def next(self):
        return _libcolgraph.GBVIt_next(self)

    def __next__(self):
        return _libcolgraph.GBVIt___next__(self)

    def hasnext(self):
        return _libcolgraph.GBVIt_hasnext(self)

    def __iter__(self):
        return _libcolgraph.GBVIt___iter__(self)

# Register GBVIt in _libcolgraph:
_libcolgraph.GBVIt_swigregister(GBVIt)

class GCVIt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    it = property(_libcolgraph.GCVIt_it_get, _libcolgraph.GCVIt_it_set)
    len = property(_libcolgraph.GCVIt_len_get, _libcolgraph.GCVIt_len_set)

    def __init__(self, *args):
        _libcolgraph.GCVIt_swiginit(self, _libcolgraph.new_GCVIt(*args))
    __swig_destroy__ = _libcolgraph.delete_GCVIt

    def next(self):
        return _libcolgraph.GCVIt_next(self)

    def __next__(self):
        return _libcolgraph.GCVIt___next__(self)

    def hasnext(self):
        return _libcolgraph.GCVIt_hasnext(self)

    def __iter__(self):
        return _libcolgraph.GCVIt___iter__(self)

# Register GCVIt in _libcolgraph:
_libcolgraph.GCVIt_swigregister(GCVIt)

class GMVIt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    it = property(_libcolgraph.GMVIt_it_get, _libcolgraph.GMVIt_it_set)
    len = property(_libcolgraph.GMVIt_len_get, _libcolgraph.GMVIt_len_set)

    def __init__(self, *args):
        _libcolgraph.GMVIt_swiginit(self, _libcolgraph.new_GMVIt(*args))
    __swig_destroy__ = _libcolgraph.delete_GMVIt

    def next(self):
        return _libcolgraph.GMVIt_next(self)

    def __next__(self):
        return _libcolgraph.GMVIt___next__(self)

    def hasnext(self):
        return _libcolgraph.GMVIt_hasnext(self)

    def __iter__(self):
        return _libcolgraph.GMVIt___iter__(self)

# Register GMVIt in _libcolgraph:
_libcolgraph.GMVIt_swigregister(GMVIt)

class BVNIt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libcolgraph.delete_BVNIt

    def next(self):
        return _libcolgraph.BVNIt_next(self)

    def __next__(self):
        return _libcolgraph.BVNIt___next__(self)

    def hasnext(self):
        return _libcolgraph.BVNIt_hasnext(self)

    def __iter__(self):
        return _libcolgraph.BVNIt___iter__(self)

# Register BVNIt in _libcolgraph:
_libcolgraph.BVNIt_swigregister(BVNIt)

class CVNIt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libcolgraph.delete_CVNIt

    def next(self):
        return _libcolgraph.CVNIt_next(self)

    def __next__(self):
        return _libcolgraph.CVNIt___next__(self)

    def hasnext(self):
        return _libcolgraph.CVNIt_hasnext(self)

    def __iter__(self):
        return _libcolgraph.CVNIt___iter__(self)

# Register CVNIt in _libcolgraph:
_libcolgraph.CVNIt_swigregister(CVNIt)

class MVNIt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libcolgraph.delete_MVNIt

    def next(self):
        return _libcolgraph.MVNIt_next(self)

    def __next__(self):
        return _libcolgraph.MVNIt___next__(self)

    def hasnext(self):
        return _libcolgraph.MVNIt_hasnext(self)

    def __iter__(self):
        return _libcolgraph.MVNIt___iter__(self)

# Register MVNIt in _libcolgraph:
_libcolgraph.MVNIt_swigregister(MVNIt)

class BGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    vertices = property(_libcolgraph.BGraph_vertices_get, _libcolgraph.BGraph_vertices_set)
    connected = property(_libcolgraph.BGraph_connected_get, _libcolgraph.BGraph_connected_set)
    biconnected = property(_libcolgraph.BGraph_biconnected_get, _libcolgraph.BGraph_biconnected_set)
    __swig_destroy__ = _libcolgraph.delete_BGraph

    def load_txt(self, path):
        return _libcolgraph.BGraph_load_txt(self, path)

    def save_txt(self):
        return _libcolgraph.BGraph_save_txt(self)

    def size(self):
        return _libcolgraph.BGraph_size(self)

    def is_connected(self):
        return _libcolgraph.BGraph_is_connected(self)

    def is_biconnected(self):
        return _libcolgraph.BGraph_is_biconnected(self)

    def add_vertex(self, name):
        return _libcolgraph.BGraph_add_vertex(self, name)

    def get_vertex(self, name):
        return _libcolgraph.BGraph_get_vertex(self, name)

    def get_some_vertex(self):
        return _libcolgraph.BGraph_get_some_vertex(self)

    def __iter__(self):
        return _libcolgraph.BGraph___iter__(self)

    def get_vertices(self):
        return _libcolgraph.BGraph_get_vertices(self)

    def tarjans(self):
        return _libcolgraph.BGraph_tarjans(self)

    def __str__(self):
        '''
        '''
        return '<Graph (size={}) of {} >'.format(len(self), type(self))

    def __repr__(self):
        return self.__str__()

    def __len__(self):
        '''
        proxy method that just calls this->size()
        '''
        return self.size()

    def pretty_print(self):
        '''
        '''
        print('INFO: pretty_printing', self, 'vertices followed by their '
                                             'neighbors')
        for v in sorted(self.get_vertices(), key=lambda v: v.get_name()):
            print('\t', v.get_name(), ':  ',
                  *[n for n in sorted(v.get_neighbors())])


# Register BGraph in _libcolgraph:
_libcolgraph.BGraph_swigregister(BGraph)

class CGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    vertices = property(_libcolgraph.CGraph_vertices_get, _libcolgraph.CGraph_vertices_set)
    connected = property(_libcolgraph.CGraph_connected_get, _libcolgraph.CGraph_connected_set)
    biconnected = property(_libcolgraph.CGraph_biconnected_get, _libcolgraph.CGraph_biconnected_set)
    __swig_destroy__ = _libcolgraph.delete_CGraph

    def load_txt(self, path):
        return _libcolgraph.CGraph_load_txt(self, path)

    def save_txt(self):
        return _libcolgraph.CGraph_save_txt(self)

    def size(self):
        return _libcolgraph.CGraph_size(self)

    def is_connected(self):
        return _libcolgraph.CGraph_is_connected(self)

    def is_biconnected(self):
        return _libcolgraph.CGraph_is_biconnected(self)

    def add_vertex(self, name):
        return _libcolgraph.CGraph_add_vertex(self, name)

    def get_vertex(self, name):
        return _libcolgraph.CGraph_get_vertex(self, name)

    def get_some_vertex(self):
        return _libcolgraph.CGraph_get_some_vertex(self)

    def __iter__(self):
        return _libcolgraph.CGraph___iter__(self)

    def get_vertices(self):
        return _libcolgraph.CGraph_get_vertices(self)

    def tarjans(self):
        return _libcolgraph.CGraph_tarjans(self)

    def __str__(self):
        '''
        '''
        return '<Graph (size={}) of {} >'.format(len(self), type(self))

    def __repr__(self):
        return self.__str__()

    def __len__(self):
        '''
        proxy method that just calls this->size()
        '''
        return self.size()

    def pretty_print(self):
        '''
        '''
        print('INFO: pretty_printing', self, 'vertices followed by their '
                                             'neighbors')
        for v in sorted(self.get_vertices(), key=lambda v: v.get_name()):
            print('\t', v.get_name(), ':  ',
                  *[n for n in sorted(v.get_neighbors())])


# Register CGraph in _libcolgraph:
_libcolgraph.CGraph_swigregister(CGraph)

class MGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    vertices = property(_libcolgraph.MGraph_vertices_get, _libcolgraph.MGraph_vertices_set)
    connected = property(_libcolgraph.MGraph_connected_get, _libcolgraph.MGraph_connected_set)
    biconnected = property(_libcolgraph.MGraph_biconnected_get, _libcolgraph.MGraph_biconnected_set)
    __swig_destroy__ = _libcolgraph.delete_MGraph

    def load_txt(self, path):
        return _libcolgraph.MGraph_load_txt(self, path)

    def save_txt(self):
        return _libcolgraph.MGraph_save_txt(self)

    def size(self):
        return _libcolgraph.MGraph_size(self)

    def is_connected(self):
        return _libcolgraph.MGraph_is_connected(self)

    def is_biconnected(self):
        return _libcolgraph.MGraph_is_biconnected(self)

    def add_vertex(self, name):
        return _libcolgraph.MGraph_add_vertex(self, name)

    def get_vertex(self, name):
        return _libcolgraph.MGraph_get_vertex(self, name)

    def get_some_vertex(self):
        return _libcolgraph.MGraph_get_some_vertex(self)

    def __iter__(self):
        return _libcolgraph.MGraph___iter__(self)

    def get_vertices(self):
        return _libcolgraph.MGraph_get_vertices(self)

    def tarjans(self):
        return _libcolgraph.MGraph_tarjans(self)

    def __str__(self):
        '''
        '''
        return '<Graph (size={}) of {} >'.format(len(self), type(self))

    def __repr__(self):
        return self.__str__()

    def __len__(self):
        '''
        proxy method that just calls this->size()
        '''
        return self.size()

    def pretty_print(self):
        '''
        '''
        print('INFO: pretty_printing', self, 'vertices followed by their '
                                             'neighbors')
        for v in sorted(self.get_vertices(), key=lambda v: v.get_name()):
            print('\t', v.get_name(), ':  ',
                  *[n for n in sorted(v.get_neighbors())])


# Register MGraph in _libcolgraph:
_libcolgraph.MGraph_swigregister(MGraph)

class BaseGraphVertexIterator(GBVIt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libcolgraph.BaseGraphVertexIterator_swiginit(self, _libcolgraph.new_BaseGraphVertexIterator(*args))
    __swig_destroy__ = _libcolgraph.delete_BaseGraphVertexIterator

# Register BaseGraphVertexIterator in _libcolgraph:
_libcolgraph.BaseGraphVertexIterator_swigregister(BaseGraphVertexIterator)

class ColoringGraphVertexIterator(GCVIt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libcolgraph.ColoringGraphVertexIterator_swiginit(self, _libcolgraph.new_ColoringGraphVertexIterator(*args))
    __swig_destroy__ = _libcolgraph.delete_ColoringGraphVertexIterator

# Register ColoringGraphVertexIterator in _libcolgraph:
_libcolgraph.ColoringGraphVertexIterator_swigregister(ColoringGraphVertexIterator)

class MetaGraphVertexIterator(GMVIt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libcolgraph.MetaGraphVertexIterator_swiginit(self, _libcolgraph.new_MetaGraphVertexIterator(*args))
    __swig_destroy__ = _libcolgraph.delete_MetaGraphVertexIterator

# Register MetaGraphVertexIterator in _libcolgraph:
_libcolgraph.MetaGraphVertexIterator_swigregister(MetaGraphVertexIterator)

class BaseGraph(BGraph):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _libcolgraph.BaseGraph_swiginit(self, _libcolgraph.new_BaseGraph())

    def load_txt(self, path):
        return _libcolgraph.BaseGraph_load_txt(self, path)

    def reset(self):
        return _libcolgraph.BaseGraph_reset(self)

    def add_vertex(self, name):
        return _libcolgraph.BaseGraph_add_vertex(self, name)

    def make_edge(self, a, b):
        return _libcolgraph.BaseGraph_make_edge(self, a, b)

    def is_valid_coloring(self, coloring, k):
        return _libcolgraph.BaseGraph_is_valid_coloring(self, coloring, k)

    def get_vertex_color(self, coloring, name, k):
        return _libcolgraph.BaseGraph_get_vertex_color(self, coloring, name, k)

    def build_coloring_graph(self, k):
        return _libcolgraph.BaseGraph_build_coloring_graph(self, k)

    def find_all_colorings(self, current, k, cg, coloring):
        return _libcolgraph.BaseGraph_find_all_colorings(self, current, k, cg, coloring)

    def load_next_coloring(self, current, k, coloring):
        return _libcolgraph.BaseGraph_load_next_coloring(self, current, k, coloring)

    def encode(self, coloring, k):
        return _libcolgraph.BaseGraph_encode(self, coloring, k)

    def __iter__(self):
        return _libcolgraph.BaseGraph___iter__(self)

    def get_vertices(self):
        return _libcolgraph.BaseGraph_get_vertices(self)

    def load_from_nx(self, g=None):
        '''
        method that accepts an instance of a networkx graph
        and loads that graph into this instance of BaseGraph
        '''
        import networkx as nx

        self.reset()  
        lookup = dict()
        for i, (v, adjdict) in enumerate(g.adjacency()):
            lookup[v] = i
            self.add_vertex(i)
        for i, (v, adjdict) in enumerate(g.adjacency()):
            for otherv in adjdict:
                self.make_edge(lookup[v], lookup[otherv])


    def generate_random(self, v:int, p:float):
        '''
        method that creates a random graph at the current BaseGraph
        instance using the Erdos-Reyni random graph model
            int v: how many vertices the graph should have
            float p: what probability to use while generating edges between
                pairs of vertices
        '''
        import networkx as nx

        assert 0. <= p <= 1., ValueError('invalid probabilities')
        assert 0 <= v, ValueError('bad number of vertices')

        g = nx.erdos_renyi_graph(v, p)
        self.load_from_nx(g) 

    __swig_destroy__ = _libcolgraph.delete_BaseGraph

# Register BaseGraph in _libcolgraph:
_libcolgraph.BaseGraph_swigregister(BaseGraph)

class ColoringGraph(CGraph):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    colors = property(_libcolgraph.ColoringGraph_colors_get)
    base = property(_libcolgraph.ColoringGraph_base_get, _libcolgraph.ColoringGraph_base_set)
    precompexp = property(_libcolgraph.ColoringGraph_precompexp_get, _libcolgraph.ColoringGraph_precompexp_set)

    def __init__(self, k, bg):
        _libcolgraph.ColoringGraph_swiginit(self, _libcolgraph.new_ColoringGraph(k, bg))

    def add_vertex(self, name):
        return _libcolgraph.ColoringGraph_add_vertex(self, name)

    def is_isomorphic(self, a, b):
        return _libcolgraph.ColoringGraph_is_isomorphic(self, a, b)

    def get_possible_colors(self, vertexgroup):
        return _libcolgraph.ColoringGraph_get_possible_colors(self, vertexgroup)

    def __iter__(self):
        return _libcolgraph.ColoringGraph___iter__(self)

    def get_vertices(self):
        return _libcolgraph.ColoringGraph_get_vertices(self)

    def tarjans(self):
        return _libcolgraph.ColoringGraph_tarjans(self)
    __swig_destroy__ = _libcolgraph.delete_ColoringGraph

# Register ColoringGraph in _libcolgraph:
_libcolgraph.ColoringGraph_swigregister(ColoringGraph)

class MetaGraph(MGraph):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    colors = property(_libcolgraph.MetaGraph_colors_get, _libcolgraph.MetaGraph_colors_set)
    base = property(_libcolgraph.MetaGraph_base_get, _libcolgraph.MetaGraph_base_set)
    cut_vertices = property(_libcolgraph.MetaGraph_cut_vertices_get, _libcolgraph.MetaGraph_cut_vertices_set)
    unique_cut_vertices = property(_libcolgraph.MetaGraph_unique_cut_vertices_get, _libcolgraph.MetaGraph_unique_cut_vertices_set)
    mothership_cut_vertices = property(_libcolgraph.MetaGraph_mothership_cut_vertices_get, _libcolgraph.MetaGraph_mothership_cut_vertices_set)

    def __init__(self):
        _libcolgraph.MetaGraph_swiginit(self, _libcolgraph.new_MetaGraph())

    def add_vertex(self, *args):
        return _libcolgraph.MetaGraph_add_vertex(self, *args)

    def remove_vertex(self, m):
        return _libcolgraph.MetaGraph_remove_vertex(self, m)

    def __iter__(self):
        return _libcolgraph.MetaGraph___iter__(self)

    def get_vertices(self):
        return _libcolgraph.MetaGraph_get_vertices(self)

    def get_cut_vertices(self):
        return _libcolgraph.MetaGraph_get_cut_vertices(self)

    def get_mothership_cut_vertices(self):
        return _libcolgraph.MetaGraph_get_mothership_cut_vertices(self)

    def _DFS_and_add(self, cg, itercg, name, mothership):
        return _libcolgraph.MetaGraph__DFS_and_add(self, cg, itercg, name, mothership)

    def identify_mothership(self):
        return _libcolgraph.MetaGraph_identify_mothership(self)

    def rebuild_partial_graph(self):
        return _libcolgraph.MetaGraph_rebuild_partial_graph(self)
    __swig_destroy__ = _libcolgraph.delete_MetaGraph

# Register MetaGraph in _libcolgraph:
_libcolgraph.MetaGraph_swigregister(MetaGraph)

class BaseVertexNeighborIterator(BVNIt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    it = property(_libcolgraph.BaseVertexNeighborIterator_it_get, _libcolgraph.BaseVertexNeighborIterator_it_set)
    len = property(_libcolgraph.BaseVertexNeighborIterator_len_get, _libcolgraph.BaseVertexNeighborIterator_len_set)

    def __init__(self, *args):
        _libcolgraph.BaseVertexNeighborIterator_swiginit(self, _libcolgraph.new_BaseVertexNeighborIterator(*args))

    def next(self):
        return _libcolgraph.BaseVertexNeighborIterator_next(self)

    def hasnext(self):
        return _libcolgraph.BaseVertexNeighborIterator_hasnext(self)
    __swig_destroy__ = _libcolgraph.delete_BaseVertexNeighborIterator

# Register BaseVertexNeighborIterator in _libcolgraph:
_libcolgraph.BaseVertexNeighborIterator_swigregister(BaseVertexNeighborIterator)

class ColoringVertexNeighborIterator(CVNIt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = property(_libcolgraph.ColoringVertexNeighborIterator_name_get, _libcolgraph.ColoringVertexNeighborIterator_name_set)
    colors = property(_libcolgraph.ColoringVertexNeighborIterator_colors_get, _libcolgraph.ColoringVertexNeighborIterator_colors_set)
    graph = property(_libcolgraph.ColoringVertexNeighborIterator_graph_get, _libcolgraph.ColoringVertexNeighborIterator_graph_set)
    outerpos = property(_libcolgraph.ColoringVertexNeighborIterator_outerpos_get, _libcolgraph.ColoringVertexNeighborIterator_outerpos_set)
    positionctr = property(_libcolgraph.ColoringVertexNeighborIterator_positionctr_get, _libcolgraph.ColoringVertexNeighborIterator_positionctr_set)
    colorctr = property(_libcolgraph.ColoringVertexNeighborIterator_colorctr_get, _libcolgraph.ColoringVertexNeighborIterator_colorctr_set)

    def __init__(self, *args):
        _libcolgraph.ColoringVertexNeighborIterator_swiginit(self, _libcolgraph.new_ColoringVertexNeighborIterator(*args))

    def next(self):
        return _libcolgraph.ColoringVertexNeighborIterator_next(self)

    def hasnext(self):
        return _libcolgraph.ColoringVertexNeighborIterator_hasnext(self)
    __swig_destroy__ = _libcolgraph.delete_ColoringVertexNeighborIterator

# Register ColoringVertexNeighborIterator in _libcolgraph:
_libcolgraph.ColoringVertexNeighborIterator_swigregister(ColoringVertexNeighborIterator)

class MetaVertexNeighborIterator(MVNIt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    it = property(_libcolgraph.MetaVertexNeighborIterator_it_get, _libcolgraph.MetaVertexNeighborIterator_it_set)
    len = property(_libcolgraph.MetaVertexNeighborIterator_len_get, _libcolgraph.MetaVertexNeighborIterator_len_set)

    def __init__(self, *args):
        _libcolgraph.MetaVertexNeighborIterator_swiginit(self, _libcolgraph.new_MetaVertexNeighborIterator(*args))

    def next(self):
        return _libcolgraph.MetaVertexNeighborIterator_next(self)

    def hasnext(self):
        return _libcolgraph.MetaVertexNeighborIterator_hasnext(self)
    __swig_destroy__ = _libcolgraph.delete_MetaVertexNeighborIterator

# Register MetaVertexNeighborIterator in _libcolgraph:
_libcolgraph.MetaVertexNeighborIterator_swigregister(MetaVertexNeighborIterator)

class MetaGraphCutVertexIterator(MetaVertexNeighborIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libcolgraph.MetaGraphCutVertexIterator_swiginit(self, _libcolgraph.new_MetaGraphCutVertexIterator(*args))
    __swig_destroy__ = _libcolgraph.delete_MetaGraphCutVertexIterator

# Register MetaGraphCutVertexIterator in _libcolgraph:
_libcolgraph.MetaGraphCutVertexIterator_swigregister(MetaGraphCutVertexIterator)

class MetaVertexStoredVerticesIterator(MetaVertexNeighborIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, it_, len_):
        _libcolgraph.MetaVertexStoredVerticesIterator_swiginit(self, _libcolgraph.new_MetaVertexStoredVerticesIterator(it_, len_))
    __swig_destroy__ = _libcolgraph.delete_MetaVertexStoredVerticesIterator

# Register MetaVertexStoredVerticesIterator in _libcolgraph:
_libcolgraph.MetaVertexStoredVerticesIterator_swigregister(MetaVertexStoredVerticesIterator)

class Vertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    name = property(_libcolgraph.Vertex_name_get, _libcolgraph.Vertex_name_set)
    depth = property(_libcolgraph.Vertex_depth_get, _libcolgraph.Vertex_depth_set)
    lowpoint = property(_libcolgraph.Vertex_lowpoint_get, _libcolgraph.Vertex_lowpoint_set)
    parent = property(_libcolgraph.Vertex_parent_get, _libcolgraph.Vertex_parent_set)
    __swig_destroy__ = _libcolgraph.delete_Vertex

    def __eq__(self, other):
        return _libcolgraph.Vertex___eq__(self, other)

    def size(self):
        return _libcolgraph.Vertex_size(self)

    def get_next_neighbor(self):
        return _libcolgraph.Vertex_get_next_neighbor(self)

    def reset_neighbor_track(self):
        return _libcolgraph.Vertex_reset_neighbor_track(self)

    def has_next_neighbor(self):
        return _libcolgraph.Vertex_has_next_neighbor(self)

    def get_name(self):
        return _libcolgraph.Vertex_get_name(self)

    def __str__(self):
        '''
        '''
        return '<Vertex [{}, size:{}] of {} >'.format(self.get_name(),
                                                 self.size(), type(self))

    def __repr__(self):
        return self.__str__()

    def __len__(self):
        '''
        proxy method that just calls this->size()
        '''
        return self.size()


# Register Vertex in _libcolgraph:
_libcolgraph.Vertex_swigregister(Vertex)

class BaseVertex(Vertex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    neighbors = property(_libcolgraph.BaseVertex_neighbors_get, _libcolgraph.BaseVertex_neighbors_set)
    nt = property(_libcolgraph.BaseVertex_nt_get, _libcolgraph.BaseVertex_nt_set)

    def __init__(self, *args):
        _libcolgraph.BaseVertex_swiginit(self, _libcolgraph.new_BaseVertex(*args))

    def add_neighbor(self, other):
        return _libcolgraph.BaseVertex_add_neighbor(self, other)

    def get_next_neighbor(self):
        return _libcolgraph.BaseVertex_get_next_neighbor(self)

    def reset_neighbor_track(self):
        return _libcolgraph.BaseVertex_reset_neighbor_track(self)

    def has_next_neighbor(self):
        return _libcolgraph.BaseVertex_has_next_neighbor(self)

    def __iter__(self):
        return _libcolgraph.BaseVertex___iter__(self)

    def get_neighbors(self):
        return _libcolgraph.BaseVertex_get_neighbors(self)
    __swig_destroy__ = _libcolgraph.delete_BaseVertex

# Register BaseVertex in _libcolgraph:
_libcolgraph.BaseVertex_swigregister(BaseVertex)

class ColoringVertex(Vertex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    colors = property(_libcolgraph.ColoringVertex_colors_get)
    graph = property(_libcolgraph.ColoringVertex_graph_get, _libcolgraph.ColoringVertex_graph_set)
    nt = property(_libcolgraph.ColoringVertex_nt_get, _libcolgraph.ColoringVertex_nt_set)

    def __init__(self, name_, k, graph_):
        _libcolgraph.ColoringVertex_swiginit(self, _libcolgraph.new_ColoringVertex(name_, k, graph_))

    def get_next_neighbor(self):
        return _libcolgraph.ColoringVertex_get_next_neighbor(self)

    def reset_neighbor_track(self):
        return _libcolgraph.ColoringVertex_reset_neighbor_track(self)

    def has_next_neighbor(self):
        return _libcolgraph.ColoringVertex_has_next_neighbor(self)

    def __iter__(self):
        return _libcolgraph.ColoringVertex___iter__(self)

    def get_neighbors(self):
        return _libcolgraph.ColoringVertex_get_neighbors(self)
    __swig_destroy__ = _libcolgraph.delete_ColoringVertex

# Register ColoringVertex in _libcolgraph:
_libcolgraph.ColoringVertex_swigregister(ColoringVertex)

class MetaVertex(Vertex):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    neighbors = property(_libcolgraph.MetaVertex_neighbors_get, _libcolgraph.MetaVertex_neighbors_set)
    vertices = property(_libcolgraph.MetaVertex_vertices_get, _libcolgraph.MetaVertex_vertices_set)
    nt = property(_libcolgraph.MetaVertex_nt_get, _libcolgraph.MetaVertex_nt_set)
    identity = property(_libcolgraph.MetaVertex_identity_get, _libcolgraph.MetaVertex_identity_set)

    def __init__(self, name_):
        _libcolgraph.MetaVertex_swiginit(self, _libcolgraph.new_MetaVertex(name_))
    __swig_destroy__ = _libcolgraph.delete_MetaVertex

    def size(self):
        return _libcolgraph.MetaVertex_size(self)

    def add_neighbor(self, other):
        return _libcolgraph.MetaVertex_add_neighbor(self, other)

    def connect(self, v):
        return _libcolgraph.MetaVertex_connect(self, v)

    def disconnect(self, v):
        return _libcolgraph.MetaVertex_disconnect(self, v)

    def get_next_neighbor(self):
        return _libcolgraph.MetaVertex_get_next_neighbor(self)

    def reset_neighbor_track(self):
        return _libcolgraph.MetaVertex_reset_neighbor_track(self)

    def has_next_neighbor(self):
        return _libcolgraph.MetaVertex_has_next_neighbor(self)

    def __iter__(self):
        return _libcolgraph.MetaVertex___iter__(self)

    def get_neighbors(self):
        return _libcolgraph.MetaVertex_get_neighbors(self)

    def get_vertices(self):
        return _libcolgraph.MetaVertex_get_vertices(self)

# Register MetaVertex in _libcolgraph:
_libcolgraph.MetaVertex_swigregister(MetaVertex)



