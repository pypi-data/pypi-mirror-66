# coding: utf-8

"""
    SnÃ¸skredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v5.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from varsom_avalanche_client.api_client import ApiClient


class AvalancheWarningByCoordinatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def avalanche_warning_by_coordinates_detail(self, x, y, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """avalanche_warning_by_coordinates_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.avalanche_warning_by_coordinates_detail(x, y, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float x: (required)
        :param float y: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[AvalancheWarningDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.avalanche_warning_by_coordinates_detail_with_http_info(x, y, langkey, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.avalanche_warning_by_coordinates_detail_with_http_info(x, y, langkey, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def avalanche_warning_by_coordinates_detail_with_http_info(self, x, y, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """avalanche_warning_by_coordinates_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.avalanche_warning_by_coordinates_detail_with_http_info(x, y, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float x: (required)
        :param float y: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[AvalancheWarningDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x', 'y', 'langkey', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method avalanche_warning_by_coordinates_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x' is set
        if ('x' not in params or
                params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `avalanche_warning_by_coordinates_detail`")  # noqa: E501
        # verify the required parameter 'y' is set
        if ('y' not in params or
                params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `avalanche_warning_by_coordinates_detail`")  # noqa: E501
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `avalanche_warning_by_coordinates_detail`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `avalanche_warning_by_coordinates_detail`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `avalanche_warning_by_coordinates_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'x' in params:
            path_params['x'] = params['x']  # noqa: E501
        if 'y' in params:
            path_params['y'] = params['y']  # noqa: E501
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/AvalancheWarningByCoordinates/Detail/{x}/{y}/{langkey}/{startdate}/{enddate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AvalancheWarningDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def avalanche_warning_by_coordinates_obs(self, x, y, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """avalanche_warning_by_coordinates_obs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.avalanche_warning_by_coordinates_obs(x, y, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float x: (required)
        :param float y: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[ObsWarning]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.avalanche_warning_by_coordinates_obs_with_http_info(x, y, langkey, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.avalanche_warning_by_coordinates_obs_with_http_info(x, y, langkey, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def avalanche_warning_by_coordinates_obs_with_http_info(self, x, y, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """avalanche_warning_by_coordinates_obs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.avalanche_warning_by_coordinates_obs_with_http_info(x, y, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float x: (required)
        :param float y: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[ObsWarning]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x', 'y', 'langkey', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method avalanche_warning_by_coordinates_obs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x' is set
        if ('x' not in params or
                params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `avalanche_warning_by_coordinates_obs`")  # noqa: E501
        # verify the required parameter 'y' is set
        if ('y' not in params or
                params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `avalanche_warning_by_coordinates_obs`")  # noqa: E501
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `avalanche_warning_by_coordinates_obs`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `avalanche_warning_by_coordinates_obs`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `avalanche_warning_by_coordinates_obs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'x' in params:
            path_params['x'] = params['x']  # noqa: E501
        if 'y' in params:
            path_params['y'] = params['y']  # noqa: E501
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/AvalancheWarningByCoordinates/Obs/{x}/{y}/{langkey}/{startdate}/{enddate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ObsWarning]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def avalanche_warning_by_coordinates_simple(self, x, y, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """avalanche_warning_by_coordinates_simple  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.avalanche_warning_by_coordinates_simple(x, y, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float x: (required)
        :param float y: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[AvalancheWarningSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.avalanche_warning_by_coordinates_simple_with_http_info(x, y, langkey, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.avalanche_warning_by_coordinates_simple_with_http_info(x, y, langkey, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def avalanche_warning_by_coordinates_simple_with_http_info(self, x, y, langkey, startdate, enddate, **kwargs):  # noqa: E501
        """avalanche_warning_by_coordinates_simple  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.avalanche_warning_by_coordinates_simple_with_http_info(x, y, langkey, startdate, enddate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float x: (required)
        :param float y: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :return: list[AvalancheWarningSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x', 'y', 'langkey', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method avalanche_warning_by_coordinates_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x' is set
        if ('x' not in params or
                params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `avalanche_warning_by_coordinates_simple`")  # noqa: E501
        # verify the required parameter 'y' is set
        if ('y' not in params or
                params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `avalanche_warning_by_coordinates_simple`")  # noqa: E501
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `avalanche_warning_by_coordinates_simple`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `avalanche_warning_by_coordinates_simple`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `avalanche_warning_by_coordinates_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'x' in params:
            path_params['x'] = params['x']  # noqa: E501
        if 'y' in params:
            path_params['y'] = params['y']  # noqa: E501
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/AvalancheWarningByCoordinates/Simple/{x}/{y}/{langkey}/{startdate}/{enddate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AvalancheWarningSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
