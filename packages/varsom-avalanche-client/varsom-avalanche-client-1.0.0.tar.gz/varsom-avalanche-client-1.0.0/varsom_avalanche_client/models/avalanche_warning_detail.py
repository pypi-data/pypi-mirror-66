# coding: utf-8

"""
    Sn√∏skredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v5.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AvalancheWarningDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'county_list': 'list[County]',
        'municipality_list': 'list[Municipality]',
        'previous_warning_reg_id': 'int',
        'danger_level_name': 'str',
        'utm_zone': 'int',
        'utm_east': 'int',
        'utm_north': 'int',
        'author': 'str',
        'avalanche_danger': 'str',
        'emergency_warning': 'str',
        'snow_surface': 'str',
        'current_weaklayers': 'str',
        'latest_avalanche_activity': 'str',
        'latest_observations': 'str',
        'mountain_weather': 'MountainWeather',
        'avalanche_problems': 'list[AvalancheProblem]',
        'avalanche_advices': 'list[Advice]',
        'reg_id': 'int',
        'region_id': 'int',
        'region_name': 'str',
        'region_type_id': 'int',
        'region_type_name': 'str',
        'danger_level': 'str',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'next_warning_time': 'datetime',
        'publish_time': 'datetime',
        'main_text': 'str',
        'lang_key': 'int'
    }

    attribute_map = {
        'county_list': 'CountyList',
        'municipality_list': 'MunicipalityList',
        'previous_warning_reg_id': 'PreviousWarningRegId',
        'danger_level_name': 'DangerLevelName',
        'utm_zone': 'UtmZone',
        'utm_east': 'UtmEast',
        'utm_north': 'UtmNorth',
        'author': 'Author',
        'avalanche_danger': 'AvalancheDanger',
        'emergency_warning': 'EmergencyWarning',
        'snow_surface': 'SnowSurface',
        'current_weaklayers': 'CurrentWeaklayers',
        'latest_avalanche_activity': 'LatestAvalancheActivity',
        'latest_observations': 'LatestObservations',
        'mountain_weather': 'MountainWeather',
        'avalanche_problems': 'AvalancheProblems',
        'avalanche_advices': 'AvalancheAdvices',
        'reg_id': 'RegId',
        'region_id': 'RegionId',
        'region_name': 'RegionName',
        'region_type_id': 'RegionTypeId',
        'region_type_name': 'RegionTypeName',
        'danger_level': 'DangerLevel',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo',
        'next_warning_time': 'NextWarningTime',
        'publish_time': 'PublishTime',
        'main_text': 'MainText',
        'lang_key': 'LangKey'
    }

    def __init__(self, county_list=None, municipality_list=None, previous_warning_reg_id=None, danger_level_name=None, utm_zone=None, utm_east=None, utm_north=None, author=None, avalanche_danger=None, emergency_warning=None, snow_surface=None, current_weaklayers=None, latest_avalanche_activity=None, latest_observations=None, mountain_weather=None, avalanche_problems=None, avalanche_advices=None, reg_id=None, region_id=None, region_name=None, region_type_id=None, region_type_name=None, danger_level=None, valid_from=None, valid_to=None, next_warning_time=None, publish_time=None, main_text=None, lang_key=None):  # noqa: E501
        """AvalancheWarningDetail - a model defined in Swagger"""  # noqa: E501
        self._county_list = None
        self._municipality_list = None
        self._previous_warning_reg_id = None
        self._danger_level_name = None
        self._utm_zone = None
        self._utm_east = None
        self._utm_north = None
        self._author = None
        self._avalanche_danger = None
        self._emergency_warning = None
        self._snow_surface = None
        self._current_weaklayers = None
        self._latest_avalanche_activity = None
        self._latest_observations = None
        self._mountain_weather = None
        self._avalanche_problems = None
        self._avalanche_advices = None
        self._reg_id = None
        self._region_id = None
        self._region_name = None
        self._region_type_id = None
        self._region_type_name = None
        self._danger_level = None
        self._valid_from = None
        self._valid_to = None
        self._next_warning_time = None
        self._publish_time = None
        self._main_text = None
        self._lang_key = None
        self.discriminator = None
        if county_list is not None:
            self.county_list = county_list
        if municipality_list is not None:
            self.municipality_list = municipality_list
        if previous_warning_reg_id is not None:
            self.previous_warning_reg_id = previous_warning_reg_id
        if danger_level_name is not None:
            self.danger_level_name = danger_level_name
        if utm_zone is not None:
            self.utm_zone = utm_zone
        if utm_east is not None:
            self.utm_east = utm_east
        if utm_north is not None:
            self.utm_north = utm_north
        if author is not None:
            self.author = author
        if avalanche_danger is not None:
            self.avalanche_danger = avalanche_danger
        if emergency_warning is not None:
            self.emergency_warning = emergency_warning
        if snow_surface is not None:
            self.snow_surface = snow_surface
        if current_weaklayers is not None:
            self.current_weaklayers = current_weaklayers
        if latest_avalanche_activity is not None:
            self.latest_avalanche_activity = latest_avalanche_activity
        if latest_observations is not None:
            self.latest_observations = latest_observations
        if mountain_weather is not None:
            self.mountain_weather = mountain_weather
        if avalanche_problems is not None:
            self.avalanche_problems = avalanche_problems
        if avalanche_advices is not None:
            self.avalanche_advices = avalanche_advices
        if reg_id is not None:
            self.reg_id = reg_id
        if region_id is not None:
            self.region_id = region_id
        if region_name is not None:
            self.region_name = region_name
        if region_type_id is not None:
            self.region_type_id = region_type_id
        if region_type_name is not None:
            self.region_type_name = region_type_name
        if danger_level is not None:
            self.danger_level = danger_level
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if next_warning_time is not None:
            self.next_warning_time = next_warning_time
        if publish_time is not None:
            self.publish_time = publish_time
        if main_text is not None:
            self.main_text = main_text
        if lang_key is not None:
            self.lang_key = lang_key

    @property
    def county_list(self):
        """Gets the county_list of this AvalancheWarningDetail.  # noqa: E501


        :return: The county_list of this AvalancheWarningDetail.  # noqa: E501
        :rtype: list[County]
        """
        return self._county_list

    @county_list.setter
    def county_list(self, county_list):
        """Sets the county_list of this AvalancheWarningDetail.


        :param county_list: The county_list of this AvalancheWarningDetail.  # noqa: E501
        :type: list[County]
        """

        self._county_list = county_list

    @property
    def municipality_list(self):
        """Gets the municipality_list of this AvalancheWarningDetail.  # noqa: E501


        :return: The municipality_list of this AvalancheWarningDetail.  # noqa: E501
        :rtype: list[Municipality]
        """
        return self._municipality_list

    @municipality_list.setter
    def municipality_list(self, municipality_list):
        """Sets the municipality_list of this AvalancheWarningDetail.


        :param municipality_list: The municipality_list of this AvalancheWarningDetail.  # noqa: E501
        :type: list[Municipality]
        """

        self._municipality_list = municipality_list

    @property
    def previous_warning_reg_id(self):
        """Gets the previous_warning_reg_id of this AvalancheWarningDetail.  # noqa: E501


        :return: The previous_warning_reg_id of this AvalancheWarningDetail.  # noqa: E501
        :rtype: int
        """
        return self._previous_warning_reg_id

    @previous_warning_reg_id.setter
    def previous_warning_reg_id(self, previous_warning_reg_id):
        """Sets the previous_warning_reg_id of this AvalancheWarningDetail.


        :param previous_warning_reg_id: The previous_warning_reg_id of this AvalancheWarningDetail.  # noqa: E501
        :type: int
        """

        self._previous_warning_reg_id = previous_warning_reg_id

    @property
    def danger_level_name(self):
        """Gets the danger_level_name of this AvalancheWarningDetail.  # noqa: E501


        :return: The danger_level_name of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._danger_level_name

    @danger_level_name.setter
    def danger_level_name(self, danger_level_name):
        """Sets the danger_level_name of this AvalancheWarningDetail.


        :param danger_level_name: The danger_level_name of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._danger_level_name = danger_level_name

    @property
    def utm_zone(self):
        """Gets the utm_zone of this AvalancheWarningDetail.  # noqa: E501


        :return: The utm_zone of this AvalancheWarningDetail.  # noqa: E501
        :rtype: int
        """
        return self._utm_zone

    @utm_zone.setter
    def utm_zone(self, utm_zone):
        """Sets the utm_zone of this AvalancheWarningDetail.


        :param utm_zone: The utm_zone of this AvalancheWarningDetail.  # noqa: E501
        :type: int
        """

        self._utm_zone = utm_zone

    @property
    def utm_east(self):
        """Gets the utm_east of this AvalancheWarningDetail.  # noqa: E501


        :return: The utm_east of this AvalancheWarningDetail.  # noqa: E501
        :rtype: int
        """
        return self._utm_east

    @utm_east.setter
    def utm_east(self, utm_east):
        """Sets the utm_east of this AvalancheWarningDetail.


        :param utm_east: The utm_east of this AvalancheWarningDetail.  # noqa: E501
        :type: int
        """

        self._utm_east = utm_east

    @property
    def utm_north(self):
        """Gets the utm_north of this AvalancheWarningDetail.  # noqa: E501


        :return: The utm_north of this AvalancheWarningDetail.  # noqa: E501
        :rtype: int
        """
        return self._utm_north

    @utm_north.setter
    def utm_north(self, utm_north):
        """Sets the utm_north of this AvalancheWarningDetail.


        :param utm_north: The utm_north of this AvalancheWarningDetail.  # noqa: E501
        :type: int
        """

        self._utm_north = utm_north

    @property
    def author(self):
        """Gets the author of this AvalancheWarningDetail.  # noqa: E501


        :return: The author of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this AvalancheWarningDetail.


        :param author: The author of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def avalanche_danger(self):
        """Gets the avalanche_danger of this AvalancheWarningDetail.  # noqa: E501


        :return: The avalanche_danger of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_danger

    @avalanche_danger.setter
    def avalanche_danger(self, avalanche_danger):
        """Sets the avalanche_danger of this AvalancheWarningDetail.


        :param avalanche_danger: The avalanche_danger of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._avalanche_danger = avalanche_danger

    @property
    def emergency_warning(self):
        """Gets the emergency_warning of this AvalancheWarningDetail.  # noqa: E501


        :return: The emergency_warning of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._emergency_warning

    @emergency_warning.setter
    def emergency_warning(self, emergency_warning):
        """Sets the emergency_warning of this AvalancheWarningDetail.


        :param emergency_warning: The emergency_warning of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._emergency_warning = emergency_warning

    @property
    def snow_surface(self):
        """Gets the snow_surface of this AvalancheWarningDetail.  # noqa: E501


        :return: The snow_surface of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._snow_surface

    @snow_surface.setter
    def snow_surface(self, snow_surface):
        """Sets the snow_surface of this AvalancheWarningDetail.


        :param snow_surface: The snow_surface of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._snow_surface = snow_surface

    @property
    def current_weaklayers(self):
        """Gets the current_weaklayers of this AvalancheWarningDetail.  # noqa: E501


        :return: The current_weaklayers of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._current_weaklayers

    @current_weaklayers.setter
    def current_weaklayers(self, current_weaklayers):
        """Sets the current_weaklayers of this AvalancheWarningDetail.


        :param current_weaklayers: The current_weaklayers of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._current_weaklayers = current_weaklayers

    @property
    def latest_avalanche_activity(self):
        """Gets the latest_avalanche_activity of this AvalancheWarningDetail.  # noqa: E501


        :return: The latest_avalanche_activity of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._latest_avalanche_activity

    @latest_avalanche_activity.setter
    def latest_avalanche_activity(self, latest_avalanche_activity):
        """Sets the latest_avalanche_activity of this AvalancheWarningDetail.


        :param latest_avalanche_activity: The latest_avalanche_activity of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._latest_avalanche_activity = latest_avalanche_activity

    @property
    def latest_observations(self):
        """Gets the latest_observations of this AvalancheWarningDetail.  # noqa: E501


        :return: The latest_observations of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._latest_observations

    @latest_observations.setter
    def latest_observations(self, latest_observations):
        """Sets the latest_observations of this AvalancheWarningDetail.


        :param latest_observations: The latest_observations of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._latest_observations = latest_observations

    @property
    def mountain_weather(self):
        """Gets the mountain_weather of this AvalancheWarningDetail.  # noqa: E501


        :return: The mountain_weather of this AvalancheWarningDetail.  # noqa: E501
        :rtype: MountainWeather
        """
        return self._mountain_weather

    @mountain_weather.setter
    def mountain_weather(self, mountain_weather):
        """Sets the mountain_weather of this AvalancheWarningDetail.


        :param mountain_weather: The mountain_weather of this AvalancheWarningDetail.  # noqa: E501
        :type: MountainWeather
        """

        self._mountain_weather = mountain_weather

    @property
    def avalanche_problems(self):
        """Gets the avalanche_problems of this AvalancheWarningDetail.  # noqa: E501


        :return: The avalanche_problems of this AvalancheWarningDetail.  # noqa: E501
        :rtype: list[AvalancheProblem]
        """
        return self._avalanche_problems

    @avalanche_problems.setter
    def avalanche_problems(self, avalanche_problems):
        """Sets the avalanche_problems of this AvalancheWarningDetail.


        :param avalanche_problems: The avalanche_problems of this AvalancheWarningDetail.  # noqa: E501
        :type: list[AvalancheProblem]
        """

        self._avalanche_problems = avalanche_problems

    @property
    def avalanche_advices(self):
        """Gets the avalanche_advices of this AvalancheWarningDetail.  # noqa: E501


        :return: The avalanche_advices of this AvalancheWarningDetail.  # noqa: E501
        :rtype: list[Advice]
        """
        return self._avalanche_advices

    @avalanche_advices.setter
    def avalanche_advices(self, avalanche_advices):
        """Sets the avalanche_advices of this AvalancheWarningDetail.


        :param avalanche_advices: The avalanche_advices of this AvalancheWarningDetail.  # noqa: E501
        :type: list[Advice]
        """

        self._avalanche_advices = avalanche_advices

    @property
    def reg_id(self):
        """Gets the reg_id of this AvalancheWarningDetail.  # noqa: E501


        :return: The reg_id of this AvalancheWarningDetail.  # noqa: E501
        :rtype: int
        """
        return self._reg_id

    @reg_id.setter
    def reg_id(self, reg_id):
        """Sets the reg_id of this AvalancheWarningDetail.


        :param reg_id: The reg_id of this AvalancheWarningDetail.  # noqa: E501
        :type: int
        """

        self._reg_id = reg_id

    @property
    def region_id(self):
        """Gets the region_id of this AvalancheWarningDetail.  # noqa: E501


        :return: The region_id of this AvalancheWarningDetail.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this AvalancheWarningDetail.


        :param region_id: The region_id of this AvalancheWarningDetail.  # noqa: E501
        :type: int
        """

        self._region_id = region_id

    @property
    def region_name(self):
        """Gets the region_name of this AvalancheWarningDetail.  # noqa: E501


        :return: The region_name of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this AvalancheWarningDetail.


        :param region_name: The region_name of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def region_type_id(self):
        """Gets the region_type_id of this AvalancheWarningDetail.  # noqa: E501


        :return: The region_type_id of this AvalancheWarningDetail.  # noqa: E501
        :rtype: int
        """
        return self._region_type_id

    @region_type_id.setter
    def region_type_id(self, region_type_id):
        """Sets the region_type_id of this AvalancheWarningDetail.


        :param region_type_id: The region_type_id of this AvalancheWarningDetail.  # noqa: E501
        :type: int
        """

        self._region_type_id = region_type_id

    @property
    def region_type_name(self):
        """Gets the region_type_name of this AvalancheWarningDetail.  # noqa: E501


        :return: The region_type_name of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._region_type_name

    @region_type_name.setter
    def region_type_name(self, region_type_name):
        """Sets the region_type_name of this AvalancheWarningDetail.


        :param region_type_name: The region_type_name of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._region_type_name = region_type_name

    @property
    def danger_level(self):
        """Gets the danger_level of this AvalancheWarningDetail.  # noqa: E501


        :return: The danger_level of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._danger_level

    @danger_level.setter
    def danger_level(self, danger_level):
        """Sets the danger_level of this AvalancheWarningDetail.


        :param danger_level: The danger_level of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._danger_level = danger_level

    @property
    def valid_from(self):
        """Gets the valid_from of this AvalancheWarningDetail.  # noqa: E501


        :return: The valid_from of this AvalancheWarningDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this AvalancheWarningDetail.


        :param valid_from: The valid_from of this AvalancheWarningDetail.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this AvalancheWarningDetail.  # noqa: E501


        :return: The valid_to of this AvalancheWarningDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this AvalancheWarningDetail.


        :param valid_to: The valid_to of this AvalancheWarningDetail.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def next_warning_time(self):
        """Gets the next_warning_time of this AvalancheWarningDetail.  # noqa: E501


        :return: The next_warning_time of this AvalancheWarningDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._next_warning_time

    @next_warning_time.setter
    def next_warning_time(self, next_warning_time):
        """Sets the next_warning_time of this AvalancheWarningDetail.


        :param next_warning_time: The next_warning_time of this AvalancheWarningDetail.  # noqa: E501
        :type: datetime
        """

        self._next_warning_time = next_warning_time

    @property
    def publish_time(self):
        """Gets the publish_time of this AvalancheWarningDetail.  # noqa: E501


        :return: The publish_time of this AvalancheWarningDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this AvalancheWarningDetail.


        :param publish_time: The publish_time of this AvalancheWarningDetail.  # noqa: E501
        :type: datetime
        """

        self._publish_time = publish_time

    @property
    def main_text(self):
        """Gets the main_text of this AvalancheWarningDetail.  # noqa: E501


        :return: The main_text of this AvalancheWarningDetail.  # noqa: E501
        :rtype: str
        """
        return self._main_text

    @main_text.setter
    def main_text(self, main_text):
        """Sets the main_text of this AvalancheWarningDetail.


        :param main_text: The main_text of this AvalancheWarningDetail.  # noqa: E501
        :type: str
        """

        self._main_text = main_text

    @property
    def lang_key(self):
        """Gets the lang_key of this AvalancheWarningDetail.  # noqa: E501


        :return: The lang_key of this AvalancheWarningDetail.  # noqa: E501
        :rtype: int
        """
        return self._lang_key

    @lang_key.setter
    def lang_key(self, lang_key):
        """Sets the lang_key of this AvalancheWarningDetail.


        :param lang_key: The lang_key of this AvalancheWarningDetail.  # noqa: E501
        :type: int
        """

        self._lang_key = lang_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvalancheWarningDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvalancheWarningDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
