# coding: utf-8

"""
    Sn√∏skredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v5.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MountainWeather(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_saved_time': 'datetime',
        'cloud_cover_id': 'int',
        'cloud_cover_name': 'str',
        'comment': 'str',
        'measurement_types': 'list[MeasurementType]'
    }

    attribute_map = {
        'last_saved_time': 'LastSavedTime',
        'cloud_cover_id': 'CloudCoverId',
        'cloud_cover_name': 'CloudCoverName',
        'comment': 'Comment',
        'measurement_types': 'MeasurementTypes'
    }

    def __init__(self, last_saved_time=None, cloud_cover_id=None, cloud_cover_name=None, comment=None, measurement_types=None):  # noqa: E501
        """MountainWeather - a model defined in Swagger"""  # noqa: E501
        self._last_saved_time = None
        self._cloud_cover_id = None
        self._cloud_cover_name = None
        self._comment = None
        self._measurement_types = None
        self.discriminator = None
        if last_saved_time is not None:
            self.last_saved_time = last_saved_time
        if cloud_cover_id is not None:
            self.cloud_cover_id = cloud_cover_id
        if cloud_cover_name is not None:
            self.cloud_cover_name = cloud_cover_name
        if comment is not None:
            self.comment = comment
        if measurement_types is not None:
            self.measurement_types = measurement_types

    @property
    def last_saved_time(self):
        """Gets the last_saved_time of this MountainWeather.  # noqa: E501


        :return: The last_saved_time of this MountainWeather.  # noqa: E501
        :rtype: datetime
        """
        return self._last_saved_time

    @last_saved_time.setter
    def last_saved_time(self, last_saved_time):
        """Sets the last_saved_time of this MountainWeather.


        :param last_saved_time: The last_saved_time of this MountainWeather.  # noqa: E501
        :type: datetime
        """

        self._last_saved_time = last_saved_time

    @property
    def cloud_cover_id(self):
        """Gets the cloud_cover_id of this MountainWeather.  # noqa: E501


        :return: The cloud_cover_id of this MountainWeather.  # noqa: E501
        :rtype: int
        """
        return self._cloud_cover_id

    @cloud_cover_id.setter
    def cloud_cover_id(self, cloud_cover_id):
        """Sets the cloud_cover_id of this MountainWeather.


        :param cloud_cover_id: The cloud_cover_id of this MountainWeather.  # noqa: E501
        :type: int
        """

        self._cloud_cover_id = cloud_cover_id

    @property
    def cloud_cover_name(self):
        """Gets the cloud_cover_name of this MountainWeather.  # noqa: E501


        :return: The cloud_cover_name of this MountainWeather.  # noqa: E501
        :rtype: str
        """
        return self._cloud_cover_name

    @cloud_cover_name.setter
    def cloud_cover_name(self, cloud_cover_name):
        """Sets the cloud_cover_name of this MountainWeather.


        :param cloud_cover_name: The cloud_cover_name of this MountainWeather.  # noqa: E501
        :type: str
        """

        self._cloud_cover_name = cloud_cover_name

    @property
    def comment(self):
        """Gets the comment of this MountainWeather.  # noqa: E501


        :return: The comment of this MountainWeather.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MountainWeather.


        :param comment: The comment of this MountainWeather.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def measurement_types(self):
        """Gets the measurement_types of this MountainWeather.  # noqa: E501


        :return: The measurement_types of this MountainWeather.  # noqa: E501
        :rtype: list[MeasurementType]
        """
        return self._measurement_types

    @measurement_types.setter
    def measurement_types(self, measurement_types):
        """Sets the measurement_types of this MountainWeather.


        :param measurement_types: The measurement_types of this MountainWeather.  # noqa: E501
        :type: list[MeasurementType]
        """

        self._measurement_types = measurement_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MountainWeather, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountainWeather):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
