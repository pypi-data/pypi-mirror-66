# coding: utf-8

"""
    Sn√∏skredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v5.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AvalancheProblem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avalanche_problem_id': 'int',
        'avalanche_ext_id': 'int',
        'avalanche_ext_name': 'str',
        'aval_cause_id': 'int',
        'aval_cause_name': 'str',
        'aval_probability_id': 'int',
        'aval_probability_name': 'str',
        'aval_trigger_simple_id': 'int',
        'aval_trigger_simple_name': 'str',
        'destructive_size_ext_id': 'int',
        'destructive_size_ext_name': 'str',
        'aval_propagation_id': 'int',
        'aval_propagation_name': 'str',
        'avalanche_type_id': 'int',
        'avalanche_type_name': 'str',
        'avalanche_problem_type_id': 'int',
        'avalanche_problem_type_name': 'str',
        'valid_expositions': 'str',
        'exposed_height1': 'int',
        'exposed_height2': 'int',
        'exposed_height_fill': 'int'
    }

    attribute_map = {
        'avalanche_problem_id': 'AvalancheProblemId',
        'avalanche_ext_id': 'AvalancheExtId',
        'avalanche_ext_name': 'AvalancheExtName',
        'aval_cause_id': 'AvalCauseId',
        'aval_cause_name': 'AvalCauseName',
        'aval_probability_id': 'AvalProbabilityId',
        'aval_probability_name': 'AvalProbabilityName',
        'aval_trigger_simple_id': 'AvalTriggerSimpleId',
        'aval_trigger_simple_name': 'AvalTriggerSimpleName',
        'destructive_size_ext_id': 'DestructiveSizeExtId',
        'destructive_size_ext_name': 'DestructiveSizeExtName',
        'aval_propagation_id': 'AvalPropagationId',
        'aval_propagation_name': 'AvalPropagationName',
        'avalanche_type_id': 'AvalancheTypeId',
        'avalanche_type_name': 'AvalancheTypeName',
        'avalanche_problem_type_id': 'AvalancheProblemTypeId',
        'avalanche_problem_type_name': 'AvalancheProblemTypeName',
        'valid_expositions': 'ValidExpositions',
        'exposed_height1': 'ExposedHeight1',
        'exposed_height2': 'ExposedHeight2',
        'exposed_height_fill': 'ExposedHeightFill'
    }

    def __init__(self, avalanche_problem_id=None, avalanche_ext_id=None, avalanche_ext_name=None, aval_cause_id=None, aval_cause_name=None, aval_probability_id=None, aval_probability_name=None, aval_trigger_simple_id=None, aval_trigger_simple_name=None, destructive_size_ext_id=None, destructive_size_ext_name=None, aval_propagation_id=None, aval_propagation_name=None, avalanche_type_id=None, avalanche_type_name=None, avalanche_problem_type_id=None, avalanche_problem_type_name=None, valid_expositions=None, exposed_height1=None, exposed_height2=None, exposed_height_fill=None):  # noqa: E501
        """AvalancheProblem - a model defined in Swagger"""  # noqa: E501
        self._avalanche_problem_id = None
        self._avalanche_ext_id = None
        self._avalanche_ext_name = None
        self._aval_cause_id = None
        self._aval_cause_name = None
        self._aval_probability_id = None
        self._aval_probability_name = None
        self._aval_trigger_simple_id = None
        self._aval_trigger_simple_name = None
        self._destructive_size_ext_id = None
        self._destructive_size_ext_name = None
        self._aval_propagation_id = None
        self._aval_propagation_name = None
        self._avalanche_type_id = None
        self._avalanche_type_name = None
        self._avalanche_problem_type_id = None
        self._avalanche_problem_type_name = None
        self._valid_expositions = None
        self._exposed_height1 = None
        self._exposed_height2 = None
        self._exposed_height_fill = None
        self.discriminator = None
        if avalanche_problem_id is not None:
            self.avalanche_problem_id = avalanche_problem_id
        if avalanche_ext_id is not None:
            self.avalanche_ext_id = avalanche_ext_id
        if avalanche_ext_name is not None:
            self.avalanche_ext_name = avalanche_ext_name
        if aval_cause_id is not None:
            self.aval_cause_id = aval_cause_id
        if aval_cause_name is not None:
            self.aval_cause_name = aval_cause_name
        if aval_probability_id is not None:
            self.aval_probability_id = aval_probability_id
        if aval_probability_name is not None:
            self.aval_probability_name = aval_probability_name
        if aval_trigger_simple_id is not None:
            self.aval_trigger_simple_id = aval_trigger_simple_id
        if aval_trigger_simple_name is not None:
            self.aval_trigger_simple_name = aval_trigger_simple_name
        if destructive_size_ext_id is not None:
            self.destructive_size_ext_id = destructive_size_ext_id
        if destructive_size_ext_name is not None:
            self.destructive_size_ext_name = destructive_size_ext_name
        if aval_propagation_id is not None:
            self.aval_propagation_id = aval_propagation_id
        if aval_propagation_name is not None:
            self.aval_propagation_name = aval_propagation_name
        if avalanche_type_id is not None:
            self.avalanche_type_id = avalanche_type_id
        if avalanche_type_name is not None:
            self.avalanche_type_name = avalanche_type_name
        if avalanche_problem_type_id is not None:
            self.avalanche_problem_type_id = avalanche_problem_type_id
        if avalanche_problem_type_name is not None:
            self.avalanche_problem_type_name = avalanche_problem_type_name
        if valid_expositions is not None:
            self.valid_expositions = valid_expositions
        if exposed_height1 is not None:
            self.exposed_height1 = exposed_height1
        if exposed_height2 is not None:
            self.exposed_height2 = exposed_height2
        if exposed_height_fill is not None:
            self.exposed_height_fill = exposed_height_fill

    @property
    def avalanche_problem_id(self):
        """Gets the avalanche_problem_id of this AvalancheProblem.  # noqa: E501


        :return: The avalanche_problem_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._avalanche_problem_id

    @avalanche_problem_id.setter
    def avalanche_problem_id(self, avalanche_problem_id):
        """Sets the avalanche_problem_id of this AvalancheProblem.


        :param avalanche_problem_id: The avalanche_problem_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._avalanche_problem_id = avalanche_problem_id

    @property
    def avalanche_ext_id(self):
        """Gets the avalanche_ext_id of this AvalancheProblem.  # noqa: E501


        :return: The avalanche_ext_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._avalanche_ext_id

    @avalanche_ext_id.setter
    def avalanche_ext_id(self, avalanche_ext_id):
        """Sets the avalanche_ext_id of this AvalancheProblem.


        :param avalanche_ext_id: The avalanche_ext_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._avalanche_ext_id = avalanche_ext_id

    @property
    def avalanche_ext_name(self):
        """Gets the avalanche_ext_name of this AvalancheProblem.  # noqa: E501


        :return: The avalanche_ext_name of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_ext_name

    @avalanche_ext_name.setter
    def avalanche_ext_name(self, avalanche_ext_name):
        """Sets the avalanche_ext_name of this AvalancheProblem.


        :param avalanche_ext_name: The avalanche_ext_name of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._avalanche_ext_name = avalanche_ext_name

    @property
    def aval_cause_id(self):
        """Gets the aval_cause_id of this AvalancheProblem.  # noqa: E501


        :return: The aval_cause_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._aval_cause_id

    @aval_cause_id.setter
    def aval_cause_id(self, aval_cause_id):
        """Sets the aval_cause_id of this AvalancheProblem.


        :param aval_cause_id: The aval_cause_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._aval_cause_id = aval_cause_id

    @property
    def aval_cause_name(self):
        """Gets the aval_cause_name of this AvalancheProblem.  # noqa: E501


        :return: The aval_cause_name of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._aval_cause_name

    @aval_cause_name.setter
    def aval_cause_name(self, aval_cause_name):
        """Sets the aval_cause_name of this AvalancheProblem.


        :param aval_cause_name: The aval_cause_name of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._aval_cause_name = aval_cause_name

    @property
    def aval_probability_id(self):
        """Gets the aval_probability_id of this AvalancheProblem.  # noqa: E501


        :return: The aval_probability_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._aval_probability_id

    @aval_probability_id.setter
    def aval_probability_id(self, aval_probability_id):
        """Sets the aval_probability_id of this AvalancheProblem.


        :param aval_probability_id: The aval_probability_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._aval_probability_id = aval_probability_id

    @property
    def aval_probability_name(self):
        """Gets the aval_probability_name of this AvalancheProblem.  # noqa: E501


        :return: The aval_probability_name of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._aval_probability_name

    @aval_probability_name.setter
    def aval_probability_name(self, aval_probability_name):
        """Sets the aval_probability_name of this AvalancheProblem.


        :param aval_probability_name: The aval_probability_name of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._aval_probability_name = aval_probability_name

    @property
    def aval_trigger_simple_id(self):
        """Gets the aval_trigger_simple_id of this AvalancheProblem.  # noqa: E501


        :return: The aval_trigger_simple_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._aval_trigger_simple_id

    @aval_trigger_simple_id.setter
    def aval_trigger_simple_id(self, aval_trigger_simple_id):
        """Sets the aval_trigger_simple_id of this AvalancheProblem.


        :param aval_trigger_simple_id: The aval_trigger_simple_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._aval_trigger_simple_id = aval_trigger_simple_id

    @property
    def aval_trigger_simple_name(self):
        """Gets the aval_trigger_simple_name of this AvalancheProblem.  # noqa: E501


        :return: The aval_trigger_simple_name of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._aval_trigger_simple_name

    @aval_trigger_simple_name.setter
    def aval_trigger_simple_name(self, aval_trigger_simple_name):
        """Sets the aval_trigger_simple_name of this AvalancheProblem.


        :param aval_trigger_simple_name: The aval_trigger_simple_name of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._aval_trigger_simple_name = aval_trigger_simple_name

    @property
    def destructive_size_ext_id(self):
        """Gets the destructive_size_ext_id of this AvalancheProblem.  # noqa: E501


        :return: The destructive_size_ext_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._destructive_size_ext_id

    @destructive_size_ext_id.setter
    def destructive_size_ext_id(self, destructive_size_ext_id):
        """Sets the destructive_size_ext_id of this AvalancheProblem.


        :param destructive_size_ext_id: The destructive_size_ext_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._destructive_size_ext_id = destructive_size_ext_id

    @property
    def destructive_size_ext_name(self):
        """Gets the destructive_size_ext_name of this AvalancheProblem.  # noqa: E501


        :return: The destructive_size_ext_name of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._destructive_size_ext_name

    @destructive_size_ext_name.setter
    def destructive_size_ext_name(self, destructive_size_ext_name):
        """Sets the destructive_size_ext_name of this AvalancheProblem.


        :param destructive_size_ext_name: The destructive_size_ext_name of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._destructive_size_ext_name = destructive_size_ext_name

    @property
    def aval_propagation_id(self):
        """Gets the aval_propagation_id of this AvalancheProblem.  # noqa: E501


        :return: The aval_propagation_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._aval_propagation_id

    @aval_propagation_id.setter
    def aval_propagation_id(self, aval_propagation_id):
        """Sets the aval_propagation_id of this AvalancheProblem.


        :param aval_propagation_id: The aval_propagation_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._aval_propagation_id = aval_propagation_id

    @property
    def aval_propagation_name(self):
        """Gets the aval_propagation_name of this AvalancheProblem.  # noqa: E501


        :return: The aval_propagation_name of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._aval_propagation_name

    @aval_propagation_name.setter
    def aval_propagation_name(self, aval_propagation_name):
        """Sets the aval_propagation_name of this AvalancheProblem.


        :param aval_propagation_name: The aval_propagation_name of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._aval_propagation_name = aval_propagation_name

    @property
    def avalanche_type_id(self):
        """Gets the avalanche_type_id of this AvalancheProblem.  # noqa: E501


        :return: The avalanche_type_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._avalanche_type_id

    @avalanche_type_id.setter
    def avalanche_type_id(self, avalanche_type_id):
        """Sets the avalanche_type_id of this AvalancheProblem.


        :param avalanche_type_id: The avalanche_type_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._avalanche_type_id = avalanche_type_id

    @property
    def avalanche_type_name(self):
        """Gets the avalanche_type_name of this AvalancheProblem.  # noqa: E501


        :return: The avalanche_type_name of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_type_name

    @avalanche_type_name.setter
    def avalanche_type_name(self, avalanche_type_name):
        """Sets the avalanche_type_name of this AvalancheProblem.


        :param avalanche_type_name: The avalanche_type_name of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._avalanche_type_name = avalanche_type_name

    @property
    def avalanche_problem_type_id(self):
        """Gets the avalanche_problem_type_id of this AvalancheProblem.  # noqa: E501


        :return: The avalanche_problem_type_id of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._avalanche_problem_type_id

    @avalanche_problem_type_id.setter
    def avalanche_problem_type_id(self, avalanche_problem_type_id):
        """Sets the avalanche_problem_type_id of this AvalancheProblem.


        :param avalanche_problem_type_id: The avalanche_problem_type_id of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._avalanche_problem_type_id = avalanche_problem_type_id

    @property
    def avalanche_problem_type_name(self):
        """Gets the avalanche_problem_type_name of this AvalancheProblem.  # noqa: E501


        :return: The avalanche_problem_type_name of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._avalanche_problem_type_name

    @avalanche_problem_type_name.setter
    def avalanche_problem_type_name(self, avalanche_problem_type_name):
        """Sets the avalanche_problem_type_name of this AvalancheProblem.


        :param avalanche_problem_type_name: The avalanche_problem_type_name of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._avalanche_problem_type_name = avalanche_problem_type_name

    @property
    def valid_expositions(self):
        """Gets the valid_expositions of this AvalancheProblem.  # noqa: E501


        :return: The valid_expositions of this AvalancheProblem.  # noqa: E501
        :rtype: str
        """
        return self._valid_expositions

    @valid_expositions.setter
    def valid_expositions(self, valid_expositions):
        """Sets the valid_expositions of this AvalancheProblem.


        :param valid_expositions: The valid_expositions of this AvalancheProblem.  # noqa: E501
        :type: str
        """

        self._valid_expositions = valid_expositions

    @property
    def exposed_height1(self):
        """Gets the exposed_height1 of this AvalancheProblem.  # noqa: E501


        :return: The exposed_height1 of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._exposed_height1

    @exposed_height1.setter
    def exposed_height1(self, exposed_height1):
        """Sets the exposed_height1 of this AvalancheProblem.


        :param exposed_height1: The exposed_height1 of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._exposed_height1 = exposed_height1

    @property
    def exposed_height2(self):
        """Gets the exposed_height2 of this AvalancheProblem.  # noqa: E501


        :return: The exposed_height2 of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._exposed_height2

    @exposed_height2.setter
    def exposed_height2(self, exposed_height2):
        """Sets the exposed_height2 of this AvalancheProblem.


        :param exposed_height2: The exposed_height2 of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._exposed_height2 = exposed_height2

    @property
    def exposed_height_fill(self):
        """Gets the exposed_height_fill of this AvalancheProblem.  # noqa: E501


        :return: The exposed_height_fill of this AvalancheProblem.  # noqa: E501
        :rtype: int
        """
        return self._exposed_height_fill

    @exposed_height_fill.setter
    def exposed_height_fill(self, exposed_height_fill):
        """Sets the exposed_height_fill of this AvalancheProblem.


        :param exposed_height_fill: The exposed_height_fill of this AvalancheProblem.  # noqa: E501
        :type: int
        """

        self._exposed_height_fill = exposed_height_fill

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvalancheProblem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvalancheProblem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
