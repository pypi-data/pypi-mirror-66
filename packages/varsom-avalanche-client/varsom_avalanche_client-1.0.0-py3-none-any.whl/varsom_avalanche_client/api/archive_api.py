# coding: utf-8

"""
    SnÃ¸skredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v5.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from varsom_avalanche_client.api_client import ApiClient


class ArchiveApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def archive_all(self, langkey, startdate, enddate, format, **kwargs):  # noqa: E501
        """archive_all  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_all(langkey, startdate, enddate, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :param str format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.archive_all_with_http_info(langkey, startdate, enddate, format, **kwargs)  # noqa: E501
        else:
            (data) = self.archive_all_with_http_info(langkey, startdate, enddate, format, **kwargs)  # noqa: E501
            return data

    def archive_all_with_http_info(self, langkey, startdate, enddate, format, **kwargs):  # noqa: E501
        """archive_all  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_all_with_http_info(langkey, startdate, enddate, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :param str format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['langkey', 'startdate', 'enddate', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `archive_all`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `archive_all`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `archive_all`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `archive_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Archive/Warning/All/{langkey}/{startdate}/{enddate}/{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def archive_region_id(self, id, langkey, startdate, enddate, format, **kwargs):  # noqa: E501
        """archive_region_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_region_id(id, langkey, startdate, enddate, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :param str format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.archive_region_id_with_http_info(id, langkey, startdate, enddate, format, **kwargs)  # noqa: E501
        else:
            (data) = self.archive_region_id_with_http_info(id, langkey, startdate, enddate, format, **kwargs)  # noqa: E501
            return data

    def archive_region_id_with_http_info(self, id, langkey, startdate, enddate, format, **kwargs):  # noqa: E501
        """archive_region_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_region_id_with_http_info(id, langkey, startdate, enddate, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int langkey: (required)
        :param datetime startdate: (required)
        :param datetime enddate: (required)
        :param str format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'langkey', 'startdate', 'enddate', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_region_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `archive_region_id`")  # noqa: E501
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `archive_region_id`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `archive_region_id`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `archive_region_id`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `archive_region_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Archive/Warning/Region/{id}/{langkey}/{startdate}/{enddate}/{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def archive_regions(self, format, **kwargs):  # noqa: E501
        """archive_regions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_regions(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.archive_regions_with_http_info(format, **kwargs)  # noqa: E501
        else:
            (data) = self.archive_regions_with_http_info(format, **kwargs)  # noqa: E501
            return data

    def archive_regions_with_http_info(self, format, **kwargs):  # noqa: E501
        """archive_regions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_regions_with_http_info(format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `archive_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Archive/Region/{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def archive_warning_id(self, id, langkey, format, **kwargs):  # noqa: E501
        """archive_warning_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_warning_id(id, langkey, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int langkey: (required)
        :param str format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.archive_warning_id_with_http_info(id, langkey, format, **kwargs)  # noqa: E501
        else:
            (data) = self.archive_warning_id_with_http_info(id, langkey, format, **kwargs)  # noqa: E501
            return data

    def archive_warning_id_with_http_info(self, id, langkey, format, **kwargs):  # noqa: E501
        """archive_warning_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_warning_id_with_http_info(id, langkey, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param int langkey: (required)
        :param str format: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'langkey', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_warning_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `archive_warning_id`")  # noqa: E501
        # verify the required parameter 'langkey' is set
        if ('langkey' not in params or
                params['langkey'] is None):
            raise ValueError("Missing the required parameter `langkey` when calling `archive_warning_id`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `archive_warning_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'langkey' in params:
            path_params['langkey'] = params['langkey']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Archive/Warning/Id/{id}/{langkey}/{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
