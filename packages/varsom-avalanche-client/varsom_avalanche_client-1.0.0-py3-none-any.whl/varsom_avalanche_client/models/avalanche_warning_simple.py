# coding: utf-8

"""
    Sn√∏skredvarsel API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v5.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AvalancheWarningSimple(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reg_id': 'int',
        'region_id': 'int',
        'region_name': 'str',
        'region_type_id': 'int',
        'region_type_name': 'str',
        'danger_level': 'str',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'next_warning_time': 'datetime',
        'publish_time': 'datetime',
        'main_text': 'str',
        'lang_key': 'int'
    }

    attribute_map = {
        'reg_id': 'RegId',
        'region_id': 'RegionId',
        'region_name': 'RegionName',
        'region_type_id': 'RegionTypeId',
        'region_type_name': 'RegionTypeName',
        'danger_level': 'DangerLevel',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo',
        'next_warning_time': 'NextWarningTime',
        'publish_time': 'PublishTime',
        'main_text': 'MainText',
        'lang_key': 'LangKey'
    }

    def __init__(self, reg_id=None, region_id=None, region_name=None, region_type_id=None, region_type_name=None, danger_level=None, valid_from=None, valid_to=None, next_warning_time=None, publish_time=None, main_text=None, lang_key=None):  # noqa: E501
        """AvalancheWarningSimple - a model defined in Swagger"""  # noqa: E501
        self._reg_id = None
        self._region_id = None
        self._region_name = None
        self._region_type_id = None
        self._region_type_name = None
        self._danger_level = None
        self._valid_from = None
        self._valid_to = None
        self._next_warning_time = None
        self._publish_time = None
        self._main_text = None
        self._lang_key = None
        self.discriminator = None
        if reg_id is not None:
            self.reg_id = reg_id
        if region_id is not None:
            self.region_id = region_id
        if region_name is not None:
            self.region_name = region_name
        if region_type_id is not None:
            self.region_type_id = region_type_id
        if region_type_name is not None:
            self.region_type_name = region_type_name
        if danger_level is not None:
            self.danger_level = danger_level
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if next_warning_time is not None:
            self.next_warning_time = next_warning_time
        if publish_time is not None:
            self.publish_time = publish_time
        if main_text is not None:
            self.main_text = main_text
        if lang_key is not None:
            self.lang_key = lang_key

    @property
    def reg_id(self):
        """Gets the reg_id of this AvalancheWarningSimple.  # noqa: E501


        :return: The reg_id of this AvalancheWarningSimple.  # noqa: E501
        :rtype: int
        """
        return self._reg_id

    @reg_id.setter
    def reg_id(self, reg_id):
        """Sets the reg_id of this AvalancheWarningSimple.


        :param reg_id: The reg_id of this AvalancheWarningSimple.  # noqa: E501
        :type: int
        """

        self._reg_id = reg_id

    @property
    def region_id(self):
        """Gets the region_id of this AvalancheWarningSimple.  # noqa: E501


        :return: The region_id of this AvalancheWarningSimple.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this AvalancheWarningSimple.


        :param region_id: The region_id of this AvalancheWarningSimple.  # noqa: E501
        :type: int
        """

        self._region_id = region_id

    @property
    def region_name(self):
        """Gets the region_name of this AvalancheWarningSimple.  # noqa: E501


        :return: The region_name of this AvalancheWarningSimple.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this AvalancheWarningSimple.


        :param region_name: The region_name of this AvalancheWarningSimple.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def region_type_id(self):
        """Gets the region_type_id of this AvalancheWarningSimple.  # noqa: E501


        :return: The region_type_id of this AvalancheWarningSimple.  # noqa: E501
        :rtype: int
        """
        return self._region_type_id

    @region_type_id.setter
    def region_type_id(self, region_type_id):
        """Sets the region_type_id of this AvalancheWarningSimple.


        :param region_type_id: The region_type_id of this AvalancheWarningSimple.  # noqa: E501
        :type: int
        """

        self._region_type_id = region_type_id

    @property
    def region_type_name(self):
        """Gets the region_type_name of this AvalancheWarningSimple.  # noqa: E501


        :return: The region_type_name of this AvalancheWarningSimple.  # noqa: E501
        :rtype: str
        """
        return self._region_type_name

    @region_type_name.setter
    def region_type_name(self, region_type_name):
        """Sets the region_type_name of this AvalancheWarningSimple.


        :param region_type_name: The region_type_name of this AvalancheWarningSimple.  # noqa: E501
        :type: str
        """

        self._region_type_name = region_type_name

    @property
    def danger_level(self):
        """Gets the danger_level of this AvalancheWarningSimple.  # noqa: E501


        :return: The danger_level of this AvalancheWarningSimple.  # noqa: E501
        :rtype: str
        """
        return self._danger_level

    @danger_level.setter
    def danger_level(self, danger_level):
        """Sets the danger_level of this AvalancheWarningSimple.


        :param danger_level: The danger_level of this AvalancheWarningSimple.  # noqa: E501
        :type: str
        """

        self._danger_level = danger_level

    @property
    def valid_from(self):
        """Gets the valid_from of this AvalancheWarningSimple.  # noqa: E501


        :return: The valid_from of this AvalancheWarningSimple.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this AvalancheWarningSimple.


        :param valid_from: The valid_from of this AvalancheWarningSimple.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this AvalancheWarningSimple.  # noqa: E501


        :return: The valid_to of this AvalancheWarningSimple.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this AvalancheWarningSimple.


        :param valid_to: The valid_to of this AvalancheWarningSimple.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def next_warning_time(self):
        """Gets the next_warning_time of this AvalancheWarningSimple.  # noqa: E501


        :return: The next_warning_time of this AvalancheWarningSimple.  # noqa: E501
        :rtype: datetime
        """
        return self._next_warning_time

    @next_warning_time.setter
    def next_warning_time(self, next_warning_time):
        """Sets the next_warning_time of this AvalancheWarningSimple.


        :param next_warning_time: The next_warning_time of this AvalancheWarningSimple.  # noqa: E501
        :type: datetime
        """

        self._next_warning_time = next_warning_time

    @property
    def publish_time(self):
        """Gets the publish_time of this AvalancheWarningSimple.  # noqa: E501


        :return: The publish_time of this AvalancheWarningSimple.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this AvalancheWarningSimple.


        :param publish_time: The publish_time of this AvalancheWarningSimple.  # noqa: E501
        :type: datetime
        """

        self._publish_time = publish_time

    @property
    def main_text(self):
        """Gets the main_text of this AvalancheWarningSimple.  # noqa: E501


        :return: The main_text of this AvalancheWarningSimple.  # noqa: E501
        :rtype: str
        """
        return self._main_text

    @main_text.setter
    def main_text(self, main_text):
        """Sets the main_text of this AvalancheWarningSimple.


        :param main_text: The main_text of this AvalancheWarningSimple.  # noqa: E501
        :type: str
        """

        self._main_text = main_text

    @property
    def lang_key(self):
        """Gets the lang_key of this AvalancheWarningSimple.  # noqa: E501


        :return: The lang_key of this AvalancheWarningSimple.  # noqa: E501
        :rtype: int
        """
        return self._lang_key

    @lang_key.setter
    def lang_key(self, lang_key):
        """Sets the lang_key of this AvalancheWarningSimple.


        :param lang_key: The lang_key of this AvalancheWarningSimple.  # noqa: E501
        :type: int
        """

        self._lang_key = lang_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvalancheWarningSimple, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvalancheWarningSimple):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
