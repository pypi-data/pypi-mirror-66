{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-dialog-behavior/paper-dialog-behavior.js","webpack:///./node_modules/@polymer/paper-dialog-behavior/paper-dialog-shared-styles.js","webpack:///./node_modules/@polymer/paper-dialog/paper-dialog.js","webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/paper-input/paper-textarea.js","webpack:///../src/directives/until.ts"],"names":["__webpack_require__","d","__webpack_exports__","PaperDialogBehaviorImpl","PaperDialogBehavior","_polymer_iron_overlay_behavior_iron_overlay_behavior_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_2__","hostAttributes","role","tabindex","properties","modal","type","Boolean","value","__readied","observers","listeners","tap","ready","this","__prevNoCancelOnOutsideClick","noCancelOnOutsideClick","__prevNoCancelOnEscKey","noCancelOnEscKey","__prevWithBackdrop","withBackdrop","_modalChanged","readied","_updateClosingReasonConfirmed","confirmed","closingReason","_onDialogClick","event","path","dom","i","l","indexOf","target","hasAttribute","close","stopPropagation","IronOverlayBehavior","$_documentContainer","document","createElement","setAttribute","innerHTML","head","appendChild","content","Polymer","_template","html","_templateObject","is","behaviors","NeonAnimationRunnerBehavior","neon-animation-finish","_renderOpened","cancelAnimation","playAnimation","_renderClosed","_onNeonAnimationFinish","opened","_finishRenderOpened","_finishRenderClosed","IronValidatableBehavior","IronControlState","observer","String","notify","bindValue","rows","Number","maxRows","autocomplete","autofocus","inputmode","placeholder","readonly","required","minlength","maxlength","label","input","textarea","$","selectionStart","selectionEnd","attached","navigator","userAgent","match","style","marginLeft","validate","valid","validity","hasValidator","call","invalid","fire","_bindValueChanged","_valueChanged","mirror","_valueForMirror","_onInput","eventPath","_constrain","tokens","_tokens","length","slice","push","join","replace","split","_updateCached","paper_textarea_templateObject","PaperInputBehavior","IronFormElementBehavior","_ariaLabelledBy","_ariaDescribedBy","start","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","_ariaDescribedByChanged","ariaDescribedBy","inputElement","until","_lib_parts_js__WEBPACK_IMPORTED_MODULE_0__","_lit_html_js__WEBPACK_IMPORTED_MODULE_1__","_state","WeakMap","Object","_len","arguments","args","Array","_key","part","state","get","undefined","lastRenderedIndex","values","set","previousValues","previousLength","_loop2","then","setValue","Promise","resolve","resolvedValue","index","commit","_loop"],"mappings":"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","file":"chunk.f0fd51952554bf72f86c.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronOverlayBehavior} from '@polymer/iron-overlay-behavior/iron-overlay-behavior.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n  Use `Polymer.PaperDialogBehavior` and `paper-dialog-shared-styles.html` to\n  implement a Material Design dialog.\n\n  For example, if `<paper-dialog-impl>` implements this behavior:\n\n      <paper-dialog-impl>\n          <h2>Header</h2>\n          <div>Dialog body</div>\n          <div class=\"buttons\">\n              <paper-button dialog-dismiss>Cancel</paper-button>\n              <paper-button dialog-confirm>Accept</paper-button>\n          </div>\n      </paper-dialog-impl>\n\n  `paper-dialog-shared-styles.html` provide styles for a header, content area,\n  and an action area for buttons. Use the `<h2>` tag for the header and the\n  `buttons` class for the action area. You can use the `paper-dialog-scrollable`\n  element (in its own repository) if you need a scrolling content area.\n\n  Use the `dialog-dismiss` and `dialog-confirm` attributes on interactive\n  controls to close the dialog. If the user dismisses the dialog with\n  `dialog-confirm`, the `closingReason` will update to include `confirmed:\n  true`.\n\n  ### Accessibility\n\n  This element has `role=\"dialog\"` by default. Depending on the context, it may\n  be more appropriate to override this attribute with `role=\"alertdialog\"`.\n\n  If `modal` is set, the element will prevent the focus from exiting the\n  element. It will also ensure that focus remains in the dialog.\n\n  @hero hero.svg\n  @demo demo/index.html\n  @polymerBehavior PaperDialogBehavior\n */\nexport const PaperDialogBehaviorImpl = {\n\n  hostAttributes: {'role': 'dialog', 'tabindex': '-1'},\n\n  properties: {\n\n    /**\n     * If `modal` is true, this implies `no-cancel-on-outside-click`,\n     * `no-cancel-on-esc-key` and `with-backdrop`.\n     */\n    modal: {type: Boolean, value: false},\n\n    __readied: {type: Boolean, value: false}\n\n  },\n\n  observers: ['_modalChanged(modal, __readied)'],\n\n  listeners: {'tap': '_onDialogClick'},\n\n  /**\n   * @return {void}\n   */\n  ready: function() {\n    // Only now these properties can be read.\n    this.__prevNoCancelOnOutsideClick = this.noCancelOnOutsideClick;\n    this.__prevNoCancelOnEscKey = this.noCancelOnEscKey;\n    this.__prevWithBackdrop = this.withBackdrop;\n    this.__readied = true;\n  },\n\n  _modalChanged: function(modal, readied) {\n    // modal implies noCancelOnOutsideClick, noCancelOnEscKey and withBackdrop.\n    // We need to wait for the element to be ready before we can read the\n    // properties values.\n    if (!readied) {\n      return;\n    }\n\n    if (modal) {\n      this.__prevNoCancelOnOutsideClick = this.noCancelOnOutsideClick;\n      this.__prevNoCancelOnEscKey = this.noCancelOnEscKey;\n      this.__prevWithBackdrop = this.withBackdrop;\n      this.noCancelOnOutsideClick = true;\n      this.noCancelOnEscKey = true;\n      this.withBackdrop = true;\n    } else {\n      // If the value was changed to false, let it false.\n      this.noCancelOnOutsideClick =\n          this.noCancelOnOutsideClick && this.__prevNoCancelOnOutsideClick;\n      this.noCancelOnEscKey =\n          this.noCancelOnEscKey && this.__prevNoCancelOnEscKey;\n      this.withBackdrop = this.withBackdrop && this.__prevWithBackdrop;\n    }\n  },\n\n  _updateClosingReasonConfirmed: function(confirmed) {\n    this.closingReason = this.closingReason || {};\n    this.closingReason.confirmed = confirmed;\n  },\n\n  /**\n   * Will dismiss the dialog if user clicked on an element with dialog-dismiss\n   * or dialog-confirm attribute.\n   */\n  _onDialogClick: function(event) {\n    // Search for the element with dialog-confirm or dialog-dismiss,\n    // from the root target until this (excluded).\n    var path = dom(event).path;\n    for (var i = 0, l = path.indexOf(this); i < l; i++) {\n      var target = path[i];\n      if (target.hasAttribute &&\n          (target.hasAttribute('dialog-dismiss') ||\n           target.hasAttribute('dialog-confirm'))) {\n        this._updateClosingReasonConfirmed(\n            target.hasAttribute('dialog-confirm'));\n        this.close();\n        event.stopPropagation();\n        break;\n      }\n    }\n  }\n\n};\n\n/** @polymerBehavior */\nexport const PaperDialogBehavior =\n    [IronOverlayBehavior, PaperDialogBehaviorImpl];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n### Styling\n\nThe following custom properties and mixins are available for styling.\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dialog-background-color` | Dialog background color | `--primary-background-color`\n`--paper-dialog-color` | Dialog foreground color | `--primary-text-color`\n`--paper-dialog` | Mixin applied to the dialog | `{}`\n`--paper-dialog-title` | Mixin applied to the title (`<h2>`) element | `{}`\n`--paper-dialog-button-color` | Button area foreground color | `--default-primary-color`\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport '@polymer/paper-styles/shadow.js';\nconst $_documentContainer = document.createElement('template');\n$_documentContainer.setAttribute('style', 'display: none;');\n\n$_documentContainer.innerHTML = `<dom-module id=\"paper-dialog-shared-styles\">\n  <template>\n    <style>\n      :host {\n        display: block;\n        margin: 24px 40px;\n\n        background: var(--paper-dialog-background-color, var(--primary-background-color));\n        color: var(--paper-dialog-color, var(--primary-text-color));\n\n        @apply --paper-font-body1;\n        @apply --shadow-elevation-16dp;\n        @apply --paper-dialog;\n      }\n\n      :host > ::slotted(*) {\n        margin-top: 20px;\n        padding: 0 24px;\n      }\n\n      :host > ::slotted(.no-padding) {\n        padding: 0;\n      }\n\n      \n      :host > ::slotted(*:first-child) {\n        margin-top: 24px;\n      }\n\n      :host > ::slotted(*:last-child) {\n        margin-bottom: 24px;\n      }\n\n      /* In 1.x, this selector was \\`:host > ::content h2\\`. In 2.x <slot> allows\n      to select direct children only, which increases the weight of this\n      selector, so we have to re-define first-child/last-child margins below. */\n      :host > ::slotted(h2) {\n        position: relative;\n        margin: 0;\n\n        @apply --paper-font-title;\n        @apply --paper-dialog-title;\n      }\n\n      /* Apply mixin again, in case it sets margin-top. */\n      :host > ::slotted(h2:first-child) {\n        margin-top: 24px;\n        @apply --paper-dialog-title;\n      }\n\n      /* Apply mixin again, in case it sets margin-bottom. */\n      :host > ::slotted(h2:last-child) {\n        margin-bottom: 24px;\n        @apply --paper-dialog-title;\n      }\n\n      :host > ::slotted(.paper-dialog-buttons),\n      :host > ::slotted(.buttons) {\n        position: relative;\n        padding: 8px 8px 8px 24px;\n        margin: 0;\n\n        color: var(--paper-dialog-button-color, var(--primary-color));\n\n        @apply --layout-horizontal;\n        @apply --layout-end-justified;\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-dialog-behavior/paper-dialog-shared-styles.js';\n\nimport {NeonAnimationRunnerBehavior} from '@polymer/neon-animation/neon-animation-runner-behavior.js';\nimport {PaperDialogBehavior} from '@polymer/paper-dialog-behavior/paper-dialog-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Dialogs](https://www.google.com/design/spec/components/dialogs.html)\n\n`<paper-dialog>` is a dialog with Material Design styling and optional\nanimations when it is opened or closed. It provides styles for a header, content\narea, and an action area for buttons. You can use the\n`<paper-dialog-scrollable>` element (in its own repository) if you need a\nscrolling content area. To autofocus a specific child element after opening the\ndialog, give it the `autofocus` attribute. See `Polymer.PaperDialogBehavior` and\n`Polymer.IronOverlayBehavior` for specifics.\n\nFor example, the following code implements a dialog with a header, scrolling\ncontent area and buttons. Focus will be given to the `dialog-confirm` button\nwhen the dialog is opened.\n\n    <paper-dialog>\n      <h2>Header</h2>\n      <paper-dialog-scrollable>\n        Lorem ipsum...\n      </paper-dialog-scrollable>\n      <div class=\"buttons\">\n        <paper-button dialog-dismiss>Cancel</paper-button>\n        <paper-button dialog-confirm autofocus>Accept</paper-button>\n      </div>\n    </paper-dialog>\n\n### Styling\n\nSee the docs for `Polymer.PaperDialogBehavior` for the custom properties\navailable for styling this element.\n\n### Animations\n\nSet the `entry-animation` and/or `exit-animation` attributes to add an animation\nwhen the dialog is opened or closed. See the documentation in\n[PolymerElements/neon-animation](https://github.com/PolymerElements/neon-animation)\nfor more info.\n\nFor example:\n\n    <script type=\"module\">\n      import '@polymer/neon-animation/animations/fade-out-animation.js';\n      import '@polymer/neon-animation/animations/scale-up-animation.js';\n    </script>\n\n    <paper-dialog entry-animation=\"scale-up-animation\"\n                  exit-animation=\"fade-out-animation\">\n      <h2>Header</h2>\n      <div>Dialog body</div>\n    </paper-dialog>\n\n### Accessibility\n\nSee the docs for `Polymer.PaperDialogBehavior` for accessibility features\nimplemented by this element.\n\n@group Paper Elements\n@element paper-dialog\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-dialog-shared-styles\"></style>\n    <slot></slot>\n`,\n\n  is: 'paper-dialog',\n  behaviors: [PaperDialogBehavior, NeonAnimationRunnerBehavior],\n  listeners: {'neon-animation-finish': '_onNeonAnimationFinish'},\n\n  _renderOpened: function() {\n    this.cancelAnimation();\n    this.playAnimation('entry');\n  },\n\n  _renderClosed: function() {\n    this.cancelAnimation();\n    this.playAnimation('exit');\n  },\n\n  _onNeonAnimationFinish: function() {\n    if (this.opened) {\n      this._finishRenderOpened();\n    } else {\n      this._finishRenderClosed();\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in\nheight as more lines of input are entered. Unless an explicit height or the\n`maxRows` property is set, it will never scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id$=\"[[_inputId]]\" aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator$=\"[[validator]]\" disabled$=\"[[disabled]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" autocapitalize$=\"[[autocapitalize]]\" rows$=\"[[rows]]\" max-rows$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type {number}\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type {number}\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isPrimitive} from '../lib/parts.js';\nimport {directive, Part} from '../lit-html.js';\n\ninterface AsyncState {\n  /**\n   * The last rendered index of a call to until(). A value only renders if its\n   * index is less than the `lastRenderedIndex`.\n   */\n  lastRenderedIndex: number;\n\n  values: unknown[];\n}\n\nconst _state = new WeakMap<Part, AsyncState>();\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive((...args: unknown[]) => (part: Part) => {\n  let state = _state.get(part)!;\n  if (state === undefined) {\n    state = {\n      lastRenderedIndex: _infinity,\n      values: [],\n    };\n    _state.set(part, state);\n  }\n  const previousValues = state.values;\n  let previousLength = previousValues.length;\n  state.values = args;\n\n  for (let i = 0; i < args.length; i++) {\n    // If we've rendered a higher-priority value already, stop.\n    if (i > state.lastRenderedIndex) {\n      break;\n    }\n\n    const value = args[i];\n\n    // Render non-Promise values immediately\n    if (isPrimitive(value) ||\n        typeof (value as {then?: unknown}).then !== 'function') {\n      part.setValue(value);\n      state.lastRenderedIndex = i;\n      // Since a lower-priority value will never overwrite a higher-priority\n      // synchronous value, we can stop processsing now.\n      break;\n    }\n\n    // If this is a Promise we've already handled, skip it.\n    if (i < previousLength && value === previousValues[i]) {\n      continue;\n    }\n\n    // We have a Promise that we haven't seen before, so priorities may have\n    // changed. Forget what we rendered before.\n    state.lastRenderedIndex = _infinity;\n    previousLength = 0;\n\n    Promise.resolve(value).then((resolvedValue: unknown) => {\n      const index = state.values.indexOf(value);\n      // If state.values doesn't contain the value, we've re-rendered without\n      // the value, so don't render it. Then, only render if the value is\n      // higher-priority than what's already been rendered.\n      if (index > -1 && index < state.lastRenderedIndex) {\n        state.lastRenderedIndex = index;\n        part.setValue(resolvedValue);\n        part.commit();\n      }\n    });\n  }\n});\n"],"sourceRoot":""}