{"version":3,"sources":["webpack:///./src/common/dom/load_resource.ts","webpack:///./src/util/custom-panel/load-custom-panel.ts","webpack:///./src/util/custom-panel/create-custom-panel-element.ts","webpack:///./src/util/custom-panel/set-custom-panel-properties.ts","webpack:///./src/panels/custom/ha-panel-custom.ts"],"names":["__webpack_require__","d","__webpack_exports__","loadCSS","loadJS","loadModule","_load","tag","url","type","Promise","resolve","reject","element","document","createElement","attr","parent","onload","onerror","async","rel","appendChild","loadCustomPanel","_common_dom_load_resource__WEBPACK_IMPORTED_MODULE_0__","JS_CACHE","panelConfig","html_url","toLoad","e","then","bind","embed_iframe","push","all","importHrefPromise","js_url","module_url","createCustomPanelElement","tagName","name","setCustomPanelProperties","root","properties","setProperties","Object","keys","forEach","key","HaPanelCustom","_decorate","_initialize","_UpdatingElement","[object Object]","args","super","this","F","kind","decorators","property","value","path","replace","navigate","initialize","panel","hass","narrow","route","_setProperties","_get","_getPrototypeOf","prototype","call","_cleanupPanel","changedProps","has","get","_createPanel","props","window","customPanel","undefined","lastChild","removeChild","config","_panel_custom","tempA","href","trust_external","location","hostname","includes","confirm","localize","alert","innerHTML","trim","iframeDoc","querySelector","contentWindow","open","write","customPanelJS","close","UpdatingElement","customElements","define"],"mappings":"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","file":"chunk.2aa0b687037c7f83ca8b.js","sourcesContent":["// Load a resource and get a promise when loading done.\n// From: https://davidwalsh.name/javascript-loader\n\nconst _load = (\n  tag: \"link\" | \"script\" | \"img\",\n  url: string,\n  type?: \"module\"\n) => {\n  // This promise will be used by Promise.all to determine success or failure\n  return new Promise((resolve, reject) => {\n    const element = document.createElement(tag);\n    let attr = \"src\";\n    let parent = \"body\";\n\n    // Important success and error for the promise\n    element.onload = () => resolve(url);\n    element.onerror = () => reject(url);\n\n    // Need to set different attributes depending on tag type\n    switch (tag) {\n      case \"script\":\n        (element as HTMLScriptElement).async = true;\n        if (type) {\n          (element as HTMLScriptElement).type = type;\n        }\n        break;\n      case \"link\":\n        (element as HTMLLinkElement).type = \"text/css\";\n        (element as HTMLLinkElement).rel = \"stylesheet\";\n        attr = \"href\";\n        parent = \"head\";\n    }\n\n    // Inject into document to kick off loading\n    element[attr] = url;\n    document[parent].appendChild(element);\n  });\n};\n\nexport const loadCSS = (url: string) => _load(\"link\", url);\nexport const loadJS = (url: string) => _load(\"script\", url);\nexport const loadImg = (url: string) => _load(\"img\", url);\nexport const loadModule = (url: string) => _load(\"script\", url, \"module\");\n","import { loadJS, loadModule } from \"../../common/dom/load_resource\";\n\n// Make sure we only import every JS-based panel once (HTML import has this built-in)\nconst JS_CACHE = {};\n\nexport const loadCustomPanel = (panelConfig): Promise<unknown> => {\n  if (panelConfig.html_url) {\n    const toLoad = [\n      import(/* webpackChunkName: \"import-href-polyfill\" */ \"../../resources/html-import/import-href\"),\n    ];\n\n    if (!panelConfig.embed_iframe) {\n      toLoad.push(\n        import(/* webpackChunkName: \"legacy-support\" */ \"../legacy-support\")\n      );\n    }\n\n    return Promise.all(toLoad).then(([{ importHrefPromise }]) =>\n      importHrefPromise(panelConfig.html_url)\n    );\n  }\n  if (panelConfig.js_url) {\n    if (!(panelConfig.js_url in JS_CACHE)) {\n      JS_CACHE[panelConfig.js_url] = loadJS(panelConfig.js_url);\n    }\n    return JS_CACHE[panelConfig.js_url];\n  }\n  if (panelConfig.module_url) {\n    return loadModule(panelConfig.module_url);\n  }\n  return Promise.reject(\"No valid url found in panel config.\");\n};\n","export const createCustomPanelElement = (panelConfig) => {\n  // Legacy support. Custom panels used to have to define element ha-panel-{name}\n  const tagName =\n    \"html_url\" in panelConfig\n      ? `ha-panel-${panelConfig.name}`\n      : panelConfig.name;\n  return document.createElement(tagName);\n};\n","export const setCustomPanelProperties = (root, properties) => {\n  if (\"setProperties\" in root) {\n    root.setProperties(properties);\n  } else {\n    Object.keys(properties).forEach((key) => {\n      root[key] = properties[key];\n    });\n  }\n};\n","import { property, PropertyValues, UpdatingElement } from \"lit-element\";\nimport { loadCustomPanel } from \"../../util/custom-panel/load-custom-panel\";\nimport { createCustomPanelElement } from \"../../util/custom-panel/create-custom-panel-element\";\nimport { setCustomPanelProperties } from \"../../util/custom-panel/set-custom-panel-properties\";\nimport { HomeAssistant, Route } from \"../../types\";\nimport { CustomPanelInfo } from \"../../data/panel_custom\";\nimport { navigate } from \"../../common/navigate\";\n\ndeclare global {\n  interface Window {\n    customPanel: HaPanelCustom | undefined;\n  }\n}\n\nexport class HaPanelCustom extends UpdatingElement {\n  @property() public hass!: HomeAssistant;\n  @property() public narrow!: boolean;\n  @property() public route!: Route;\n  @property() public panel!: CustomPanelInfo;\n  private _setProperties?: (props: {}) => void | undefined;\n\n  // Since navigate fires events on `window`, we need to expose this as a function\n  // to allow custom panels to forward their location changes to the main window\n  // instead of their iframe window.\n  public navigate = (path: string, replace?: boolean) =>\n    navigate(this, path, replace);\n\n  public registerIframe(initialize, setProperties) {\n    initialize(this.panel, {\n      hass: this.hass,\n      narrow: this.narrow,\n      route: this.route,\n    });\n    this._setProperties = setProperties;\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._cleanupPanel();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"panel\")) {\n      // Clean up old things if we had a panel\n      if (changedProps.get(\"panel\")) {\n        this._cleanupPanel();\n      }\n      this._createPanel(this.panel);\n      return;\n    }\n    if (!this._setProperties) {\n      return;\n    }\n    const props = {};\n    // @ts-ignore\n    for (const key of changedProps.keys()) {\n      props[key] = this[key];\n    }\n    this._setProperties(props);\n  }\n\n  private _cleanupPanel() {\n    delete window.customPanel;\n    this._setProperties = undefined;\n    while (this.lastChild) {\n      this.removeChild(this.lastChild);\n    }\n  }\n\n  private _createPanel(panel: CustomPanelInfo) {\n    const config = panel.config!._panel_custom;\n\n    const tempA = document.createElement(\"a\");\n    tempA.href = config.html_url || config.js_url || config.module_url || \"\";\n\n    if (\n      !config.trust_external &&\n      ![\"localhost\", \"127.0.0.1\", location.hostname].includes(tempA.hostname)\n    ) {\n      if (\n        !confirm(\n          `${this.hass.localize(\n            \"ui.panel.custom.external_panel.question_trust\",\n            \"name\",\n            config.name,\n            \"link\",\n            tempA.href\n          )}\n\n           ${this.hass.localize(\n             \"ui.panel.custom.external_panel.complete_access\"\n           )}\n\n           (${this.hass.localize(\n             \"ui.panel.custom.external_panel.hide_message\"\n           )})`\n        )\n      ) {\n        return;\n      }\n    }\n\n    if (!config.embed_iframe) {\n      loadCustomPanel(config).then(\n        () => {\n          const element = createCustomPanelElement(config);\n          this._setProperties = (props) =>\n            setCustomPanelProperties(element, props);\n          setCustomPanelProperties(element, {\n            panel,\n            hass: this.hass,\n            narrow: this.narrow,\n            route: this.route,\n          });\n          this.appendChild(element);\n        },\n        () => {\n          alert(`Unable to load custom panel from ${tempA.href}`);\n        }\n      );\n      return;\n    }\n\n    window.customPanel = this;\n    this.innerHTML = `\n    <style>\n      iframe {\n        border: 0;\n        width: 100%;\n        height: 100%;\n        display: block;\n        background-color: var(--primary-background-color);\n      }\n    </style>\n    <iframe></iframe>\n    `.trim();\n    const iframeDoc = this.querySelector(\"iframe\")!.contentWindow!.document;\n    iframeDoc.open();\n    iframeDoc.write(\n      `<!doctype html><script src='${window.customPanelJS}'></script>`\n    );\n    iframeDoc.close();\n  }\n}\n\ncustomElements.define(\"ha-panel-custom\", HaPanelCustom);\n"],"sourceRoot":""}