{"version":3,"sources":["webpack:///./src/data/input_select.ts","webpack:///./src/data/input_text.ts","webpack:///./src/data/input_datetime.ts","webpack:///./src/data/input_boolean.ts","webpack:///./src/data/input_number.ts","webpack:///./src/panels/config/helpers/forms/ha-input_boolean-form.ts","webpack:///./src/panels/config/helpers/forms/ha-input_text-form.ts","webpack:///./src/panels/config/helpers/forms/ha-input_datetime-form.ts","webpack:///./src/panels/config/helpers/forms/ha-input_select-form.ts","webpack:///./src/panels/config/helpers/forms/ha-input_number-form.ts"],"names":["__webpack_require__","d","__webpack_exports__","setInputSelectOption","fetchInputSelect","createInputSelect","updateInputSelect","deleteInputSelect","hass","entity","option","callService","entity_id","callWS","type","values","Object","assign","id","updates","input_select_id","setValue","fetchInputText","createInputText","updateInputText","deleteInputText","value","split","input_text_id","setInputDateTimeValue","fetchInputDateTime","createInputDateTime","updateInputDateTime","deleteInputDateTime","entityId","time","date","param","input_datetime_id","fetchInputBoolean","createInputBoolean","updateInputBoolean","deleteInputBoolean","input_boolean_id","fetchInputNumber","createInputNumber","updateInputNumber","deleteInputNumber","input_number_id","customElement","_LitElement","[object Object]","args","super","_initialize","this","property","item","_item","_name","name","_icon","icon","updateComplete","then","_ref","_this$shadowRoot","shadowRoot","querySelector","focus","html","nameInvalid","trim","_valueChanged","localize","ev","new","stopPropagation","configValue","target","detail","newValue","fireEvent","haStyle","css","LitElement","_max","max","_min","min","_mode","mode","_pattern","pattern","_this$hass$userData","userData","showAdvanced","_modeChanged","has_time","has_date","includes","query","_options","options","length","map","index","_removeOption","_handleKeyAdd","_addOption","keyCode","input","_optionInput","async","showConfirmationDialog","title","text","splice","_item$max","_item$min","_step","step","_unit_of_measurement","unit_of_measurement","undefined"],"mappings":"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","file":"chunk.e2a3f128c2cf6cfa862c.js","sourcesContent":["import { HomeAssistant } from \"../types\";\n\nexport interface InputSelect {\n  id: string;\n  name: string;\n  options: string[];\n  icon?: string;\n  initial?: string;\n}\n\nexport interface InputSelectMutableParams {\n  name: string;\n  icon: string;\n  initial: string;\n  options: string[];\n}\n\nexport const setInputSelectOption = (\n  hass: HomeAssistant,\n  entity: string,\n  option: string\n) =>\n  hass.callService(\"input_select\", \"select_option\", {\n    option,\n    entity_id: entity,\n  });\n\nexport const fetchInputSelect = (hass: HomeAssistant) =>\n  hass.callWS<InputSelect[]>({ type: \"input_select/list\" });\n\nexport const createInputSelect = (\n  hass: HomeAssistant,\n  values: InputSelectMutableParams\n) =>\n  hass.callWS<InputSelect>({\n    type: \"input_select/create\",\n    ...values,\n  });\n\nexport const updateInputSelect = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputSelectMutableParams>\n) =>\n  hass.callWS<InputSelect>({\n    type: \"input_select/update\",\n    input_select_id: id,\n    ...updates,\n  });\n\nexport const deleteInputSelect = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_select/delete\",\n    input_select_id: id,\n  });\n","import { HomeAssistant } from \"../types\";\n\nexport interface InputText {\n  id: string;\n  name: string;\n  icon?: string;\n  initial?: string;\n  min?: number;\n  max?: number;\n  pattern?: string;\n  mode?: \"text\" | \"password\";\n}\n\nexport interface InputTextMutableParams {\n  name: string;\n  icon: string;\n  initial: string;\n  min: number;\n  max: number;\n  pattern: string;\n  mode: \"text\" | \"password\";\n}\n\nexport const setValue = (hass: HomeAssistant, entity: string, value: string) =>\n  hass.callService(entity.split(\".\", 1)[0], \"set_value\", {\n    value,\n    entity_id: entity,\n  });\n\nexport const fetchInputText = (hass: HomeAssistant) =>\n  hass.callWS<InputText[]>({ type: \"input_text/list\" });\n\nexport const createInputText = (\n  hass: HomeAssistant,\n  values: InputTextMutableParams\n) =>\n  hass.callWS<InputText>({\n    type: \"input_text/create\",\n    ...values,\n  });\n\nexport const updateInputText = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputTextMutableParams>\n) =>\n  hass.callWS<InputText>({\n    type: \"input_text/update\",\n    input_text_id: id,\n    ...updates,\n  });\n\nexport const deleteInputText = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_text/delete\",\n    input_text_id: id,\n  });\n","import { HomeAssistant } from \"../types\";\n\nexport interface InputDateTime {\n  id: string;\n  name: string;\n  icon?: string;\n  initial?: string;\n  has_time: boolean;\n  has_date: boolean;\n}\n\nexport interface InputDateTimeMutableParams {\n  name: string;\n  icon: string;\n  initial: string;\n  has_time: boolean;\n  has_date: boolean;\n}\n\nexport const setInputDateTimeValue = (\n  hass: HomeAssistant,\n  entityId: string,\n  time: string | undefined = undefined,\n  date: string | undefined = undefined\n) => {\n  const param = { entity_id: entityId, time, date };\n  hass.callService(entityId.split(\".\", 1)[0], \"set_datetime\", param);\n};\n\nexport const fetchInputDateTime = (hass: HomeAssistant) =>\n  hass.callWS<InputDateTime[]>({ type: \"input_datetime/list\" });\n\nexport const createInputDateTime = (\n  hass: HomeAssistant,\n  values: InputDateTimeMutableParams\n) =>\n  hass.callWS<InputDateTime>({\n    type: \"input_datetime/create\",\n    ...values,\n  });\n\nexport const updateInputDateTime = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputDateTimeMutableParams>\n) =>\n  hass.callWS<InputDateTime>({\n    type: \"input_datetime/update\",\n    input_datetime_id: id,\n    ...updates,\n  });\n\nexport const deleteInputDateTime = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_datetime/delete\",\n    input_datetime_id: id,\n  });\n","import { HomeAssistant } from \"../types\";\n\nexport interface InputBoolean {\n  id: string;\n  name: string;\n  icon?: string;\n  initial?: boolean;\n}\n\nexport interface InputBooleanMutableParams {\n  name: string;\n  icon: string;\n  initial: boolean;\n}\n\nexport const fetchInputBoolean = (hass: HomeAssistant) =>\n  hass.callWS<InputBoolean[]>({ type: \"input_boolean/list\" });\n\nexport const createInputBoolean = (\n  hass: HomeAssistant,\n  values: InputBooleanMutableParams\n) =>\n  hass.callWS<InputBoolean>({\n    type: \"input_boolean/create\",\n    ...values,\n  });\n\nexport const updateInputBoolean = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputBooleanMutableParams>\n) =>\n  hass.callWS<InputBoolean>({\n    type: \"input_boolean/update\",\n    input_boolean_id: id,\n    ...updates,\n  });\n\nexport const deleteInputBoolean = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_boolean/delete\",\n    input_boolean_id: id,\n  });\n","import { HomeAssistant } from \"../types\";\n\nexport interface InputNumber {\n  id: string;\n  name: string;\n  min: number;\n  max: number;\n  icon?: string;\n  initial?: number;\n  step?: number;\n  mode?: \"box\" | \"slider\";\n  unit_of_measurement?: string;\n}\n\nexport interface InputNumberMutableParams {\n  name: string;\n  icon: string;\n  initial: number;\n  min: number;\n  max: number;\n  step: number;\n  mode: \"box\" | \"slider\";\n  unit_of_measurement?: string;\n}\n\nexport const fetchInputNumber = (hass: HomeAssistant) =>\n  hass.callWS<InputNumber[]>({ type: \"input_number/list\" });\n\nexport const createInputNumber = (\n  hass: HomeAssistant,\n  values: InputNumberMutableParams\n) =>\n  hass.callWS<InputNumber>({\n    type: \"input_number/create\",\n    ...values,\n  });\n\nexport const updateInputNumber = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputNumberMutableParams>\n) =>\n  hass.callWS<InputNumber>({\n    type: \"input_number/update\",\n    input_number_id: id,\n    ...updates,\n  });\n\nexport const deleteInputNumber = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_number/delete\",\n    input_number_id: id,\n  });\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\n\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/ha-icon-input\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { InputBoolean } from \"../../../../data/input_boolean\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { haStyle } from \"../../../../resources/styles\";\n\n@customElement(\"ha-input_boolean-form\")\nclass HaInputBooleanForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public new?: boolean;\n  private _item?: InputBoolean;\n  @property() private _name!: string;\n  @property() private _icon!: string;\n\n  set item(item: InputBoolean) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <br />\n        ${this.hass!.localize(\n          \"ui.dialogs.helper_settings.generic.initial_value_explain\"\n        )}\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_boolean-form\": HaInputBooleanForm;\n  }\n}\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\n\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/ha-icon-input\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { InputText } from \"../../../../data/input_text\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { haStyle } from \"../../../../resources/styles\";\n\n@customElement(\"ha-input_text-form\")\nclass HaInputTextForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public new?: boolean;\n  private _item?: InputText;\n  @property() private _name!: string;\n  @property() private _icon!: string;\n  @property() private _max?: number;\n  @property() private _min?: number;\n  @property() private _mode?: string;\n  @property() private _pattern?: string;\n\n  set item(item: InputText) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max || 100;\n      this._min = item.min || 0;\n      this._mode = item.mode || \"text\";\n      this._pattern = item.pattern;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"text\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <paper-input\n                .value=${this._min}\n                .configValue=${\"min\"}\n                type=\"number\"\n                min=\"0\"\n                max=\"255\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.min\"\n                )}\n              ></paper-input>\n              <paper-input\n                .value=${this._max}\n                .configValue=${\"max\"}\n                min=\"0\"\n                max=\"255\"\n                type=\"number\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.max\"\n                )}\n              ></paper-input>\n              <div class=\"layout horizontal center justified\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.input_text.mode\"\n                )}\n                <paper-radio-group\n                  .selected=${this._mode}\n                  @selected-changed=${this._modeChanged}\n                >\n                  <paper-radio-button name=\"text\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_text.text\"\n                    )}\n                  </paper-radio-button>\n                  <paper-radio-button name=\"password\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_text.password\"\n                    )}\n                  </paper-radio-button>\n                </paper-radio-group>\n              </div>\n              <paper-input\n                .value=${this._pattern}\n                .configValue=${\"pattern\"}\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.pattern\"\n                )}\n              ></paper-input>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: ev.detail.value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n        ha-paper-dropdown-menu {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_text-form\": HaInputTextForm;\n  }\n}\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\n\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/ha-icon-input\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { InputDateTime } from \"../../../../data/input_datetime\";\n\n@customElement(\"ha-input_datetime-form\")\nclass HaInputDateTimeForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public new?: boolean;\n  private _item?: InputDateTime;\n  @property() private _name!: string;\n  @property() private _icon!: string;\n  @property() private _mode!: \"date\" | \"time\" | \"datetime\";\n\n  set item(item: InputDateTime) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._mode =\n        item.has_time && item.has_date\n          ? \"datetime\"\n          : item.has_time\n          ? \"time\"\n          : \"date\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._mode = \"date\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <br />\n        ${this.hass.localize(\"ui.dialogs.helper_settings.input_datetime.mode\")}:\n        <br />\n        <paper-radio-group\n          .selected=${this._mode}\n          @selected-changed=${this._modeChanged}\n        >\n          <paper-radio-button name=\"date\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.date\"\n            )}\n          </paper-radio-button>\n          <paper-radio-button name=\"time\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.time\"\n            )}\n          </paper-radio-button>\n          <paper-radio-button name=\"datetime\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.datetime\"\n            )}\n          </paper-radio-button>\n        </paper-radio-group>\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    const mode = ev.detail.value;\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._item,\n        has_time: [\"time\", \"datetime\"].includes(mode),\n        has_date: [\"date\", \"datetime\"].includes(mode),\n      },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_datetime-form\": HaInputDateTimeForm;\n  }\n}\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  property,\n  customElement,\n  query,\n} from \"lit-element\";\n\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/ha-icon-input\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { InputSelect } from \"../../../../data/input_select\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\n\n@customElement(\"ha-input_select-form\")\nclass HaInputSelectForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public new?: boolean;\n  private _item?: InputSelect;\n  @property() private _name!: string;\n  @property() private _icon!: string;\n  @property() private _options: string[] = [];\n  @query(\"#option_input\") private _optionInput?: PaperInputElement;\n\n  set item(item: InputSelect) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._options = item.options || [];\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._options = [];\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        ${this.hass!.localize(\n          \"ui.dialogs.helper_settings.input_select.options\"\n        )}:\n        ${this._options.length\n          ? this._options.map((option, index) => {\n              return html`\n                <paper-item class=\"option\">\n                  <paper-item-body> ${option} </paper-item-body>\n                  <paper-icon-button\n                    .index=${index}\n                    .title=${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_select.remove_option\"\n                    )}\n                    @click=${this._removeOption}\n                    icon=\"hass:delete\"\n                  ></paper-icon-button>\n                </paper-item>\n              `;\n            })\n          : html`\n              <paper-item>\n                ${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_select.no_options\"\n                )}\n              </paper-item>\n            `}\n        <div class=\"layout horizontal bottom\">\n          <paper-input\n            class=\"flex-auto\"\n            id=\"option_input\"\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add_option\"\n            )}\n            @keydown=${this._handleKeyAdd}\n          ></paper-input>\n          <mwc-button @click=${this._addOption}\n            >${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add\"\n            )}</mwc-button\n          >\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleKeyAdd(ev: KeyboardEvent) {\n    ev.stopPropagation();\n    if (ev.keyCode !== 13) {\n      return;\n    }\n    this._addOption();\n  }\n\n  private _addOption() {\n    const input = this._optionInput;\n    if (!input || !input.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options: [...this._options, input.value] },\n    });\n    input.value = \"\";\n  }\n\n  private async _removeOption(ev: Event) {\n    if (\n      !(await showConfirmationDialog(this, {\n        title: \"Delete this item?\",\n        text: \"Are you sure you want to delete this item?\",\n      }))\n    ) {\n      return;\n    }\n    const index = (ev.target as any).index;\n    const options = [...this._options];\n    options.splice(index, 1);\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .option {\n          border: 1px solid var(--divider-color);\n          border-radius: 4px;\n          margin-top: 4px;\n        }\n        mwc-button {\n          margin-left: 8px;\n        }\n        ha-paper-dropdown-menu {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_select-form\": HaInputSelectForm;\n  }\n}\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\n\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/ha-icon-input\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { InputNumber } from \"../../../../data/input_number\";\n\n@customElement(\"ha-input_number-form\")\nclass HaInputNumberForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public new?: boolean;\n  private _item?: Partial<InputNumber>;\n  @property() private _name!: string;\n  @property() private _icon!: string;\n  @property() private _max?: number;\n  @property() private _min?: number;\n  @property() private _mode?: string;\n  @property() private _step?: number;\n  // tslint:disable-next-line: variable-name\n  @property() private _unit_of_measurement?: string;\n\n  set item(item: InputNumber) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max ?? 100;\n      this._min = item.min ?? 0;\n      this._mode = item.mode || \"slider\";\n      this._step = item.step || 1;\n      this._unit_of_measurement = item.unit_of_measurement;\n    } else {\n      this._item = {\n        min: 0,\n        max: 0,\n      };\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"slider\";\n      this._step = 1;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <paper-input\n          .value=${this._min}\n          .configValue=${\"min\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.min\"\n          )}\n        ></paper-input>\n        <paper-input\n          .value=${this._max}\n          .configValue=${\"max\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.max\"\n          )}\n        ></paper-input>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <div class=\"layout horizontal center justified\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.input_number.mode\"\n                )}\n                <paper-radio-group\n                  .selected=${this._mode}\n                  @selected-changed=${this._modeChanged}\n                >\n                  <paper-radio-button name=\"slider\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_number.slider\"\n                    )}\n                  </paper-radio-button>\n                  <paper-radio-button name=\"box\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_number.box\"\n                    )}\n                  </paper-radio-button>\n                </paper-radio-group>\n              </div>\n              <paper-input\n                .value=${this._step}\n                .configValue=${\"step\"}\n                type=\"number\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_number.step\"\n                )}\n              ></paper-input>\n\n              <paper-input\n                .value=${this._unit_of_measurement}\n                .configValue=${\"unit_of_measurement\"}\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_number.unit_of_measurement\"\n                )}\n              ></paper-input>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: ev.detail.value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (value === undefined || value === \"\") {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        ha-paper-dropdown-menu {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_number-form\": HaInputNumberForm;\n  }\n}\n"],"sourceRoot":""}