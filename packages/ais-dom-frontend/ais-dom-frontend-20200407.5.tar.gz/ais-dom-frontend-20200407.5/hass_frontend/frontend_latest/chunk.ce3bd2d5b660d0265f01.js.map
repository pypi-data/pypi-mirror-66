{"version":3,"sources":["webpack:///./src/panels/lovelace/common/process-config-entities.ts","webpack:///./src/panels/lovelace/common/compute-tooltip.ts","webpack:///./src/panels/lovelace/components/hui-buttons-base.ts","webpack:///./src/panels/lovelace/special-rows/hui-buttons-row.ts"],"names":["__webpack_require__","d","__webpack_exports__","processConfigEntities","_common_entity_valid_entity_id__WEBPACK_IMPORTED_MODULE_0__","entities","Array","isArray","Error","map","entityConf","index","type","config","entity","isValidEntityId","computeTooltip","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_0__","hass","title","stateName","tooltip","states","computeStateName","tap_action","hold_action","tapTooltip","computeActionTooltip","holdTooltip","state","isHold","action","localize","navigation_path","url_path","service","_decorate","customElement","_initialize","_LitElement","F","[object Object]","args","super","this","kind","decorators","property","key","value","queryAll","_this$configEntities","_hass","entitiesShowingIcons","configEntities","filter","show_icon","_badges","forEach","badge","stateObj","html","_handleAction","actionHandler","hasHold","hasAction","hasDoubleClick","double_tap_action","icon","image","show_name","name","ev","currentTarget","handleAction","Object","assign","detail","static","css","LitElement","HuiButtonsRow","_configEntities","requestUpdate"],"mappings":"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","file":"chunk.ce3bd2d5b660d0265f01.js","sourcesContent":["// Parse array of entity objects from config\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\nexport const processConfigEntities = <T extends EntityConfig>(\n  entities: Array<T | string>\n): T[] => {\n  if (!entities || !Array.isArray(entities)) {\n    throw new Error(\"Entities need to be an array\");\n  }\n\n  return entities.map(\n    (entityConf, index): T => {\n      if (\n        typeof entityConf === \"object\" &&\n        !Array.isArray(entityConf) &&\n        entityConf.type\n      ) {\n        return entityConf;\n      }\n\n      let config: T;\n\n      if (typeof entityConf === \"string\") {\n        // tslint:disable-next-line:no-object-literal-type-assertion\n        config = { entity: entityConf } as T;\n      } else if (typeof entityConf === \"object\" && !Array.isArray(entityConf)) {\n        if (!entityConf.entity) {\n          throw new Error(\n            `Entity object at position ${index} is missing entity field.`\n          );\n        }\n        config = entityConf as T;\n      } else {\n        throw new Error(`Invalid entity specified at position ${index}.`);\n      }\n\n      if (!isValidEntityId(config.entity)) {\n        throw new Error(\n          `Invalid entity ID at position ${index}: ${config.entity}`\n        );\n      }\n\n      return config;\n    }\n  );\n};\n","import { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { HomeAssistant } from \"../../../types\";\nimport { ActionConfig } from \"../../../data/lovelace\";\n\ninterface Config {\n  entity?: string;\n  title?: string;\n  tap_action?: ActionConfig;\n  hold_action?: ActionConfig;\n  double_tap_action?: ActionConfig;\n}\n\nexport const computeTooltip = (hass: HomeAssistant, config: Config): string => {\n  if (config.title === null) {\n    return \"\";\n  }\n\n  if (config.title) {\n    return config.title;\n  }\n\n  let stateName = \"\";\n  let tooltip = \"\";\n\n  if (config.entity) {\n    stateName =\n      config.entity in hass.states\n        ? computeStateName(hass.states[config.entity])\n        : config.entity;\n  }\n\n  if (!config.tap_action && !config.hold_action) {\n    return stateName;\n  }\n\n  const tapTooltip = config.tap_action\n    ? computeActionTooltip(hass, stateName, config.tap_action, false)\n    : \"\";\n  const holdTooltip = config.hold_action\n    ? computeActionTooltip(hass, stateName, config.hold_action, true)\n    : \"\";\n\n  const newline = tapTooltip && holdTooltip ? \"\\n\" : \"\";\n\n  tooltip = tapTooltip + newline + holdTooltip;\n\n  return tooltip;\n};\n\nfunction computeActionTooltip(\n  hass: HomeAssistant,\n  state: string,\n  config: ActionConfig,\n  isHold: boolean\n) {\n  if (!config || !config.action || config.action === \"none\") {\n    return \"\";\n  }\n\n  let tooltip =\n    (isHold\n      ? hass.localize(\"ui.panel.lovelace.cards.picture-elements.hold\")\n      : hass.localize(\"ui.panel.lovelace.cards.picture-elements.tap\")) + \" \";\n\n  switch (config.action) {\n    case \"navigate\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.navigate_to\",\n        \"location\",\n        config.navigation_path\n      )}`;\n      break;\n    case \"url\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.url\",\n        \"url_path\",\n        config.url_path\n      )}`;\n      break;\n    case \"toggle\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.toggle\",\n        \"name\",\n        state\n      )}`;\n      break;\n    case \"call-service\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.call_service\",\n        \"name\",\n        config.service\n      )}`;\n      break;\n    case \"more-info\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.more_info\",\n        \"name\",\n        state\n      )}`;\n      break;\n  }\n\n  return tooltip;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  css,\n  CSSResult,\n  queryAll,\n  property,\n} from \"lit-element\";\nimport \"@material/mwc-ripple\";\n\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-icon\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { StateBadge } from \"../../../components/entity/state-badge\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { hasAction } from \"../common/has-action\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { handleAction } from \"../common/handle-action\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\n\n@customElement(\"hui-buttons-base\")\nexport class HuiButtonsBase extends LitElement {\n  @property() public configEntities?: EntitiesCardEntityConfig[];\n  @queryAll(\"state-badge\") protected _badges!: StateBadge[];\n  private _hass?: HomeAssistant;\n\n  set hass(hass: HomeAssistant) {\n    this._hass = hass;\n    const entitiesShowingIcons = this.configEntities?.filter(\n      (entity) => entity.show_icon !== false\n    );\n    this._badges.forEach((badge, index: number) => {\n      badge.hass = hass;\n      badge.stateObj = hass.states[entitiesShowingIcons![index].entity];\n    });\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      ${(this.configEntities || []).map((entityConf) => {\n        const stateObj = this._hass!.states[entityConf.entity];\n        if (!stateObj) {\n          return html`<div class='missing'><iron-icon icon=\"hass:alert\"></div>`;\n        }\n\n        return html`\n          <div\n            @action=${this._handleAction}\n            .actionHandler=${actionHandler({\n              hasHold: hasAction(entityConf.hold_action),\n              hasDoubleClick: hasAction(entityConf.double_tap_action),\n            })}\n            .config=${entityConf}\n            tabindex=\"0\"\n          >\n            ${entityConf.show_icon !== false\n              ? html`\n                  <state-badge\n                    title=${computeTooltip(this._hass!, entityConf)}\n                    .hass=${this._hass}\n                    .stateObj=${stateObj}\n                    .overrideIcon=${entityConf.icon}\n                    .overrideImage=${entityConf.image}\n                    stateColor\n                  ></state-badge>\n                `\n              : \"\"}\n            <span>\n              ${entityConf.show_name ||\n              (entityConf.name && entityConf.show_name !== false)\n                ? entityConf.name || computeStateName(stateObj)\n                : \"\"}\n            </span>\n            <mwc-ripple unbounded></mwc-ripple>\n          </div>\n        `;\n      })}\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    const config = (ev.currentTarget as any).config as EntitiesCardEntityConfig;\n    handleAction(\n      this,\n      this._hass!,\n      { tap_action: { action: \"toggle\" }, ...config },\n      ev.detail.action!\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        justify-content: space-evenly;\n      }\n      .missing {\n        color: #fce588;\n      }\n      div {\n        cursor: pointer;\n        align-items: center;\n        display: inline-flex;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-base\": HuiButtonsBase;\n  }\n}\n","import {\n  customElement,\n  LitElement,\n  html,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\nimport \"../components/hui-buttons-base\";\n\nimport {\n  ButtonsRowConfig,\n  EntityConfig,\n  LovelaceRow,\n} from \"../entity-rows/types\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-buttons-row\")\nexport class HuiButtonsRow extends LitElement implements LovelaceRow {\n  public static getStubConfig(): object {\n    return { entities: [] };\n  }\n\n  @property() public hass?: HomeAssistant;\n  private _configEntities?: EntityConfig[];\n\n  public setConfig(config: ButtonsRowConfig): void {\n    this._configEntities = processConfigEntities(config.entities);\n    this.requestUpdate();\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      <hui-buttons-base\n        .hass=${this.hass}\n        .configEntities=${this._configEntities}\n      ></hui-buttons-base>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-row\": HuiButtonsRow;\n  }\n}\n"],"sourceRoot":""}