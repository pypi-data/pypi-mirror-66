{"version":3,"sources":["webpack:///./src/components/ha-switch.ts","webpack:///./src/components/ha-dialog.ts","webpack:///./src/panels/config/users/dialog-user-detail.ts"],"names":["MwcSwitch","customElements","get","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","_MwcSwitch2","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_getPrototypeOf","call","apply","concat","_assertThisInitialized","_inherits","F","d","kind","decorators","property","type","Boolean","key","value","query","_this2","_get","prototype","style","setProperty","classList","toggle","_slot","assignedNodes","addEventListener","haptic","forwardHaptic","html","_templateObject","ripple","interactionNode","_haChangeHandler","static","css","_templateObject2","e","mdcFoundation","handleChange","checked","formElement","MwcDialog","createCloseHeading","hass","title","localize","_MwcDialog","_MwcDialog2","HaDialog","_callee","params","regeneratorRuntime","wrap","_context","prev","next","_params","_error","undefined","_name","entry","name","_isAdmin","group_ids","SYSTEM_GROUP_ID_ADMIN","updateComplete","stop","user","_close","_templateObject3","id","is_owner","_templateObject4","system_generated","_templateObject5","is_active","_templateObject6","_nameChanged","_adminChanged","_templateObject7","_deleteEntry","_submitting","_templateObject8","_updateEntry","_templateObject9","ev","detail","_callee2","_context2","target","_callee3","_context3","updateEntry","trim","SYSTEM_GROUP_ID_USER","t0","message","finish","_callee4","_context4","removeEntry","sent","haStyleDialog","_templateObject10","LitElement"],"mappings":"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","file":"chunk.e6142509398f0c34baa2.js","sourcesContent":["import {\n  customElement,\n  CSSResult,\n  css,\n  query,\n  html,\n  property,\n} from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\nimport { Constructor } from \"../types\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import { customElement, CSSResult, css, html } from \"lit-element\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\n// tslint:disable-next-line\nimport { Dialog } from \"@material/mwc-dialog\";\nimport { Constructor, HomeAssistant } from \"../types\";\n// tslint:disable-next-line\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <paper-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    icon=\"hass:close\"\n    dialogAction=\"close\"\n    class=\"close_button\"\n  ></paper-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .close_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n  css,\n} from \"lit-element\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { UserDetailDialogParams } from \"./show-dialog-user-detail\";\nimport \"../../../components/ha-switch\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport {\n  SYSTEM_GROUP_ID_ADMIN,\n  SYSTEM_GROUP_ID_USER,\n} from \"../../../data/user\";\n\n@customElement(\"dialog-user-detail\")\nclass DialogUserDetail extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() private _name!: string;\n  @property() private _isAdmin?: boolean;\n  @property() private _error?: string;\n  @property() private _params?: UserDetailDialogParams;\n  @property() private _submitting: boolean = false;\n\n  public async showDialog(params: UserDetailDialogParams): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = params.entry.name || \"\";\n    this._isAdmin = params.entry.group_ids[0] === SYSTEM_GROUP_ID_ADMIN;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const user = this._params.entry;\n    return html`\n      <ha-dialog\n        open\n        @closing=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(this.hass, user.name)}\n      >\n        <div>\n          ${this._error\n            ? html`\n                <div class=\"error\">${this._error}</div>\n              `\n            : \"\"}\n          <div class=\"secondary\">\n            ${this.hass.localize(\"ui.panel.config.users.editor.id\")}: ${user.id}\n          </div>\n          <div>\n            ${user.is_owner\n              ? html`\n                  <span class=\"state\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.users.editor.owner\"\n                    )}</span\n                  >\n                `\n              : \"\"}\n            ${user.system_generated\n              ? html`\n                  <span class=\"state\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.users.editor.system_generated\"\n                    )}\n                  </span>\n                `\n              : \"\"}\n            ${user.is_active\n              ? html`\n                  <span class=\"state\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.users.editor.active\"\n                    )}</span\n                  >\n                `\n              : \"\"}\n          </div>\n          <div class=\"form\">\n            <paper-input\n              .value=${this._name}\n              .disabled=${user.system_generated}\n              @value-changed=${this._nameChanged}\n              label=\"${this.hass!.localize(\n                \"ui.panel.config.users.editor.name\"\n              )}\"\n            ></paper-input>\n            <ha-switch\n              .disabled=${user.system_generated}\n              .checked=${this._isAdmin}\n              @change=${this._adminChanged}\n            >\n              ${this.hass.localize(\"ui.panel.config.users.editor.admin\")}\n            </ha-switch>\n            ${!this._isAdmin\n              ? html`\n                  <br />\n                  The users group is a work in progress. The user will be unable\n                  to administer the instance via the UI. We're still auditing\n                  all management API endpoints to ensure that they correctly\n                  limit access to administrators.\n                `\n              : \"\"}\n          </div>\n        </div>\n\n        <div slot=\"secondaryAction\">\n          <mwc-button\n            class=\"warning\"\n            @click=${this._deleteEntry}\n            .disabled=${this._submitting || user.system_generated}\n          >\n            ${this.hass!.localize(\"ui.panel.config.users.editor.delete_user\")}\n          </mwc-button>\n          ${user.system_generated\n            ? html`\n                <paper-tooltip position=\"right\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.users.editor.system_generated_users_not_removable\"\n                  )}\n                </paper-tooltip>\n              `\n            : \"\"}\n        </div>\n        <div slot=\"primaryAction\">\n          <mwc-button\n            @click=${this._updateEntry}\n            .disabled=${!this._name ||\n              this._submitting ||\n              user.system_generated}\n          >\n            ${this.hass!.localize(\"ui.panel.config.users.editor.update_user\")}\n          </mwc-button>\n          ${user.system_generated\n            ? html`\n                <paper-tooltip position=\"left\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.users.editor.system_generated_users_not_editable\"\n                  )}\n                </paper-tooltip>\n              `\n            : \"\"}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private async _adminChanged(ev): Promise<void> {\n    this._isAdmin = ev.target.checked;\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      await this._params!.updateEntry({\n        name: this._name.trim(),\n        group_ids: [\n          this._isAdmin ? SYSTEM_GROUP_ID_ADMIN : SYSTEM_GROUP_ID_USER,\n        ],\n      });\n      this._close();\n    } catch (err) {\n      this._error = err?.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry()) {\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _close(): void {\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n        }\n        .form {\n          padding-top: 16px;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        .state {\n          background-color: rgba(var(--rgb-primary-text-color), 0.15);\n          border-radius: 16px;\n          padding: 4px 8px;\n          margin-top: 8px;\n          display: inline-block;\n        }\n        .state:not(:first-child) {\n          margin-left: 8px;\n        }\n        ha-switch {\n          margin-top: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-user-detail\": DialogUserDetail;\n  }\n}\n"],"sourceRoot":""}