{"version":3,"sources":["webpack:///./src/panels/lovelace/common/process-config-entities.ts","webpack:///./src/panels/lovelace/common/compute-tooltip.ts","webpack:///./src/panels/lovelace/components/hui-buttons-base.ts","webpack:///./src/panels/lovelace/special-rows/hui-buttons-row.ts"],"names":["processConfigEntities","entities","Array","isArray","Error","map","entityConf","index","_typeof","type","config","entity","concat","isValidEntityId","__webpack_require__","d","__webpack_exports__","computeTooltip","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_0__","hass","title","stateName","states","computeStateName","tap_action","hold_action","tapTooltip","computeActionTooltip","holdTooltip","state","isHold","action","tooltip","localize","navigation_path","url_path","service","_decorate","customElement","_initialize","_LitElement","F","_LitElement2","HuiButtonsBase","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","_key","_getPrototypeOf","call","apply","_assertThisInitialized","_inherits","kind","decorators","property","key","value","queryAll","_this$configEntities","_hass","entitiesShowingIcons","configEntities","filter","show_icon","_badges","forEach","badge","stateObj","_this2","html","_templateObject","_templateObject3","_handleAction","actionHandler","hasHold","hasAction","hasDoubleClick","double_tap_action","_templateObject4","icon","image","show_name","name","_templateObject2","ev","currentTarget","handleAction","Object","assign","detail","static","css","_templateObject5","LitElement","HuiButtonsRow","_configEntities","requestUpdate"],"mappings":"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","file":"chunk.6d81bbfc326ecfa4eb4c.js","sourcesContent":["// Parse array of entity objects from config\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\nexport const processConfigEntities = <T extends EntityConfig>(\n  entities: Array<T | string>\n): T[] => {\n  if (!entities || !Array.isArray(entities)) {\n    throw new Error(\"Entities need to be an array\");\n  }\n\n  return entities.map(\n    (entityConf, index): T => {\n      if (\n        typeof entityConf === \"object\" &&\n        !Array.isArray(entityConf) &&\n        entityConf.type\n      ) {\n        return entityConf;\n      }\n\n      let config: T;\n\n      if (typeof entityConf === \"string\") {\n        // tslint:disable-next-line:no-object-literal-type-assertion\n        config = { entity: entityConf } as T;\n      } else if (typeof entityConf === \"object\" && !Array.isArray(entityConf)) {\n        if (!entityConf.entity) {\n          throw new Error(\n            `Entity object at position ${index} is missing entity field.`\n          );\n        }\n        config = entityConf as T;\n      } else {\n        throw new Error(`Invalid entity specified at position ${index}.`);\n      }\n\n      if (!isValidEntityId(config.entity)) {\n        throw new Error(\n          `Invalid entity ID at position ${index}: ${config.entity}`\n        );\n      }\n\n      return config;\n    }\n  );\n};\n","import { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { HomeAssistant } from \"../../../types\";\nimport { ActionConfig } from \"../../../data/lovelace\";\n\ninterface Config {\n  entity?: string;\n  title?: string;\n  tap_action?: ActionConfig;\n  hold_action?: ActionConfig;\n  double_tap_action?: ActionConfig;\n}\n\nexport const computeTooltip = (hass: HomeAssistant, config: Config): string => {\n  if (config.title === null) {\n    return \"\";\n  }\n\n  if (config.title) {\n    return config.title;\n  }\n\n  let stateName = \"\";\n  let tooltip = \"\";\n\n  if (config.entity) {\n    stateName =\n      config.entity in hass.states\n        ? computeStateName(hass.states[config.entity])\n        : config.entity;\n  }\n\n  if (!config.tap_action && !config.hold_action) {\n    return stateName;\n  }\n\n  const tapTooltip = config.tap_action\n    ? computeActionTooltip(hass, stateName, config.tap_action, false)\n    : \"\";\n  const holdTooltip = config.hold_action\n    ? computeActionTooltip(hass, stateName, config.hold_action, true)\n    : \"\";\n\n  const newline = tapTooltip && holdTooltip ? \"\\n\" : \"\";\n\n  tooltip = tapTooltip + newline + holdTooltip;\n\n  return tooltip;\n};\n\nfunction computeActionTooltip(\n  hass: HomeAssistant,\n  state: string,\n  config: ActionConfig,\n  isHold: boolean\n) {\n  if (!config || !config.action || config.action === \"none\") {\n    return \"\";\n  }\n\n  let tooltip =\n    (isHold\n      ? hass.localize(\"ui.panel.lovelace.cards.picture-elements.hold\")\n      : hass.localize(\"ui.panel.lovelace.cards.picture-elements.tap\")) + \" \";\n\n  switch (config.action) {\n    case \"navigate\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.navigate_to\",\n        \"location\",\n        config.navigation_path\n      )}`;\n      break;\n    case \"url\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.url\",\n        \"url_path\",\n        config.url_path\n      )}`;\n      break;\n    case \"toggle\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.toggle\",\n        \"name\",\n        state\n      )}`;\n      break;\n    case \"call-service\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.call_service\",\n        \"name\",\n        config.service\n      )}`;\n      break;\n    case \"more-info\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.more_info\",\n        \"name\",\n        state\n      )}`;\n      break;\n  }\n\n  return tooltip;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  css,\n  CSSResult,\n  queryAll,\n  property,\n} from \"lit-element\";\nimport \"@material/mwc-ripple\";\n\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-icon\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { StateBadge } from \"../../../components/entity/state-badge\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { hasAction } from \"../common/has-action\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { handleAction } from \"../common/handle-action\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\n\n@customElement(\"hui-buttons-base\")\nexport class HuiButtonsBase extends LitElement {\n  @property() public configEntities?: EntitiesCardEntityConfig[];\n  @queryAll(\"state-badge\") protected _badges!: StateBadge[];\n  private _hass?: HomeAssistant;\n\n  set hass(hass: HomeAssistant) {\n    this._hass = hass;\n    const entitiesShowingIcons = this.configEntities?.filter(\n      (entity) => entity.show_icon !== false\n    );\n    this._badges.forEach((badge, index: number) => {\n      badge.hass = hass;\n      badge.stateObj = hass.states[entitiesShowingIcons![index].entity];\n    });\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      ${(this.configEntities || []).map((entityConf) => {\n        const stateObj = this._hass!.states[entityConf.entity];\n        if (!stateObj) {\n          return html`<div class='missing'><iron-icon icon=\"hass:alert\"></div>`;\n        }\n\n        return html`\n          <div\n            @action=${this._handleAction}\n            .actionHandler=${actionHandler({\n              hasHold: hasAction(entityConf.hold_action),\n              hasDoubleClick: hasAction(entityConf.double_tap_action),\n            })}\n            .config=${entityConf}\n            tabindex=\"0\"\n          >\n            ${entityConf.show_icon !== false\n              ? html`\n                  <state-badge\n                    title=${computeTooltip(this._hass!, entityConf)}\n                    .hass=${this._hass}\n                    .stateObj=${stateObj}\n                    .overrideIcon=${entityConf.icon}\n                    .overrideImage=${entityConf.image}\n                    stateColor\n                  ></state-badge>\n                `\n              : \"\"}\n            <span>\n              ${entityConf.show_name ||\n              (entityConf.name && entityConf.show_name !== false)\n                ? entityConf.name || computeStateName(stateObj)\n                : \"\"}\n            </span>\n            <mwc-ripple unbounded></mwc-ripple>\n          </div>\n        `;\n      })}\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    const config = (ev.currentTarget as any).config as EntitiesCardEntityConfig;\n    handleAction(\n      this,\n      this._hass!,\n      { tap_action: { action: \"toggle\" }, ...config },\n      ev.detail.action!\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        justify-content: space-evenly;\n      }\n      .missing {\n        color: #fce588;\n      }\n      div {\n        cursor: pointer;\n        align-items: center;\n        display: inline-flex;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-base\": HuiButtonsBase;\n  }\n}\n","import {\n  customElement,\n  LitElement,\n  html,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\nimport \"../components/hui-buttons-base\";\n\nimport {\n  ButtonsRowConfig,\n  EntityConfig,\n  LovelaceRow,\n} from \"../entity-rows/types\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-buttons-row\")\nexport class HuiButtonsRow extends LitElement implements LovelaceRow {\n  public static getStubConfig(): object {\n    return { entities: [] };\n  }\n\n  @property() public hass?: HomeAssistant;\n  private _configEntities?: EntityConfig[];\n\n  public setConfig(config: ButtonsRowConfig): void {\n    this._configEntities = processConfigEntities(config.entities);\n    this.requestUpdate();\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      <hui-buttons-base\n        .hass=${this.hass}\n        .configEntities=${this._configEntities}\n      ></hui-buttons-base>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-row\": HuiButtonsRow;\n  }\n}\n"],"sourceRoot":""}