{"version":3,"sources":["webpack:///./src/external_app/external_messaging.ts","webpack:///./src/external_app/external_events_forwarder.ts","webpack:///./src/external_app/external_auth.ts"],"names":["ExternalMessaging","_classCallCheck","this","_defineProperty","key","value","bus","_this","window","addEventListener","ev","fireMessage","type","payload","event","detail","hapticType","externalForwardHaptics","msg","receiveMessage","_this2","msgId","id","Promise","resolve","reject","commands","_sendExternal","pendingCmd","success","result","error","console","warn","externalApp","externalBus","JSON","stringify","webkit","messageHandlers","postMessage","Error","ExternalAuth","hassUrl","external_auth_classCallCheck","_getPrototypeOf","call","clientId","refresh_token","access_token","expires_in","expires","_assertThisInitialized","Auth","force","callback","callbackPromise","data","getExternalAuth","tokens","Date","now","revokeExternalAuth","createExternalAuth","auth","external","attach"],"mappings":"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","file":"chunk.7edcdcfa554969913601.js","sourcesContent":["import {\n  externalForwardConnectionEvents,\n  externalForwardHaptics,\n} from \"./external_events_forwarder\";\n\nconst CALLBACK_EXTERNAL_BUS = \"externalBus\";\n\ninterface CommandInFlight {\n  resolve: (data: any) => void;\n  reject: (err: ExternalError) => void;\n}\n\nexport interface InternalMessage {\n  id?: number;\n  type: string;\n  payload?: unknown;\n}\n\ninterface ExternalError {\n  code: string;\n  message: string;\n}\n\ninterface ExternalMessageResult {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface ExternalMessageResultError {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: ExternalError;\n}\n\ntype ExternalMessage = ExternalMessageResult | ExternalMessageResultError;\n\nexport class ExternalMessaging {\n  public commands: { [msgId: number]: CommandInFlight } = {};\n  public cache: { [key: string]: any } = {};\n  public msgId = 0;\n\n  public attach() {\n    externalForwardConnectionEvents(this);\n    externalForwardHaptics(this);\n    window[CALLBACK_EXTERNAL_BUS] = (msg) => this.receiveMessage(msg);\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  public sendMessage<T>(msg: InternalMessage): Promise<T> {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n\n    this.fireMessage(msg);\n\n    return new Promise<T>((resolve, reject) => {\n      this.commands[msgId] = { resolve, reject };\n    });\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  public fireMessage(msg: InternalMessage) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n\n  public receiveMessage(msg: ExternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n\n    const pendingCmd = this.commands[msg.id];\n\n    if (!pendingCmd) {\n      // tslint:disable-next-line: no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n\n  protected _sendExternal(msg: InternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit!.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}\n","import { ExternalMessaging } from \"./external_messaging\";\n\nexport const externalForwardConnectionEvents = (bus: ExternalMessaging) => {\n  window.addEventListener(\"connection-status\", (ev) =>\n    bus.fireMessage({\n      type: \"connection-status\",\n      payload: { event: ev.detail },\n    })\n  );\n};\n\nexport const externalForwardHaptics = (bus: ExternalMessaging) =>\n  window.addEventListener(\"haptic\", (ev) =>\n    bus.fireMessage({ type: \"haptic\", payload: { hapticType: ev.detail } })\n  );\n","/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { ExternalMessaging, InternalMessage } from \"./external_messaging\";\n\nconst CALLBACK_SET_TOKEN = \"externalAuthSetToken\";\nconst CALLBACK_REVOKE_TOKEN = \"externalAuthRevokeToken\";\n\ninterface BasePayload {\n  callback: string;\n}\n\ninterface GetExternalAuthPayload extends BasePayload {\n  force?: boolean;\n}\n\ninterface RefreshTokenResponse {\n  access_token: string;\n  expires_in: number;\n}\n\ndeclare global {\n  interface Window {\n    externalApp?: {\n      getExternalAuth(payload: string);\n      revokeExternalAuth(payload: string);\n      externalBus(payload: string);\n    };\n    webkit?: {\n      messageHandlers: {\n        getExternalAuth: {\n          postMessage(payload: GetExternalAuthPayload);\n        };\n        revokeExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        externalBus: {\n          postMessage(payload: InternalMessage);\n        };\n      };\n    };\n  }\n}\n\nif (!window.externalApp && !window.webkit) {\n  throw new Error(\n    \"External auth requires either externalApp or webkit defined on Window object.\"\n  );\n}\n\nclass ExternalAuth extends Auth {\n  public external?: ExternalMessaging;\n\n  constructor(hassUrl: string) {\n    super({\n      hassUrl,\n      clientId: \"\",\n      refresh_token: \"\",\n      access_token: \"\",\n      expires_in: 0,\n      // This will trigger connection to do a refresh right away\n      expires: 0,\n    });\n  }\n\n  public async refreshAccessToken(force?: boolean) {\n    const payload: GetExternalAuthPayload = {\n      callback: CALLBACK_SET_TOKEN,\n    };\n    if (force) {\n      payload.force = true;\n    }\n\n    const callbackPromise = new Promise<RefreshTokenResponse>(\n      (resolve, reject) => {\n        window[CALLBACK_SET_TOKEN] = (success, data) =>\n          success ? resolve(data) : reject(data);\n      }\n    );\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(JSON.stringify(payload));\n    } else {\n      window.webkit!.messageHandlers.getExternalAuth.postMessage(payload);\n    }\n\n    const tokens = await callbackPromise;\n\n    this.data.access_token = tokens.access_token;\n    this.data.expires = tokens.expires_in * 1000 + Date.now();\n  }\n\n  public async revoke() {\n    const payload: BasePayload = { callback: CALLBACK_REVOKE_TOKEN };\n\n    const callbackPromise = new Promise((resolve, reject) => {\n      window[CALLBACK_REVOKE_TOKEN] = (success, data) =>\n        success ? resolve(data) : reject(data);\n    });\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(JSON.stringify(payload));\n    } else {\n      window.webkit!.messageHandlers.revokeExternalAuth.postMessage(payload);\n    }\n\n    await callbackPromise;\n  }\n}\n\nexport const createExternalAuth = (hassUrl: string) => {\n  const auth = new ExternalAuth(hassUrl);\n  if (\n    (window.externalApp && window.externalApp.externalBus) ||\n    (window.webkit && window.webkit.messageHandlers.externalBus)\n  ) {\n    auth.external = new ExternalMessaging();\n    auth.external.attach();\n  }\n  return auth;\n};\n"],"sourceRoot":""}