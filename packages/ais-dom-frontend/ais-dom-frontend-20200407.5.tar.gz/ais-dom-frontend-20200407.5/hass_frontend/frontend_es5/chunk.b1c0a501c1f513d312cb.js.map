{"version":3,"sources":["webpack:///./src/mixins/events-mixin.js","webpack:///./src/dialogs/generic/show-dialog-box.ts","webpack:///./src/components/ha-switch.ts","webpack:///./src/components/buttons/ha-call-service-button.js","webpack:///./src/components/buttons/ha-progress-button.js","webpack:///./src/panels/config/ais_dom/ha-config-ais-dom-config-update.js"],"names":["EventsMixin","dedupingMixin","superClass","_superClass","_class","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","key","value","type","detail","options","fireEvent","node","__webpack_require__","d","__webpack_exports__","showAlertDialog","showConfirmationDialog","showPromptDialog","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_0__","loadGenericDialog","Promise","all","e","then","bind","showDialogHelper","element","dialogParams","extra","resolve","origCancel","cancel","origConfirm","confirm","dialogTag","dialogImport","Object","assign","prompt","out","confirmation","MwcSwitch","customElements","get","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","_MwcSwitch2","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","_assertThisInitialized","F","kind","decorators","property","Boolean","query","_this2","_get","prototype","style","setProperty","classList","toggle","_slot","assignedNodes","addEventListener","haptic","forwardHaptic","html","_templateObject","ripple","interactionNode","_haChangeHandler","static","css","_templateObject2","mdcFoundation","handleChange","checked","formElement","HaCallServiceButton","PolymerElement","hass","progress","domain","String","service","serviceData","el","eventData","callService","$","actionSuccess","success","actionError","fire","text","define","HaProgressButton","disabled","className","container","add","setTimeout","remove","ev","buttonTapped","stopPropagation","tempClass","HaConfigAisDomControl","isWide","aisVersionInfo","computed","aisBackupInfo","aisAutoUpdateInfo","aisAutoUpdateIcon","aisAutoUpdatFullInfo","aisBackupFullInfo","aisButtonVersionCheckUpgrade","aisUpdateSystemData","say","autoUpdateMode","validating","backupStep","validateLog","backupInfo","backupError","restoreInfo","restoreError","isBackupValid","step","versionInfo","states","versionInfoAttr","attributes","push","name","update_check_time","icon","getVersionName","update_status","getVersionIcon","dom_app_current_version","new_value","dom_app_newest_version","reinstall_dom_app","android_app_current_version","android_app_newest_version","reinstall_android_app","linux_apt_current_version","linux_apt_newest_version","reinstall_linux_apt","state","backupInfoAttr","backup_info","backup_error","restore_info","restore_error","file_name","file_size","status","retS","attr","currentStep","stepNumber","entity_id","callApi","result","valid","errors","password","shadowRoot","getElementById"],"mappings":"k7BAmCO,IAAMA,EAAcC,YACzB,SAACC,GAAD,gBAAAC,GAAA,SAAAC,IAAA,mGAAAC,CAAAC,KAAAF,GAAAG,EAAAD,KAAAE,EAAAJ,GAAAK,MAAAH,KAAAI,sBAAA,yOAAAC,CAAAP,EACgBF,KADhBE,KAAA,EAAAQ,IAAA,OAAAC,MAAA,SAiBSC,EAAMC,EAAQC,GAEjB,OADAA,EAAUA,GAAW,GACdC,YAAUD,EAAQE,MAAQZ,KAAMQ,EAAMC,EAAQC,mCAnB3DZ,EAAA,uCCpCFe,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAA,IAAAC,EAAAN,EAAA,IAkCaO,EAAoB,kBAC/BC,QAAAC,IAAA,CAAAT,EAAAU,EAAA,GAAAV,EAAAU,EAAA,GAAAV,EAAAU,EAAA,KAAAV,EAAAU,EAAA,MAAAC,KAAAX,EAAAY,KAAA,YAEIC,EAAmB,SACvBC,EACAC,EACAC,GAHuB,OAQvB,IAAIR,QAAQ,SAACS,GACX,IAAMC,EAAaH,EAAaI,OAC1BC,EAAcL,EAAaM,QAEjCvB,YAAUgB,EAAS,cAAe,CAChCQ,UAAW,aACXC,aAAchB,EACdQ,aAAYS,OAAAC,OAAA,GACPV,EADO,GAEPC,EAFO,CAGVG,OAAQ,WACNF,IAAQD,YAAOU,SAAS,MACpBR,GACFA,KAGJG,QAAS,SAACM,GACRV,EAAQD,YAAOU,QAASC,GACpBP,GACFA,EAAYO,WAOXxB,EAAkB,SAC7BW,EACAC,GAF6B,OAG1BF,EAAiBC,EAASC,IAElBX,EAAyB,SACpCU,EACAC,GAFoC,OAIpCF,EAAiBC,EAASC,EAAc,CAAEa,cAAc,KAI7CvB,EAAmB,SAC9BS,EACAC,GAF8B,OAI9BF,EAAiBC,EAASC,EAAc,CAAEW,QAAQ,+2HCxEpD,IAAMG,EAAYC,eAAeC,IAAI,o1LAGrCC,CAAA,CADCC,YAAc,cACf,SAAAC,EAAAC,GAAA,IAAaC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,mGAAArD,CAAAC,KAAAiD,GAAA,QAAAI,EAAAjD,UAAAkD,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAArD,UAAAqD,GAAA,SAAAzD,KAAAoD,OAAAD,EAAAjD,EAAA+C,IAAAS,KAAAvD,MAAAgD,EAAA,CAAAnD,MAAA2D,OAAAJ,mDAAAR,EAAAa,EAAAR,MAAA,yOAAA/C,CAAA4C,EAAAD,GAAAC,EAAA,UAAAY,EAAaZ,EAAbnC,EAAA,EAAAgD,KAAA,QAAAC,WAAA,CAIGC,YAAS,CAAExD,KAAMyD,WAJpB3D,IAAA,SAAAC,MAAA,kBAI+C,IAJ/C,CAAAuD,KAAA,QAAAC,WAAA,CAKGG,YAAM,SALT5D,IAAA,QAAAC,WAAA,IAAAuD,KAAA,SAAAxD,IAAA,eAAAC,MAOE,WAAyB,IAAA4D,EAAAnE,KACvBoE,EAAAlE,EARS+C,EAQToB,WAAA,eAAArE,MAAA0D,KAAA1D,MACAA,KAAKsE,MAAMC,YACT,wBACA,+BAEFvE,KAAKwE,UAAUC,OACb,UACAR,QAAQjE,KAAK0E,MAAMC,gBAAgBrB,SAErCtD,KAAK4E,iBAAiB,SAAU,WAC1BT,EAAKU,QACPC,YAAc,aAnBtB,CAAAhB,KAAA,SAAAxD,IAAA,SAAAC,MAwBE,WACE,OAAOwE,YAAPC,IAKiBC,YAAO,CAChBC,gBAAiBlF,OASJA,KAAKmF,oBAxC9B,CAAArB,KAAA,MAAAsB,QAAA,EAAA9E,IAAA,SAAAC,MAiDE,WACE,MAAO,CACL+D,IACAe,YAFKC,QAlDX,CAAAxB,KAAA,SAAAxD,IAAA,mBAAAC,MAiFE,SAAyBgB,GACvBvB,KAAKuF,cAAcC,aAAajE,GAEhCvB,KAAKyF,QAAUzF,KAAK0F,YAAYD,aApFN/C,6uCCTxBiD,gaAA4BjG,eAAYkG,+CAE1C,OAAOb,YAAPC,wCAYA,MAAO,CACLa,KAAM,CACJrF,KAAM6B,QAGRyD,SAAU,CACRtF,KAAMyD,QACN1D,OAAO,GAGTwF,OAAQ,CACNvF,KAAMwF,QAGRC,QAAS,CACPzF,KAAMwF,QAGRE,YAAa,CACX1F,KAAM6B,OACN9B,MAAO,IAGTkC,aAAc,CACZjC,KAAMwF,oDAMVhG,KAAK8F,UAAW,EAChB,IAAIK,EAAKnG,KACLoG,EAAY,CACdL,OAAQ/F,KAAK+F,OACbE,QAASjG,KAAKiG,QACdC,YAAalG,KAAKkG,aAGpBlG,KAAK6F,KACFQ,YAAYrG,KAAK+F,OAAQ/F,KAAKiG,QAASjG,KAAKkG,aAC5C1E,KACC,WACE2E,EAAGL,UAAW,EACdK,EAAGG,EAAER,SAASS,gBACdH,EAAUI,SAAU,GAEtB,WACEL,EAAGL,UAAW,EACdK,EAAGG,EAAER,SAASW,cACdL,EAAUI,SAAU,IAGvBhF,KAAK,WACJ2E,EAAGO,KAAK,sBAAuBN,4CAItB,IAAAhD,EAAApD,KACTA,KAAKyC,aACPxB,YAAuBjB,KAAM,CAC3B2G,KAAM3G,KAAKyC,aACXP,QAAS,kBAAMkB,EAAKiD,iBAGtBrG,KAAKqG,mDAKX1D,eAAeiE,OAAO,yBAA0BjB,u8ECxF1CkB,gaAAyBjB,8CAE3B,OAAOb,YAAPC,wCAiDA,MAAO,CACLa,KAAM,CACJrF,KAAM6B,QAGRyD,SAAU,CACRtF,KAAMyD,QACN1D,OAAO,GAGTuG,SAAU,CACRtG,KAAMyD,QACN1D,OAAO,2CAKHwG,GACR,IAAIvC,EAAYxE,KAAKsG,EAAEU,UAAUxC,UACjCA,EAAUyC,IAAIF,GACdG,WAAW,WACT1C,EAAU2C,OAAOJ,IAChB,qCAGG,IAAA3D,EAAApD,KACNoE,EAAAlE,EAAA2G,EAAAxC,WAAA,QAAArE,MAAA0D,KAAA1D,MACAA,KAAK4E,iBAAiB,QAAS,SAACwC,GAAD,OAAQhE,EAAKiE,aAAaD,0CAG9CA,GACPpH,KAAK8F,UAAUsB,EAAGE,0DAItBtH,KAAKuH,UAAU,iDAIfvH,KAAKuH,UAAU,iDAGDT,EAAUhB,GACxB,OAAOgB,GAAYhB,uCAIvBnD,eAAeiE,OAAO,qBAAsBC,mwWCxFtCW,gaAA8B5B,8CAEhC,OAAOb,YAAPC,wCAgQA,MAAO,CACLa,KAAMxD,OACNoF,OAAQxD,QACRyD,eAAgB,CACdlH,KAAMwF,OACN2B,SAAU,gCAEZC,cAAe,CACbpH,KAAMwF,OACN2B,SAAU,+BAEZE,kBAAmB,CAAErH,KAAMwF,QAC3B8B,kBAAmB,CAAEtH,KAAMwF,QAC3B+B,qBAAsB,CACpBvH,KAAMgD,MACNjD,MAAO,IAETyH,kBAAmB,CACjBxH,KAAMgD,MACNjD,MAAO,IAET0H,6BAA8B,CAC5BzH,KAAMwF,OACN2B,SAAU,8CAEZO,oBAAqB,CACnB1H,KAAM6B,OACN9B,MAAO,CAAE4H,KAAK,IAEhBC,eAAgB,CACd5H,KAAMyD,QACN0D,SAAU,gCAEZU,WAAY,CACV7H,KAAMyD,QACN1D,OAAO,GAET+H,WAAY,CACV9H,KAAMwF,OACNzF,MAAO,IACPoH,SAAU,+BAEZY,YAAa,CACX/H,KAAMwF,OACNzF,MAAO,IAETiI,WAAY,CACVhI,KAAMwF,OACNzF,MAAO,IAETkI,YAAa,CACXjI,KAAMwF,OACNzF,MAAO,IAETmI,YAAa,CACXlI,KAAMwF,OACNzF,MAAO,IAEToI,aAAc,CACZnI,KAAMwF,OACNzF,MAAO,IAETqI,cAAe,CACbpI,KAAMyD,QACN1D,MAAO,4CAMX6D,EAAAlE,EAAAsH,EAAAnD,WAAA,QAAArE,MAAA0D,KAAA1D,MACAA,KAAK6F,KAAKQ,YAAY,YAAa,kBAAmB,CACpDwC,KAAM,MAER7I,KAAK6F,KAAKQ,YAAY,YAAa,0DAGtBoB,GACb,OAAOA,EAAS,UAAY,gEAGP5B,GACrB,IAAIiD,EAAcjD,EAAKkD,OAAO,uBAC1BC,EAAkBF,EAAYG,WA8ClC,OA7CAjJ,KAAK+H,qBAAuB,GAExB,sBAAuBiB,GACzBhJ,KAAK+H,qBAAqBmB,KAAK,CAC7BC,KAAM,eACN5I,MAAOyI,EAAgBI,kBACvBC,KAAM,KAIN,kBAAmBL,GACrBhJ,KAAK+H,qBAAqBmB,KAAK,CAC7BC,KAAM,SACN5I,MAAOP,KAAKsJ,eAAeN,EAAgBO,eAC3CF,KAAMrJ,KAAKwJ,eAAeR,EAAgBO,iBAI1C,4BAA6BP,GAC/BhJ,KAAK+H,qBAAqBmB,KAAK,CAC7BC,KAAM,kBACN5I,MAAOyI,EAAgBS,wBACvBC,UAAWV,EAAgBW,uBAC3BN,KAAML,EAAgBY,kBAAoB,aAAe,eAGzD,gCAAiCZ,GACnChJ,KAAK+H,qBAAqBmB,KAAK,CAC7BC,KAAM,UACN5I,MAAOyI,EAAgBa,4BACvBH,UAAWV,EAAgBc,2BAC3BT,KAAML,EAAgBe,sBAClB,aACA,eAGJ,8BAA+Bf,GACjChJ,KAAK+H,qBAAqBmB,KAAK,CAC7BC,KAAM,QACN5I,MAAOyI,EAAgBgB,0BACvBN,UAAWV,EAAgBiB,yBAC3BZ,KAAML,EAAgBkB,oBAAsB,aAAe,eAIxDpB,EAAYqB,oDAGCtE,GACpB,IAAI2C,EAAa3C,EAAKkD,OAAO,wBAI7B,MAHyB,MAArBP,EAAW2B,QACbnK,KAAKqI,YAAa,GAEbG,EAAW2B,oDAGEtE,GACpB,IAAI2C,EAAa3C,EAAKkD,OAAO,wBACzBqB,EAAiB5B,EAAWS,WAgBhC,OAfAjJ,KAAKgI,kBAAoB,GACzBhI,KAAK4I,eAAgB,EACrB5I,KAAKwI,WAAa4B,EAAeC,YACjCrK,KAAKyI,YAAc2B,EAAeE,aAClCtK,KAAK0I,YAAc0B,EAAeG,aAClCvK,KAAK2I,aAAeyB,EAAeI,cAC/B,cAAeJ,IACjBpK,KAAK4I,gBAAkBwB,EAAeK,UACtCzK,KAAKgI,kBAAkBkB,KAAK,CAC1BC,KAAM,iBACN5I,MAAO6J,EAAeK,UACtBf,UAAWU,EAAeM,UAC1BrB,KAAM,eAGHb,EAAW2B,6CAGLQ,GACb,IAAIC,EAAOD,EAgBX,MAfe,aAAXA,EACFC,EAAO,cACa,aAAXD,EACTC,EAAO,cACa,gBAAXD,EACTC,EAAO,aACa,eAAXD,EACTC,EAAO,eACa,YAAXD,EACTC,EAAO,WACa,YAAXD,EACTC,EAAO,WACa,YAAXD,IACTC,EAAO,iBAEFA,yCAGMD,GACb,IAAIC,EAAO,GAgBX,MAfe,aAAXD,EACFC,EAAO,iBACa,aAAXD,EACTC,EAAO,GACa,gBAAXD,EACTC,EAAO,wBACa,eAAXD,EACTC,EAAO,sBACa,YAAXD,EACTC,EAAO,6BACa,YAAXD,EACTC,EAAO,0BACa,YAAXD,IACTC,EAAO,qBAEFA,+DAG4B/E,GACnC,IAAIgF,EAAOhF,EAAKkD,OAAO,uBAAuBE,WAC9C,OACE4B,EAAKjB,mBACLiB,EAAKd,uBACLc,EAAKX,oBAEsB,aAAvBW,EAAKtB,cACA,gCAEkB,YAAvBsB,EAAKtB,cACA,mBAEF,mBAAqBvJ,KAAKsJ,eAAeuB,EAAKtB,eAEhD,iFAGc1D,GACrB,MAA2D,QAAvDA,EAAKkD,OAAO,iCAAiCoB,OAC/CnK,KAAK8H,kBAAoB,eACzB9H,KAAK6H,kBACH,+GACK,IAET7H,KAAK8H,kBAAoB,WACzB9H,KAAK6H,kBACH,8EACK,sCAGEiD,EAAaC,GACtB,OAAOD,IAAgBC,iDAIvB/K,KAAK6F,KAAKQ,YAAY,gBAAiB,SAAU,CAC/C2E,UAAW,qEAIJ,IAAA5H,EAAApD,KAET,GAAwB,MAApBA,KAAKsI,WACPtI,KAAKqI,YAAa,EAClBrI,KAAKuI,YAAc,GAEnBvI,KAAK6F,KAAKoF,QAAQ,OAAQ,4BAA4BzJ,KAAK,SAAC0J,GAC1D9H,EAAKiF,YAAa,EAClB,IAAI8C,EAA0B,UAAlBD,EAAOA,OAAqB,IAAM,IAChC,MAAVC,GACF/H,EAAKyC,KAAKQ,YAAY,YAAa,kBAAmB,CACpDwC,KAAMsC,EACNb,aAAc,6BAEhBlH,EAAKmF,YAAc2C,EAAOE,SAE1BhI,EAAKyC,KAAKQ,YAAY,YAAa,kBAAmB,CACpDwC,KAAMsC,EACNd,YAAa,8CAEfjH,EAAKmF,YAAc,UAGlB,CAELvI,KAAKqI,YAAa,EAClBrI,KAAKuI,YAAc,GACnB,IAAI8C,EAAWrL,KAAKsL,WAAWC,eAAe,aAAahL,MAC3DP,KAAK6F,KAAKQ,YAAY,YAAa,YAAa,CAC9CgF,SAAUA,6CAMdrL,KAAKqI,YAAa,EAClBrI,KAAKuI,YAAc,GACnB,IAAI8C,EAAWrL,KAAKsL,WAAWC,eAAe,aAAahL,MAC3DP,KAAK6F,KAAKQ,YAAY,YAAa,iBAAkB,CACnDgF,SAAUA,yCAKhB1I,eAAeiE,OAAO,kCAAmCY","file":"chunk.b1c0a501c1f513d312cb.js","sourcesContent":["import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n// Polymer legacy event helpers used courtesy of the Polymer project.\n//\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* @polymerMixin */\nexport const EventsMixin = dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      /**\n   * Dispatches a custom event with an optional detail value.\n   *\n   * @param {string} type Name of event type.\n   * @param {*=} detail Detail value containing event-specific\n   *   payload.\n   * @param {{ bubbles: (boolean|undefined),\n               cancelable: (boolean|undefined),\n                composed: (boolean|undefined) }=}\n    *  options Object specifying options.  These may include:\n    *  `bubbles` (boolean, defaults to `true`),\n    *  `cancelable` (boolean, defaults to false), and\n    *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n    * @return {Event} The new event that was fired.\n    */\n      fire(type, detail, options) {\n        options = options || {};\n        return fireEvent(options.node || this, type, detail, options);\n      }\n    }\n);\n","import { fireEvent } from \"../../common/dom/fire_event\";\nimport { TemplateResult } from \"lit-html\";\n\ninterface BaseDialogParams {\n  confirmText?: string;\n  text?: string | TemplateResult;\n  title?: string;\n}\n\nexport interface AlertDialogParams extends BaseDialogParams {\n  confirm?: () => void;\n}\n\nexport interface ConfirmationDialogParams extends BaseDialogParams {\n  dismissText?: string;\n  confirm?: () => void;\n  cancel?: () => void;\n}\n\nexport interface PromptDialogParams extends BaseDialogParams {\n  inputLabel?: string;\n  inputType?: string;\n  defaultValue?: string;\n  confirm?: (out?: string) => void;\n}\n\nexport interface DialogParams\n  extends ConfirmationDialogParams,\n    PromptDialogParams {\n  confirm?: (out?: string) => void;\n  confirmation?: boolean;\n  prompt?: boolean;\n}\n\nexport const loadGenericDialog = () =>\n  import(/* webpackChunkName: \"confirmation\" */ \"./dialog-box\");\n\nconst showDialogHelper = (\n  element: HTMLElement,\n  dialogParams: DialogParams,\n  extra?: {\n    confirmation?: DialogParams[\"confirmation\"];\n    prompt?: DialogParams[\"prompt\"];\n  }\n) =>\n  new Promise((resolve) => {\n    const origCancel = dialogParams.cancel;\n    const origConfirm = dialogParams.confirm;\n\n    fireEvent(element, \"show-dialog\", {\n      dialogTag: \"dialog-box\",\n      dialogImport: loadGenericDialog,\n      dialogParams: {\n        ...dialogParams,\n        ...extra,\n        cancel: () => {\n          resolve(extra?.prompt ? null : false);\n          if (origCancel) {\n            origCancel();\n          }\n        },\n        confirm: (out) => {\n          resolve(extra?.prompt ? out : true);\n          if (origConfirm) {\n            origConfirm(out);\n          }\n        },\n      },\n    });\n  });\n\nexport const showAlertDialog = (\n  element: HTMLElement,\n  dialogParams: AlertDialogParams\n) => showDialogHelper(element, dialogParams);\n\nexport const showConfirmationDialog = (\n  element: HTMLElement,\n  dialogParams: ConfirmationDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { confirmation: true }) as Promise<\n    boolean\n  >;\n\nexport const showPromptDialog = (\n  element: HTMLElement,\n  dialogParams: PromptDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { prompt: true }) as Promise<\n    null | string\n  >;\n","import {\n  customElement,\n  CSSResult,\n  css,\n  query,\n  html,\n  property,\n} from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\nimport { Constructor } from \"../types\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"./ha-progress-button\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaCallServiceButton extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <ha-progress-button\n        id=\"progress\"\n        progress=\"[[progress]]\"\n        on-click=\"buttonTapped\"\n        tabindex=\"0\"\n        ><slot></slot\n      ></ha-progress-button>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      progress: {\n        type: Boolean,\n        value: false,\n      },\n\n      domain: {\n        type: String,\n      },\n\n      service: {\n        type: String,\n      },\n\n      serviceData: {\n        type: Object,\n        value: {},\n      },\n\n      confirmation: {\n        type: String,\n      },\n    };\n  }\n\n  callService() {\n    this.progress = true;\n    var el = this;\n    var eventData = {\n      domain: this.domain,\n      service: this.service,\n      serviceData: this.serviceData,\n    };\n\n    this.hass\n      .callService(this.domain, this.service, this.serviceData)\n      .then(\n        function() {\n          el.progress = false;\n          el.$.progress.actionSuccess();\n          eventData.success = true;\n        },\n        function() {\n          el.progress = false;\n          el.$.progress.actionError();\n          eventData.success = false;\n        }\n      )\n      .then(function() {\n        el.fire(\"hass-service-called\", eventData);\n      });\n  }\n\n  buttonTapped() {\n    if (this.confirmation) {\n      showConfirmationDialog(this, {\n        text: this.confirmation,\n        confirm: () => this.callService(),\n      });\n    } else {\n      this.callService();\n    }\n  }\n}\n\ncustomElements.define(\"ha-call-service-button\", HaCallServiceButton);\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nclass HaProgressButton extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        .container {\n          position: relative;\n          display: inline-block;\n        }\n\n        mwc-button {\n          transition: all 1s;\n        }\n\n        .success mwc-button {\n          --mdc-theme-primary: white;\n          background-color: var(--google-green-500);\n          transition: none;\n        }\n\n        .error mwc-button {\n          --mdc-theme-primary: white;\n          background-color: var(--google-red-500);\n          transition: none;\n        }\n\n        .progress {\n          @apply --layout;\n          @apply --layout-center-center;\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n        }\n      </style>\n      <div class=\"container\" id=\"container\">\n        <mwc-button\n          id=\"button\"\n          disabled=\"[[computeDisabled(disabled, progress)]]\"\n          on-click=\"buttonTapped\"\n        >\n          <slot></slot>\n        </mwc-button>\n        <template is=\"dom-if\" if=\"[[progress]]\">\n          <div class=\"progress\"><paper-spinner active=\"\"></paper-spinner></div>\n        </template>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      progress: {\n        type: Boolean,\n        value: false,\n      },\n\n      disabled: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  tempClass(className) {\n    var classList = this.$.container.classList;\n    classList.add(className);\n    setTimeout(() => {\n      classList.remove(className);\n    }, 1000);\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener(\"click\", (ev) => this.buttonTapped(ev));\n  }\n\n  buttonTapped(ev) {\n    if (this.progress) ev.stopPropagation();\n  }\n\n  actionSuccess() {\n    this.tempClass(\"success\");\n  }\n\n  actionError() {\n    this.tempClass(\"error\");\n  }\n\n  computeDisabled(disabled, progress) {\n    return disabled || progress;\n  }\n}\n\ncustomElements.define(\"ha-progress-button\", HaProgressButton);\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/buttons/ha-call-service-button\";\n\n/*\n *\n */\nclass HaConfigAisDomControl extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex ha-style\">\n        .content {\n          padding-bottom: 32px;\n        }\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        table {\n          width: 100%;\n        }\n\n        td:first-child {\n          width: 33%;\n        }\n\n        .validate-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          min-height: 140px;\n        }\n\n        .validate-result {\n          color: var(--google-green-500);\n          font-weight: 500;\n        }\n\n        .config-invalid .text {\n          color: var(--google-red-500);\n          font-weight: 500;\n        }\n\n        .config-invalid {\n          text-align: center;\n          margin-top: 20px;\n        }\n\n        .validate-log {\n          white-space: pre-wrap;\n          direction: ltr;\n        }\n      </style>\n\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div class$=\"[[computeClasses(isWide)]]\">\n          <ha-config-section is-wide=\"[[isWide]]\">\n            <span slot=\"header\">Oprogramowanie bramki</span>\n            <span slot=\"introduction\"\n              >Możesz zaktualizować system do najnowszej wersji, wykonać kopię\n              zapasową ustawień i zsynchronizować bramkę z Portalem\n              Integratora</span\n            >\n            <ha-card header=\"Wersja systemu Asystent domowy\">\n              <div class=\"card-content\">\n                [[aisVersionInfo]]\n                <div>\n                  <div style=\"margin-top:30px;\" id=\"ha-switch-id\">\n                    <ha-switch\n                      checked=\"{{autoUpdateMode}}\"\n                      on-change=\"changeAutoUpdateMode\"\n                      style=\"position: absolute; right: 20px;\"\n                    ></ha-switch\n                    ><span\n                      ><h3>\n                        Autoaktualizacja\n                        <iron-icon icon=\"[[aisAutoUpdateIcon]]\"></iron-icon></h3\n                    ></span>\n                  </div>\n                </div>\n\n                <div style=\"display: inline-block;\">\n                  <div>\n                    [[aisAutoUpdateInfo]]\n                  </div>\n                  <div style=\"margin-top: 15px;\">\n                    Aktualizacje dostarczają najnowsze funkcjonalności oraz\n                    poprawki zapewniające bezpieczeństwo i stabilność działania\n                    systemu.\n                    <table style=\"margin-top: 10px;\">\n                      <template\n                        is=\"dom-repeat\"\n                        items=\"[[aisAutoUpdatFullInfo]]\"\n                      >\n                        <tr>\n                          <td>[[item.name]]</td>\n                          <td>[[item.value]]</td>\n                          <td>[[item.new_value]]</td>\n                          <td><iron-icon icon=\"[[item.icon]]\"></iron-icon></td>\n                        </tr>\n                      </template>\n                    </table>\n                  </div>\n                </div>\n                <div class=\"center-container\">\n                  <ha-call-service-button\n                    class=\"warning\"\n                    hass=\"[[hass]]\"\n                    domain=\"ais_updater\"\n                    service=\"execute_upgrade\"\n                    service-data=\"[[aisUpdateSystemData]]\"\n                    >[[aisButtonVersionCheckUpgrade]]\n                  </ha-call-service-button>\n                </div>\n              </div>\n            </ha-card>\n\n            <ha-card header=\"Kopia konfiguracji Bramki\">\n              <div class=\"card-content\">\n                W tym miejscu możesz, sprawdzić poprawność ustawień bramki,\n                wykonać jej kopię i przesłać ją do portalu integratora. <b>Uwaga,\n                ponieważ konfiguracja może zawierać hasła i tokeny dostępu do\n                usług, zalecamy zaszyfrować ją hasłem</b>. Gdy kopia jest\n                zabezpieczona hasłem, to można ją otworzyć/przywrócić tylko po\n                podaniu hasła.\n                <h2>\n                  Nowa kopia ustawień\n                  <iron-icon icon=\"mdi:cloud-upload-outline\"></iron-icon>\n                </h2>\n                Przed wykonaniem nowej kopii ustawień sprawdź poprawność\n                konfiguracji\n                <div style=\"border-bottom: 1px solid white;\">\n                  <template is=\"dom-if\" if=\"[[!validateLog]]\">\n                    <div class=\"validate-container\">\n                      <div class=\"validate-result\" id=\"result\">\n                        [[backupInfo]]\n                      </div>\n                      <template is=\"dom-if\" if=\"[[!validating]]\">\n                        <div class=\"config-invalid\">\n                          <span class=\"text\">\n                            [[backupError]]\n                          </span>\n                        </div>\n                        <template\n                          is=\"dom-if\"\n                          if=\"[[_isEqualTo(backupStep, '1')]]\"\n                        >\n                          <paper-input\n                            placeholder=\"hasło\"\n                            no-label-float=\"\"\n                            type=\"password\"\n                            id=\"password1\"\n                          ></paper-input>\n                        </template>\n                        <mwc-button raised=\"\" on-click=\"doBackup\">\n                          <template\n                            is=\"dom-if\"\n                            if=\"[[_isEqualTo(backupStep, '0')]]\"\n                          >\n                            Sprawdź konfigurację\n                          </template>\n                          <template\n                            is=\"dom-if\"\n                            if=\"[[_isEqualTo(backupStep, '1')]]\"\n                          >\n                            Wykonaj kopie konfiguracji\n                          </template>\n                        </mwc-button>\n                      </template>\n                      <template is=\"dom-if\" if=\"[[validating]]\">\n                        <paper-spinner active=\"\"></paper-spinner>\n                      </template>\n                    </div>\n                  </template>\n                  <template is=\"dom-if\" if=\"[[validateLog]]\">\n                    <div class=\"config-invalid\">\n                      <mwc-button raised=\"\" on-click=\"doBackup\">\n                        Popraw i sprawdź ponownie\n                      </mwc-button>\n                    </div>\n                    <p></p>\n                    <div id=\"configLog\" class=\"validate-log\">\n                      [[validateLog]]\n                    </div>\n                  </template>\n                </div>\n\n                <template is=\"dom-if\" if=\"[[isBackupValid]]\">\n                  <h2>\n                    Przywracanie ustawień\n                    <iron-icon icon=\"mdi:backup-restore\"></iron-icon>\n                  </h2>\n                  <div class=\"validate-container\">\n                    <table style=\"margin-top: 40px; margin-bottom: 10px;\">\n                      <template is=\"dom-repeat\" items=\"[[aisBackupFullInfo]]\">\n                        <tr>\n                          <td>[[item.name]]</td>\n                          <td>[[item.value]]</td>\n                          <td>[[item.new_value]]</td>\n                          <td><iron-icon icon=\"[[item.icon]]\"></iron-icon></td>\n                        </tr>\n                      </template>\n                    </table>\n                      <div class=\"validate-container\">\n                        <div class=\"validate-result\" id=\"result\">\n                          [[restoreInfo]]\n                        </div>\n                        <template is=\"dom-if\" if=\"[[!validating]]\">\n                        <div class=\"config-invalid\">\n                          <span class=\"text\">\n                            [[restoreError]]\n                          </span>\n                        </div>\n                        <paper-input\n                          placeholder=\"hasło\"\n                          no-label-float=\"\"\n                          type=\"password\"\n                          id=\"password2\"\n                        ></paper-input>\n                        <mwc-button raised=\"\" on-click=\"restoreBackup\">\n                          Przywróć konfigurację z kopii\n                        </mwc-button>\n                      </div>\n                    </template>\n                    <template is=\"dom-if\" if=\"[[validating]]\">\n                      <paper-spinner active=\"\"></paper-spinner>\n                    </template>\n                  </div>\n                </template>\n              </div>\n            </ha-card>\n\n            <ha-card header=\"Synchronizacja z Portalem Integratora\">\n              <div class=\"card-content\">\n                Jeśli ostatnio wprowadzałeś zmiany w Portalu Integratora, takie\n                jak dodanie nowych typów audio czy też dostęp do zewnętrznych\n                serwisów, to przyciskiem poniżej możesz uruchomić natychmiastowe\n                pobranie tych zmian na bramkę bez czekania na automatyczną\n                synchronizację.\n                <div class=\"center-container\">\n                  <ha-call-service-button\n                    class=\"warning\"\n                    hass=\"[[hass]]\"\n                    domain=\"script\"\n                    service=\"ais_cloud_sync\"\n                    >Synchronizuj z Portalem Integratora\n                  </ha-call-service-button>\n                </div>\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      isWide: Boolean,\n      aisVersionInfo: {\n        type: String,\n        computed: \"_computeAisVersionInfo(hass)\",\n      },\n      aisBackupInfo: {\n        type: String,\n        computed: \"_computeAisBackupInfo(hass)\",\n      },\n      aisAutoUpdateInfo: { type: String },\n      aisAutoUpdateIcon: { type: String },\n      aisAutoUpdatFullInfo: {\n        type: Array,\n        value: [],\n      },\n      aisBackupFullInfo: {\n        type: Array,\n        value: [],\n      },\n      aisButtonVersionCheckUpgrade: {\n        type: String,\n        computed: \"_computeAisButtonVersionCheckUpgrade(hass)\",\n      },\n      aisUpdateSystemData: {\n        type: Object,\n        value: { say: true },\n      },\n      autoUpdateMode: {\n        type: Boolean,\n        computed: \"_computeAutoUpdateMode(hass)\",\n      },\n      validating: {\n        type: Boolean,\n        value: false,\n      },\n      backupStep: {\n        type: String,\n        value: \"0\",\n        computed: \"_computeAisBackupStep(hass)\",\n      },\n      validateLog: {\n        type: String,\n        value: \"\",\n      },\n      backupInfo: {\n        type: String,\n        value: \"\",\n      },\n      backupError: {\n        type: String,\n        value: \"\",\n      },\n      restoreInfo: {\n        type: String,\n        value: \"\",\n      },\n      restoreError: {\n        type: String,\n        value: \"\",\n      },\n      isBackupValid: {\n        type: Boolean,\n        value: null,\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.hass.callService(\"ais_cloud\", \"set_backup_step\", {\n      step: \"0\",\n    });\n    this.hass.callService(\"ais_cloud\", \"get_backup_info\");\n  }\n\n  computeClasses(isWide) {\n    return isWide ? \"content\" : \"content narrow\";\n  }\n\n  _computeAisVersionInfo(hass) {\n    var versionInfo = hass.states[\"sensor.version_info\"];\n    var versionInfoAttr = versionInfo.attributes;\n    this.aisAutoUpdatFullInfo = [];\n\n    if (\"update_check_time\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Sprawdzono o\",\n        value: versionInfoAttr.update_check_time,\n        icon: \"\",\n      });\n    }\n\n    if (\"update_status\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Status\",\n        value: this.getVersionName(versionInfoAttr.update_status),\n        icon: this.getVersionIcon(versionInfoAttr.update_status),\n      });\n    }\n\n    if (\"dom_app_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Asystent domowy\",\n        value: versionInfoAttr.dom_app_current_version,\n        new_value: versionInfoAttr.dom_app_newest_version,\n        icon: versionInfoAttr.reinstall_dom_app ? \"hass:alert\" : \"hass:check\",\n      });\n    }\n    if (\"android_app_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Android\",\n        value: versionInfoAttr.android_app_current_version,\n        new_value: versionInfoAttr.android_app_newest_version,\n        icon: versionInfoAttr.reinstall_android_app\n          ? \"hass:alert\"\n          : \"hass:check\",\n      });\n    }\n    if (\"linux_apt_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Linux\",\n        value: versionInfoAttr.linux_apt_current_version,\n        new_value: versionInfoAttr.linux_apt_newest_version,\n        icon: versionInfoAttr.reinstall_linux_apt ? \"hass:alert\" : \"hass:check\",\n      });\n    }\n\n    return versionInfo.state;\n  }\n\n  _computeAisBackupStep(hass) {\n    var backupInfo = hass.states[\"sensor.aisbackupinfo\"];\n    if (backupInfo.state === \"0\") {\n      this.validating = false;\n    }\n    return backupInfo.state;\n  }\n\n  _computeAisBackupInfo(hass) {\n    var backupInfo = hass.states[\"sensor.aisbackupinfo\"];\n    var backupInfoAttr = backupInfo.attributes;\n    this.aisBackupFullInfo = [];\n    this.isBackupValid = false;\n    this.backupInfo = backupInfoAttr.backup_info;\n    this.backupError = backupInfoAttr.backup_error;\n    this.restoreInfo = backupInfoAttr.restore_info;\n    this.restoreError = backupInfoAttr.restore_error;\n    if (\"file_size\" in backupInfoAttr) {\n      this.isBackupValid = !!backupInfoAttr.file_name;\n      this.aisBackupFullInfo.push({\n        name: \"Kopia zapasowa\",\n        value: backupInfoAttr.file_name,\n        new_value: backupInfoAttr.file_size,\n        icon: \"mdi:check\",\n      });\n    }\n    return backupInfo.state;\n  }\n\n  getVersionName(status) {\n    var retS = status;\n    if (status === \"checking\") {\n      retS = \"Sprawdzanie\";\n    } else if (status === \"outdated\") {\n      retS = \"Nieaktualny\";\n    } else if (status === \"downloading\") {\n      retS = \"Pobieranie\";\n    } else if (status === \"installing\") {\n      retS = \"Instalowanie\";\n    } else if (status === \"updated\") {\n      retS = \"Aktualny\";\n    } else if (status === \"unknown\") {\n      retS = \"Nieznany\";\n    } else if (status === \"restart\") {\n      retS = \"Restartowanie\";\n    }\n    return retS;\n  }\n\n  getVersionIcon(status) {\n    var retS = \"\";\n    if (status === \"checking\") {\n      retS = \"mdi:cloud-sync\";\n    } else if (status === \"outdated\") {\n      retS = \"\";\n    } else if (status === \"downloading\") {\n      retS = \"mdi:progress-download\";\n    } else if (status === \"installing\") {\n      retS = \"mdi:progress-wrench\";\n    } else if (status === \"updated\") {\n      retS = \"mdi:emoticon-happy-outline\";\n    } else if (status === \"unknown\") {\n      retS = \"mdi:help-circle-outline\";\n    } else if (status === \"restart\") {\n      retS = \"mdi:restart-alert\";\n    }\n    return retS;\n  }\n\n  _computeAisButtonVersionCheckUpgrade(hass) {\n    var attr = hass.states[\"sensor.version_info\"].attributes;\n    if (\n      attr.reinstall_dom_app ||\n      attr.reinstall_android_app ||\n      attr.reinstall_linux_apt\n    ) {\n      if (attr.update_status === \"outdated\") {\n        return \"Zainstaluj teraz aktualizację\";\n      }\n      if (attr.update_status === \"unknown\") {\n        return \"Spróbuj ponownie\";\n      }\n      return \"Aktualizacja -> \" + this.getVersionName(attr.update_status);\n    }\n    return \"Sprawdź dostępność aktualizacji\";\n  }\n\n  _computeAutoUpdateMode(hass) {\n    if (hass.states[\"input_boolean.ais_auto_update\"].state === \"off\") {\n      this.aisAutoUpdateIcon = \"mdi:sync-off\";\n      this.aisAutoUpdateInfo =\n        \"Możesz aktualizować system samodzielnie w dogodnym dla Ciebie czasie lub włączyć aktualizację automatyczną.\";\n      return false;\n    }\n    this.aisAutoUpdateIcon = \"mdi:sync\";\n    this.aisAutoUpdateInfo =\n      \"Codziennie sprawdzimy i automatycznie zainstalujemy dostępne aktualizacje.\";\n    return true;\n  }\n\n  _isEqualTo(currentStep, stepNumber) {\n    return currentStep === stepNumber;\n  }\n\n  changeAutoUpdateMode() {\n    this.hass.callService(\"input_boolean\", \"toggle\", {\n      entity_id: \"input_boolean.ais_auto_update\",\n    });\n  }\n\n  doBackup() {\n    // 1. validation\n    if (this.backupStep === \"0\") {\n      this.validating = true;\n      this.validateLog = \"\";\n\n      this.hass.callApi(\"POST\", \"config/core/check_config\").then((result) => {\n        this.validating = false;\n        var valid = result.result === \"valid\" ? \"1\" : \"0\";\n        if (valid === \"0\") {\n          this.hass.callService(\"ais_cloud\", \"set_backup_step\", {\n            step: valid,\n            backup_error: \"Konfiguracja niepoprawna\",\n          });\n          this.validateLog = result.errors;\n        } else {\n          this.hass.callService(\"ais_cloud\", \"set_backup_step\", {\n            step: valid,\n            backup_info: \"Konfiguracja poprawna można wykonać kopię\",\n          });\n          this.validateLog = \"\";\n        }\n      });\n    } else {\n      // 2. backup and transfer\n      this.validating = true;\n      this.validateLog = \"\";\n      var password = this.shadowRoot.getElementById(\"password1\").value;\n      this.hass.callService(\"ais_cloud\", \"do_backup\", {\n        password: password,\n      });\n    }\n  }\n\n  restoreBackup() {\n    this.validating = true;\n    this.validateLog = \"\";\n    var password = this.shadowRoot.getElementById(\"password2\").value;\n    this.hass.callService(\"ais_cloud\", \"restore_backup\", {\n      password: password,\n    });\n  }\n}\n\ncustomElements.define(\"ha-config-ais-dom-config-update\", HaConfigAisDomControl);\n"],"sourceRoot":""}