{"version":3,"sources":["webpack:///./src/data/graph.ts","webpack:///./src/panels/lovelace/common/graph/get-path.ts","webpack:///./src/panels/lovelace/components/hui-graph-base.ts","webpack:///./src/panels/lovelace/common/graph/coordinates.ts","webpack:///./src/panels/lovelace/header-footer/hui-graph-header-footer.ts","webpack:///./src/panels/lovelace/common/graph/get-history-coordinates.ts"],"names":["midPoint","_Ax","_Ay","_Bx","_By","_decorate","customElement","_initialize","_LitElement","F","[object Object]","args","super","this","d","kind","decorators","property","key","value","html","_path","svg","changedProps","coordinates","has","coords","length","next","Z","path","last","filter","Boolean","coord","getPath","static","css","LitElement","average","items","reduce","sum","entry","parseFloat","state","lastValue","history","hours","width","detail","forEach","item","Number","isNaN","min","Math","apply","map","max","now","Date","getTime","res","point","age","last_changed","abs","floor","round","toString","push","yRatio","xRatio","isFinite","first","getCoords","i","offset","depth","subItem","index","x","y","height","calcPoints","HuiGraphHeaderFooter","hui_graph_header_footer_decorate","config","entity","split","Error","cardConfig","Object","assign","hours_to_show","_config","hass","_coordinates","_date","_getCoordinates","async","endTime","startTime","setHours","getHours","stateHistory","fetchRecent","getHistoryCoordinates"],"mappings":"0GAAO,MCADA,EAAW,CACfC,EACAC,EACAC,EACAC,KAIA,MAAO,EAFMH,EAAME,GAAO,EAAIA,GACjBD,EAAME,GAAO,EAAIA,+gOCShCC,CAAA,CADCC,YAAc,mBACf,SAAAC,EAAAC,GAAA,OAAAC,EADA,cAAAD,EAC6CE,eAAAC,GAAAC,SAAAD,GAAAJ,EAAAM,QAA7CC,EAAA,EAAAC,KAAA,QAAAC,WAAA,CACGC,eADHC,IAAA,cAAAC,WAAA,IAAAJ,KAAA,QAAAC,WAAA,CAEGC,eAFHC,IAAA,QAAAC,WAAA,IAAAJ,KAAA,SAAAG,IAAA,SAAAC,MAIE,WACE,OAAOC;QACHP,KAAKQ,MACHC;;;;;;qBAMWT,KAAKQ;;;;;;;;gCF7BC;;;oBEwCPR,KAAKQ;;;;;gBAMfC;QA9BV,CAAAP,KAAA,SAAAG,IAAA,UAAAC,MAkCE,SAAkBI,GACXV,KAAKW,aAIND,EAAaE,IAAI,iBACnBZ,KAAKQ,MD7CaK,KACtB,IAAKA,EAAOC,OACV,MAAO,GAGT,IAAIC,EACAC,EAGJ,IAAIC,EAAO,GACPC,EAAOL,EAAOM,OAAOC,SAAS,GAElCH,QAAaC,EALH,MAKcA,EAJd,KAMV,IAAK,MAAMG,KAASR,EAClBE,EAAOM,EAEPJ,QADAD,EAAI7B,EAAS+B,EATL,GAScA,EARd,GAQuBH,EATvB,GASgCA,EARhC,KADA,MAUYC,EATZ,KAURC,QAAaF,EAXL,MAWgBA,EAVhB,KAWRG,EAAOH,EAIT,OADAE,OAAYF,EAfF,MAecA,EAdd,MCqCOO,CAAQtB,KAAKW,gBAxChC,CAAAT,KAAA,MAAAqB,QAAA,EAAAlB,IAAA,SAAAC,MA4CE,WACE,OAAOkB;;;;;;;;WA7CuBC,kBCdlC,MAAMC,EAAWC,GAEbA,EAAMC,OAAO,CAACC,EAAKC,IAAUD,EAAME,WAAWD,EAAME,OAAQ,GAC5DL,EAAMb,OAIJmB,EAAaN,GACVI,WAAWJ,EAAMA,EAAMb,OAAS,GAAGkB,QAAU,EAkDzCrB,EAAc,CACzBuB,EACAC,EACAC,EACAC,KAEAH,EAAQI,QAASC,GAAUA,EAAKP,MAAQQ,OAAOD,EAAKP,QACpDE,EAAUA,EAAQf,OAAQoB,IAAUC,OAAOC,MAAMF,EAAKP,QAEtD,MAAMU,EAAMC,KAAKD,IAAIE,MACnBD,KACAT,EAAQW,IAAKN,GAASA,EAAKP,QAEvBc,EAAMH,KAAKG,IAAIF,MACnBD,KACAT,EAAQW,IAAKN,GAASA,EAAKP,QAEvBe,GAAM,IAAIC,MAAOC,UAEjBrB,EAAS,CAACsB,EAAKX,EAAMY,KACzB,MAAMC,EAAML,EAAM,IAAIC,KAAKT,EAAKc,cAAcJ,UAE9C,IAAI5C,EAAMsC,KAAKW,IAAIF,EAAG,KAAmBjB,GAWzC,OAVIgB,GACF9C,EAAgC,IAAzBA,EAAMsC,KAAKY,MAAMlD,IACxBA,EAAMmC,QAA+B,GAAvBG,KAAKa,MAAMnD,EAAM,KAAUoD,WAAW,KAEpDpD,EAAMsC,KAAKY,MAAMlD,GAEd6C,EAAI7C,KACP6C,EAAI7C,GAAO,IAEb6C,EAAI7C,GAAKqD,KAAKnB,GACPW,GAUT,GAPAhB,EAAUA,EAAQN,OAAO,CAACsB,EAAKX,IAASX,EAAOsB,EAAKX,GAAM,GAAQ,IAC9DF,EAAS,IACXH,EAAUA,EAAQW,IAAKf,GACrBA,EAAMF,OAAO,CAACsB,EAAKX,IAASX,EAAOsB,EAAKX,GAAM,GAAO,MAIpDL,EAAQpB,OAIb,MA9FiB,EACjBoB,EACAC,EACAC,EACAC,EACAK,EACAI,KAEA,MAAMjC,EAAS,GAEf,IAAI8C,GAAUb,EAAMJ,GADL,GAEfiB,EAAoB,IAAXA,EAAeA,EAFT,GAGf,IAAIC,EAASxB,GAASD,GAAoB,IAAXE,EAAe,EAAI,IAClDuB,EAASC,SAASD,GAAUA,EAASxB,EAErC,MAAM0B,EAAQ5B,EAAQf,OAAOC,SAAS,GACtC,IAAIF,EAAO,CAACQ,EAAQoC,GAAQ7B,EAAU6B,IAEtC,MAAMC,EAAY,CAACxB,EAAayB,EAAWC,EAAS,EAAGC,EAAQ,KAC7D,GAAIA,EAAQ,GAAK3B,EACf,OAAOA,EAAKD,QAAQ,CAAC6B,EAASC,IAC5BL,EAAUI,EAASH,EAAGI,EAAOF,EAAQ,IAIzC,MAAMG,EAAIT,GAAUI,EAAIC,EAAS,GAE7B1B,IACFrB,EAAO,CAACQ,EAAQa,GAAON,EAAUM,KAEnC,MAAM+B,EACJC,OAA6BhC,EAAOrB,EAAK,GAAKA,EAAK,IAAMwB,GAAOiB,EAClE,OAAO9C,EAAO6C,KAAK,CAACW,EAAGC,KAGzB,IAAK,IAAIN,EAAI,EAAGA,EAAI9B,EAAQpB,OAAQkD,GAAK,EACvCD,EAAU7B,EAAQ8B,GAAIA,EAAG,EAAG3B,GAQ9B,OALsB,IAAlBxB,EAAOC,SACTD,EAAO,GAAK,CAACuB,EAAOvB,EAAO,GAAG,KAGhCA,EAAO6C,KAAK,CAACtB,EAAOvB,EAAOA,EAAOC,OAAS,GAAG,KACvCD,GAkDA2D,CAAWtC,EAASC,EAAOC,EAAOC,EAAQK,EAAKI,4vCCtFjD,IAAM2B,80LAAbC,CAAA,CADCjF,YAAc,4BACf,SAAAC,EAAAC,GAAA,OAAAC,EADA,cAAAD,EAEkCE,eAAAC,GAAAC,SAAAD,GAAAJ,EAAAM,QADlCC,EAAA,EAAAC,KAAA,SAAAqB,QAAA,EAAAlB,IAAA,gBAAAC,MAEE,WACE,MAAO,KAHX,CAAAJ,KAAA,QAAAC,WAAA,CAMGC,eANHC,IAAA,OAAAC,WAAA,IAAAJ,KAAA,QAAAC,WAAA,CAOGC,eAPHC,IAAA,UAAAC,WAAA,IAAAJ,KAAA,QAAAC,WAAA,CAQGC,eARHC,IAAA,eAAAC,WAAA,IAAAJ,KAAA,QAAAG,IAAA,QAAAC,WAAA,IAAAJ,KAAA,SAAAG,IAAA,YAAAC,MAWE,SAAiBqE,GACf,KAAKA,aAAD,EAACA,EAAQC,SAA0C,WAAhCD,EAAOC,OAAOC,MAAM,KAAK,GAC9C,MAAM,IAAIC,MACR,2EAIJ,MAAMC,EAAUC,OAAAC,OAAA,CACd5C,OAAQ,EACR6C,cAAe,IACZP,GAGLI,EAAWG,cAAgB1C,OAAOuC,EAAWG,eAC7CH,EAAW1C,OACa,IAAtB0C,EAAW1C,QAAsC,IAAtB0C,EAAW1C,OAClC0C,EAAW1C,OACX,EAENrC,KAAKmF,QAAUJ,IA9BnB,CAAA7E,KAAA,SAAAG,IAAA,SAAAC,MAiCE,WACE,OAAKN,KAAKmF,SAAYnF,KAAKoF,KAItBpF,KAAKqF,aAQH9E;qCAC0BP,KAAKqF;MAR7B9E;;;;QAJAA,QAnCb,CAAAL,KAAA,SAAAG,IAAA,eAAAC,MAmDE,WACEN,KAAKsF,MAAQ,IAAItC,OApDrB,CAAA9C,KAAA,SAAAG,IAAA,UAAAC,MAuDE,SAAkBI,GACXV,KAAKmF,SAAYnF,KAAKoF,OAIvB1E,EAAaE,IAAI,WACnBZ,KAAKuF,kBACIvC,KAAKD,MAAQ/C,KAAKsF,MAAOrC,WAjEzB,KAkETjD,KAAKuF,qBA/DX,CAAArF,KAAA,SAAAG,IAAA,kBAAAC,MAmEEkF,iBACExF,KAAKqF,kBCrF4BG,OACnCJ,EACAR,EACAzC,EACAE,KAEA,MAAMoD,EAAU,IAAIzC,KACd0C,EAAY,IAAI1C,KACtB0C,EAAUC,SAASF,EAAQG,WAAazD,GAExC,MAAM0D,QAAqBC,YAAYV,EAAMR,EAAQc,EAAWD,GAEhE,KAAII,EAAa/E,OAAS,GAAK+E,EAAa,GAAG/E,OAAS,GAMxD,OAFeH,EAAYkF,EAAa,GAAI1D,EAAO,IAAKE,IDqE5B0D,CACxB/F,KAAKoF,KACLpF,KAAKmF,QAASP,OACd5E,KAAKmF,QAASD,cACdlF,KAAKmF,QAAS9C,QAGhBrC,KAAKsF,MAAQ,IAAItC,OA3ErB,CAAA9C,KAAA,MAAAqB,QAAA,EAAAlB,IAAA,SAAAC,MA8EE,WACE,OAAOkB;;;;;;WA/E+BC","file":"chunk.ccabaa1dfe7f0ca3af51.js","sourcesContent":["export const strokeWidth = 5;\n","const midPoint = (\n  _Ax: number,\n  _Ay: number,\n  _Bx: number,\n  _By: number\n): number[] => {\n  const _Zx = (_Ax - _Bx) / 2 + _Bx;\n  const _Zy = (_Ay - _By) / 2 + _By;\n  return [_Zx, _Zy];\n};\n\nexport const getPath = (coords: number[][]): string => {\n  if (!coords.length) {\n    return \"\";\n  }\n\n  let next: number[];\n  let Z: number[];\n  const X = 0;\n  const Y = 1;\n  let path = \"\";\n  let last = coords.filter(Boolean)[0];\n\n  path += `M ${last[X]},${last[Y]}`;\n\n  for (const coord of coords) {\n    next = coord;\n    Z = midPoint(last[X], last[Y], next[X], next[Y]);\n    path += ` ${Z[X]},${Z[Y]}`;\n    path += ` Q${next[X]},${next[Y]}`;\n    last = next;\n  }\n\n  path += ` ${next![X]},${next![Y]}`;\n  return path;\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n  svg,\n  PropertyValues,\n} from \"lit-element\";\n\nimport { strokeWidth } from \"../../../data/graph\";\nimport { getPath } from \"../common/graph/get-path\";\n\n@customElement(\"hui-graph-base\")\nexport class HuiGraphBase extends LitElement {\n  @property() public coordinates?: any;\n  @property() private _path?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this._path\n        ? svg`<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 500 100\">\n          <g>\n            <mask id=\"fill\">\n              <path\n                class='fill'\n                fill='white'\n                d=\"${this._path} L 500, 100 L 0, 100 z\"\n              />\n            </mask>\n            <rect height=\"100%\" width=\"100%\" id=\"fill-rect\" fill=\"var(--accent-color)\" mask=\"url(#fill)\"></rect>\n            <mask id=\"line\">\n              <path\n                fill=\"none\"\n                stroke=\"var(--accent-color)\"\n                stroke-width=\"${strokeWidth}\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                d=${this._path}\n              ></path>\n            </mask>\n            <rect height=\"100%\" width=\"100%\" id=\"rect\" fill=\"var(--accent-color)\" mask=\"url(#line)\"></rect>\n          </g>\n        </svg>`\n        : svg`<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 500 100\"></svg>`}\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!this.coordinates) {\n      return;\n    }\n\n    if (changedProps.has(\"coordinates\")) {\n      this._path = getPath(this.coordinates);\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        width: 100%;\n      }\n      .fill {\n        opacity: 0.1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-graph-base\": HuiGraphBase;\n  }\n}\n","import { strokeWidth } from \"../../../../data/graph\";\n\nconst average = (items: any[]): number => {\n  return (\n    items.reduce((sum, entry) => sum + parseFloat(entry.state), 0) /\n    items.length\n  );\n};\n\nconst lastValue = (items: any[]): number => {\n  return parseFloat(items[items.length - 1].state) || 0;\n};\n\nconst calcPoints = (\n  history: any,\n  hours: number,\n  width: number,\n  detail: number,\n  min: number,\n  max: number\n): number[][] => {\n  const coords = [] as number[][];\n  const height = 80;\n  let yRatio = (max - min) / height;\n  yRatio = yRatio !== 0 ? yRatio : height;\n  let xRatio = width / (hours - (detail === 1 ? 1 : 0));\n  xRatio = isFinite(xRatio) ? xRatio : width;\n\n  const first = history.filter(Boolean)[0];\n  let last = [average(first), lastValue(first)];\n\n  const getCoords = (item: any[], i: number, offset = 0, depth = 1) => {\n    if (depth > 1 && item) {\n      return item.forEach((subItem, index) =>\n        getCoords(subItem, i, index, depth - 1)\n      );\n    }\n\n    const x = xRatio * (i + offset / 6);\n\n    if (item) {\n      last = [average(item), lastValue(item)];\n    }\n    const y =\n      height + strokeWidth / 2 - ((item ? last[0] : last[1]) - min) / yRatio;\n    return coords.push([x, y]);\n  };\n\n  for (let i = 0; i < history.length; i += 1) {\n    getCoords(history[i], i, 0, detail);\n  }\n\n  if (coords.length === 1) {\n    coords[1] = [width, coords[0][1]];\n  }\n\n  coords.push([width, coords[coords.length - 1][1]]);\n  return coords;\n};\n\nexport const coordinates = (\n  history: any,\n  hours: number,\n  width: number,\n  detail: number\n): number[][] | undefined => {\n  history.forEach((item) => (item.state = Number(item.state)));\n  history = history.filter((item) => !Number.isNaN(item.state));\n\n  const min = Math.min.apply(\n    Math,\n    history.map((item) => item.state)\n  );\n  const max = Math.max.apply(\n    Math,\n    history.map((item) => item.state)\n  );\n  const now = new Date().getTime();\n\n  const reduce = (res, item, point) => {\n    const age = now - new Date(item.last_changed).getTime();\n\n    let key = Math.abs(age / (1000 * 3600) - hours);\n    if (point) {\n      key = (key - Math.floor(key)) * 60;\n      key = Number((Math.round(key / 10) * 10).toString()[0]);\n    } else {\n      key = Math.floor(key);\n    }\n    if (!res[key]) {\n      res[key] = [];\n    }\n    res[key].push(item);\n    return res;\n  };\n\n  history = history.reduce((res, item) => reduce(res, item, false), []);\n  if (detail > 1) {\n    history = history.map((entry) =>\n      entry.reduce((res, item) => reduce(res, item, true), [])\n    );\n  }\n\n  if (!history.length) {\n    return undefined;\n  }\n\n  return calcPoints(history, hours, width, detail, min, max);\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  PropertyValues,\n  CSSResult,\n  css,\n} from \"lit-element\";\n\nimport \"../components/hui-graph-base\";\n\nimport { LovelaceHeaderFooter } from \"../types\";\nimport { HomeAssistant } from \"../../../types\";\nimport { GraphHeaderFooterConfig } from \"./types\";\nimport { getHistoryCoordinates } from \"../common/graph/get-history-coordinates\";\n\nconst MINUTE = 60000;\n\n@customElement(\"hui-graph-header-footer\")\nexport class HuiGraphHeaderFooter extends LitElement\n  implements LovelaceHeaderFooter {\n  public static getStubConfig(): object {\n    return {};\n  }\n\n  @property() public hass?: HomeAssistant;\n  @property() protected _config?: GraphHeaderFooterConfig;\n  @property() private _coordinates?: any;\n  private _date?: Date;\n\n  public setConfig(config: GraphHeaderFooterConfig): void {\n    if (!config?.entity || config.entity.split(\".\")[0] !== \"sensor\") {\n      throw new Error(\n        \"Invalid Configuration: An entity from within the sensor domain required\"\n      );\n    }\n\n    const cardConfig = {\n      detail: 1,\n      hours_to_show: 24,\n      ...config,\n    };\n\n    cardConfig.hours_to_show = Number(cardConfig.hours_to_show);\n    cardConfig.detail =\n      cardConfig.detail === 1 || cardConfig.detail === 2\n        ? cardConfig.detail\n        : 1;\n\n    this._config = cardConfig;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    if (!this._coordinates) {\n      return html`\n        <div class=\"info\">\n          No state history found.\n        </div>\n      `;\n    }\n\n    return html`\n      <hui-graph-base .coordinates=${this._coordinates}></hui-graph-base>\n    `;\n  }\n\n  protected firstUpdated(): void {\n    this._date = new Date();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    if (changedProps.has(\"_config\")) {\n      this._getCoordinates();\n    } else if (Date.now() - this._date!.getTime() >= MINUTE) {\n      this._getCoordinates();\n    }\n  }\n\n  private async _getCoordinates(): Promise<void> {\n    this._coordinates = await getHistoryCoordinates(\n      this.hass!,\n      this._config!.entity,\n      this._config!.hours_to_show!,\n      this._config!.detail!\n    );\n\n    this._date = new Date();\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .info {\n        text-align: center;\n        line-height: 58px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-graph-header-footer\": HuiGraphHeaderFooter;\n  }\n}\n","import { fetchRecent } from \"../../../../data/history\";\nimport { coordinates } from \"../graph/coordinates\";\nimport { HomeAssistant } from \"../../../../types\";\n\nexport const getHistoryCoordinates = async (\n  hass: HomeAssistant,\n  entity: string,\n  hours: number,\n  detail: number\n) => {\n  const endTime = new Date();\n  const startTime = new Date();\n  startTime.setHours(endTime.getHours() - hours);\n\n  const stateHistory = await fetchRecent(hass, entity, startTime, endTime);\n\n  if (stateHistory.length < 1 || stateHistory[0].length < 1) {\n    return;\n  }\n\n  const coords = coordinates(stateHistory[0], hours, 500, detail);\n\n  return coords;\n};\n"],"sourceRoot":""}