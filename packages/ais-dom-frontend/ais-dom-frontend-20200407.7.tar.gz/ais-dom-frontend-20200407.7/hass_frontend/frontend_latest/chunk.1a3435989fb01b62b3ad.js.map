{"version":3,"sources":["webpack:///./src/data/weather.ts","webpack:///./src/panels/lovelace/entity-rows/hui-weather-entity-row.ts"],"names":["weatherImages","clear-night","cloudy","fog","hail","lightning","lightning-rainy","partlycloudy","pouring","rainy","snowy","snowy-rainy","sunny","windy","windy-variant","weatherIcons","exceptional","getWeatherUnit","hass","measure","lengthUnit","config","unit_system","length","customElement","_LitElement","[object Object]","args","super","_initialize","this","property","entity","Error","_config","changedProps","hasConfigOrEntityChanged","html","stateObj","states","localize","weatherRowConfig","Object","assign","icon","state","image","attributes","temperature","_getSecondaryAttribute","_stateObj$attributes$","extrema","_getExtrema","value","attribute","forecast","undefined","precipitation","humidity","_stateObj$attributes$2","tempLow","tempHigh","today","Date","getDate","datetime","templow","unit","css","LitElement"],"mappings":"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","file":"chunk.1a3435989fb01b62b3ad.js","sourcesContent":["import { HomeAssistant } from \"../types\";\n\nexport const weatherImages = {\n  \"clear-night\": \"/static/images/weather/night.png\",\n  cloudy: \"/static/images/weather/cloudy.png\",\n  fog: \"/static/images/weather/cloudy.png\",\n  hail: \"/static/images/weather/rainy.png\",\n  lightning: \"/static/images/weather/lightning.png\",\n  \"lightning-rainy\": \"/static/images/weather/lightning-rainy.png\",\n  partlycloudy: \"/static/images/weather/partly-cloudy.png\",\n  pouring: \"/static/images/weather/pouring.png\",\n  rainy: \"/static/images/weather/rainy.png\",\n  snowy: \"/static/images/weather/snowy.png\",\n  \"snowy-rainy\": \"/static/images/weather/rainy.png\",\n  sunny: \"/static/images/weather/sunny.png\",\n  windy: \"/static/images/weather/windy.png\",\n  \"windy-variant\": \"/static/images/weather/windy.png\",\n};\n\nexport const weatherIcons = {\n  exceptional: \"hass:alert-circle-outline\",\n};\n\nexport const cardinalDirections = [\n  \"N\",\n  \"NNE\",\n  \"NE\",\n  \"ENE\",\n  \"E\",\n  \"ESE\",\n  \"SE\",\n  \"SSE\",\n  \"S\",\n  \"SSW\",\n  \"SW\",\n  \"WSW\",\n  \"W\",\n  \"WNW\",\n  \"NW\",\n  \"NNW\",\n  \"N\",\n];\n\nconst getWindBearingText = (degree: string): string => {\n  const degreenum = parseInt(degree, 10);\n  if (isFinite(degreenum)) {\n    // tslint:disable-next-line: no-bitwise\n    return cardinalDirections[(((degreenum + 11.25) / 22.5) | 0) % 16];\n  }\n  return degree;\n};\n\nexport const getWindBearing = (bearing: string): string => {\n  if (bearing != null) {\n    return getWindBearingText(bearing);\n  }\n  return \"\";\n};\n\nexport const getWeatherUnit = (\n  hass: HomeAssistant,\n  measure: string\n): string => {\n  const lengthUnit = hass.config.unit_system.length || \"\";\n  switch (measure) {\n    case \"pressure\":\n      return lengthUnit === \"km\" ? \"hPa\" : \"inHg\";\n    case \"wind_speed\":\n      return `${lengthUnit}/h`;\n    case \"length\":\n      return lengthUnit;\n    case \"precipitation\":\n      return lengthUnit === \"km\" ? \"mm\" : \"in\";\n    case \"humidity\":\n    case \"precipitation_probability\":\n      return \"%\";\n    default:\n      return hass.config.unit_system[measure] || \"\";\n  }\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  css,\n  CSSResult,\n  property,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\n\nimport \"../../../components/entity/state-badge\";\nimport \"../components/hui-warning\";\n\nimport { LovelaceRow } from \"./types\";\nimport { HomeAssistant, WeatherEntity } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport {\n  weatherIcons,\n  getWeatherUnit,\n  weatherImages,\n} from \"../../../data/weather\";\n\n@customElement(\"hui-weather-entity-row\")\nclass HuiWeatherEntityRow extends LitElement implements LovelaceRow {\n  @property() public hass?: HomeAssistant;\n  @property() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    if (!config?.entity) {\n      throw new Error(\"Invalid Configuration: 'entity' required\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    const weatherRowConfig = {\n      ...this._config,\n      icon: weatherIcons[stateObj.state],\n      image: weatherImages[stateObj.state],\n    };\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${weatherRowConfig}>\n        <div class=\"attributes\">\n          <div>\n            ${stateObj.attributes.temperature}\n            ${getWeatherUnit(this.hass, \"temperature\")}\n          </div>\n          <div class=\"secondary\">\n            ${this._getSecondaryAttribute(stateObj)}\n          </div>\n        </div>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  private _getSecondaryAttribute(stateObj: WeatherEntity): string | undefined {\n    const extrema = this._getExtrema(stateObj);\n\n    if (extrema) {\n      return extrema;\n    }\n\n    let value: number;\n    let attribute: string;\n\n    if (\n      stateObj.attributes.forecast?.length &&\n      stateObj.attributes.forecast[0].precipitation !== undefined &&\n      stateObj.attributes.forecast[0].precipitation !== null\n    ) {\n      value = stateObj.attributes.forecast[0].precipitation!;\n      attribute = \"precipitation\";\n    } else if (\"humidity\" in stateObj.attributes) {\n      value = stateObj.attributes.humidity!;\n      attribute = \"humidity\";\n    } else {\n      return undefined;\n    }\n\n    return `\n      ${this.hass!.localize(\n        `ui.card.weather.attributes.${attribute}`\n      )} ${value} ${getWeatherUnit(this.hass!, attribute)}\n    `;\n  }\n\n  private _getExtrema(stateObj: WeatherEntity): string | undefined {\n    if (!stateObj.attributes.forecast?.length) {\n      return undefined;\n    }\n\n    let tempLow: number | undefined;\n    let tempHigh: number | undefined;\n    const today = new Date().getDate();\n\n    for (const forecast of stateObj.attributes.forecast!) {\n      if (new Date(forecast.datetime).getDate() !== today) {\n        break;\n      }\n      if (!tempHigh || forecast.temperature > tempHigh) {\n        tempHigh = forecast.temperature;\n      }\n      if (!tempLow || (forecast.templow && forecast.templow < tempLow)) {\n        tempLow = forecast.templow;\n      }\n      if (!forecast.templow && (!tempLow || forecast.temperature < tempLow)) {\n        tempLow = forecast.temperature;\n      }\n    }\n\n    if (!tempLow && !tempHigh) {\n      return undefined;\n    }\n\n    const unit = getWeatherUnit(this.hass!, \"temperature\");\n\n    return `\n      ${\n        tempHigh\n          ? `\n              ${this.hass!.localize(`ui.card.weather.high`)} ${tempHigh} ${unit}\n            `\n          : \"\"\n      }\n      ${tempLow && tempHigh ? \" / \" : \"\"}\n      ${\n        tempLow\n          ? `\n            ${this.hass!.localize(`ui.card.weather.low`)} ${tempLow} ${unit}\n          `\n          : \"\"\n      }\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .attributes {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        text-align: right;\n      }\n\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-entity-row\": HuiWeatherEntityRow;\n  }\n}\n"],"sourceRoot":""}