# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'dtype': 'str',
        'applies_to': 'int',
        'order': 'int',
        'default': 'OneOfbody1Default',
        'lower_bound': 'float',
        'upper_bound': 'float',
        'choices': 'list[str]',
        'labels': 'list[str]',
        'autocomplete': 'object',
        'use_current': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'dtype': 'dtype',
        'applies_to': 'applies_to',
        'order': 'order',
        'default': 'default',
        'lower_bound': 'lower_bound',
        'upper_bound': 'upper_bound',
        'choices': 'choices',
        'labels': 'labels',
        'autocomplete': 'autocomplete',
        'use_current': 'use_current'
    }

    def __init__(self, name=None, description='', dtype=None, applies_to=None, order=0, default=None, lower_bound=None, upper_bound=None, choices=None, labels=None, autocomplete=None, use_current=None):  # noqa: E501
        """Body1 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._dtype = None
        self._applies_to = None
        self._order = None
        self._default = None
        self._lower_bound = None
        self._upper_bound = None
        self._choices = None
        self._labels = None
        self._autocomplete = None
        self._use_current = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        self.dtype = dtype
        self.applies_to = applies_to
        if order is not None:
            self.order = order
        if default is not None:
            self.default = default
        if lower_bound is not None:
            self.lower_bound = lower_bound
        if upper_bound is not None:
            self.upper_bound = upper_bound
        if choices is not None:
            self.choices = choices
        if labels is not None:
            self.labels = labels
        if autocomplete is not None:
            self.autocomplete = autocomplete
        if use_current is not None:
            self.use_current = use_current

    @property
    def name(self):
        """Gets the name of this Body1.  # noqa: E501

        Name of the attribute.  # noqa: E501

        :return: The name of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body1.

        Name of the attribute.  # noqa: E501

        :param name: The name of this Body1.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Body1.  # noqa: E501

        Description of the attribute.  # noqa: E501

        :return: The description of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body1.

        Description of the attribute.  # noqa: E501

        :param description: The description of this Body1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dtype(self):
        """Gets the dtype of this Body1.  # noqa: E501

        Data type of the attribute.  # noqa: E501

        :return: The dtype of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this Body1.

        Data type of the attribute.  # noqa: E501

        :param dtype: The dtype of this Body1.  # noqa: E501
        :type: str
        """
        if dtype is None:
            raise ValueError("Invalid value for `dtype`, must not be `None`")  # noqa: E501
        allowed_values = ["bool", "int", "float", "enum", "str", "datetime", "geopos"]  # noqa: E501
        if dtype not in allowed_values:
            raise ValueError(
                "Invalid value for `dtype` ({0}), must be one of {1}"  # noqa: E501
                .format(dtype, allowed_values)
            )

        self._dtype = dtype

    @property
    def applies_to(self):
        """Gets the applies_to of this Body1.  # noqa: E501

        Unique integer identifying the entity type that this attribute describes.  # noqa: E501

        :return: The applies_to of this Body1.  # noqa: E501
        :rtype: int
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this Body1.

        Unique integer identifying the entity type that this attribute describes.  # noqa: E501

        :param applies_to: The applies_to of this Body1.  # noqa: E501
        :type: int
        """
        if applies_to is None:
            raise ValueError("Invalid value for `applies_to`, must not be `None`")  # noqa: E501

        self._applies_to = applies_to

    @property
    def order(self):
        """Gets the order of this Body1.  # noqa: E501

        Integer specifying relative order this attribute is displayed in the UI. Negative values are hidden by default.  # noqa: E501

        :return: The order of this Body1.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Body1.

        Integer specifying relative order this attribute is displayed in the UI. Negative values are hidden by default.  # noqa: E501

        :param order: The order of this Body1.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def default(self):
        """Gets the default of this Body1.  # noqa: E501

        Default value for the attribute.  # noqa: E501

        :return: The default of this Body1.  # noqa: E501
        :rtype: OneOfbody1Default
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Body1.

        Default value for the attribute.  # noqa: E501

        :param default: The default of this Body1.  # noqa: E501
        :type: OneOfbody1Default
        """

        self._default = default

    @property
    def lower_bound(self):
        """Gets the lower_bound of this Body1.  # noqa: E501

        Lower bound for int or float dtype.  # noqa: E501

        :return: The lower_bound of this Body1.  # noqa: E501
        :rtype: float
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        """Sets the lower_bound of this Body1.

        Lower bound for int or float dtype.  # noqa: E501

        :param lower_bound: The lower_bound of this Body1.  # noqa: E501
        :type: float
        """

        self._lower_bound = lower_bound

    @property
    def upper_bound(self):
        """Gets the upper_bound of this Body1.  # noqa: E501

        Upper bound for int or float dtype.  # noqa: E501

        :return: The upper_bound of this Body1.  # noqa: E501
        :rtype: float
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        """Sets the upper_bound of this Body1.

        Upper bound for int or float dtype.  # noqa: E501

        :param upper_bound: The upper_bound of this Body1.  # noqa: E501
        :type: float
        """

        self._upper_bound = upper_bound

    @property
    def choices(self):
        """Gets the choices of this Body1.  # noqa: E501

        Array of possible values for enum dtype.  # noqa: E501

        :return: The choices of this Body1.  # noqa: E501
        :rtype: list[str]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this Body1.

        Array of possible values for enum dtype.  # noqa: E501

        :param choices: The choices of this Body1.  # noqa: E501
        :type: list[str]
        """

        self._choices = choices

    @property
    def labels(self):
        """Gets the labels of this Body1.  # noqa: E501

        Array of labels for enum dtype.  # noqa: E501

        :return: The labels of this Body1.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Body1.

        Array of labels for enum dtype.  # noqa: E501

        :param labels: The labels of this Body1.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def autocomplete(self):
        """Gets the autocomplete of this Body1.  # noqa: E501

        Object indicating URL of autocomplete service for string dtype.  # noqa: E501

        :return: The autocomplete of this Body1.  # noqa: E501
        :rtype: object
        """
        return self._autocomplete

    @autocomplete.setter
    def autocomplete(self, autocomplete):
        """Sets the autocomplete of this Body1.

        Object indicating URL of autocomplete service for string dtype.  # noqa: E501

        :param autocomplete: The autocomplete of this Body1.  # noqa: E501
        :type: object
        """

        self._autocomplete = autocomplete

    @property
    def use_current(self):
        """Gets the use_current of this Body1.  # noqa: E501

        True to use current datetime as default for datetime dtype.  # noqa: E501

        :return: The use_current of this Body1.  # noqa: E501
        :rtype: bool
        """
        return self._use_current

    @use_current.setter
    def use_current(self, use_current):
        """Sets the use_current of this Body1.

        True to use current datetime as default for datetime dtype.  # noqa: E501

        :param use_current: The use_current of this Body1.  # noqa: E501
        :type: bool
        """

        self._use_current = use_current

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
