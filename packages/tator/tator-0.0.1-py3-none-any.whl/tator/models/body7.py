# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body7(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x': 'float',
        'y': 'float',
        'width': 'float',
        'height': 'float',
        'x0': 'float',
        'y0': 'float',
        'x1': 'float',
        'y1': 'float',
        'frame': 'int',
        'attributes': 'dict(str, object)'
    }

    attribute_map = {
        'x': 'x',
        'y': 'y',
        'width': 'width',
        'height': 'height',
        'x0': 'x0',
        'y0': 'y0',
        'x1': 'x1',
        'y1': 'y1',
        'frame': 'frame',
        'attributes': 'attributes'
    }

    def __init__(self, x=None, y=None, width=None, height=None, x0=None, y0=None, x1=None, y1=None, frame=None, attributes=None):  # noqa: E501
        """Body7 - a model defined in Swagger"""  # noqa: E501
        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self._x0 = None
        self._y0 = None
        self._x1 = None
        self._y1 = None
        self._frame = None
        self._attributes = None
        self.discriminator = None
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if x0 is not None:
            self.x0 = x0
        if y0 is not None:
            self.y0 = y0
        if x1 is not None:
            self.x1 = x1
        if y1 is not None:
            self.y1 = y1
        if frame is not None:
            self.frame = frame
        if attributes is not None:
            self.attributes = attributes

    @property
    def x(self):
        """Gets the x of this Body7.  # noqa: E501

        Normalized horizontal position of left edge of bounding box for `box` localization types, or horizontal position of dot for `dot` annotation types.  # noqa: E501

        :return: The x of this Body7.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Body7.

        Normalized horizontal position of left edge of bounding box for `box` localization types, or horizontal position of dot for `dot` annotation types.  # noqa: E501

        :param x: The x of this Body7.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Body7.  # noqa: E501

        Normalized vertical position of top edge of bounding box for `box` localization types, or vertical position of dot for `dot` annotation types.  # noqa: E501

        :return: The y of this Body7.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Body7.

        Normalized vertical position of top edge of bounding box for `box` localization types, or vertical position of dot for `dot` annotation types.  # noqa: E501

        :param y: The y of this Body7.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def width(self):
        """Gets the width of this Body7.  # noqa: E501

        Normalized width of bounding box for `box` localization types.  # noqa: E501

        :return: The width of this Body7.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Body7.

        Normalized width of bounding box for `box` localization types.  # noqa: E501

        :param width: The width of this Body7.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Body7.  # noqa: E501

        Normalized height of bounding box for `box` localization types.  # noqa: E501

        :return: The height of this Body7.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Body7.

        Normalized height of bounding box for `box` localization types.  # noqa: E501

        :param height: The height of this Body7.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def x0(self):
        """Gets the x0 of this Body7.  # noqa: E501

        Normalized horizontal position of start of line for `line` localization types.  # noqa: E501

        :return: The x0 of this Body7.  # noqa: E501
        :rtype: float
        """
        return self._x0

    @x0.setter
    def x0(self, x0):
        """Sets the x0 of this Body7.

        Normalized horizontal position of start of line for `line` localization types.  # noqa: E501

        :param x0: The x0 of this Body7.  # noqa: E501
        :type: float
        """

        self._x0 = x0

    @property
    def y0(self):
        """Gets the y0 of this Body7.  # noqa: E501

        Normalized vertical position of start of line for `line` localization types.  # noqa: E501

        :return: The y0 of this Body7.  # noqa: E501
        :rtype: float
        """
        return self._y0

    @y0.setter
    def y0(self, y0):
        """Sets the y0 of this Body7.

        Normalized vertical position of start of line for `line` localization types.  # noqa: E501

        :param y0: The y0 of this Body7.  # noqa: E501
        :type: float
        """

        self._y0 = y0

    @property
    def x1(self):
        """Gets the x1 of this Body7.  # noqa: E501

        Normalized horizontal position of end of line for `line` localization types.  # noqa: E501

        :return: The x1 of this Body7.  # noqa: E501
        :rtype: float
        """
        return self._x1

    @x1.setter
    def x1(self, x1):
        """Sets the x1 of this Body7.

        Normalized horizontal position of end of line for `line` localization types.  # noqa: E501

        :param x1: The x1 of this Body7.  # noqa: E501
        :type: float
        """

        self._x1 = x1

    @property
    def y1(self):
        """Gets the y1 of this Body7.  # noqa: E501

        Normalized vertical position of end of line for `line` localization types.  # noqa: E501

        :return: The y1 of this Body7.  # noqa: E501
        :rtype: float
        """
        return self._y1

    @y1.setter
    def y1(self, y1):
        """Sets the y1 of this Body7.

        Normalized vertical position of end of line for `line` localization types.  # noqa: E501

        :param y1: The y1 of this Body7.  # noqa: E501
        :type: float
        """

        self._y1 = y1

    @property
    def frame(self):
        """Gets the frame of this Body7.  # noqa: E501

        Frame number of this localization if it is in a video.  # noqa: E501

        :return: The frame of this Body7.  # noqa: E501
        :rtype: int
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this Body7.

        Frame number of this localization if it is in a video.  # noqa: E501

        :param frame: The frame of this Body7.  # noqa: E501
        :type: int
        """

        self._frame = frame

    @property
    def attributes(self):
        """Gets the attributes of this Body7.  # noqa: E501

        Object containing attribute values.  # noqa: E501

        :return: The attributes of this Body7.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Body7.

        Object containing attribute values.  # noqa: E501

        :param attributes: The attributes of this Body7.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body7, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body7):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
