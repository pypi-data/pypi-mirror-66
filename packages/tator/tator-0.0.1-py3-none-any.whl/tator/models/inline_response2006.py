# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2006(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'meta': 'int',
        'association': 'object',
        'attributes': 'object',
        'version': 'int',
        'modified': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'meta': 'meta',
        'association': 'association',
        'attributes': 'attributes',
        'version': 'version',
        'modified': 'modified'
    }

    def __init__(self, id=None, meta=None, association=None, attributes=None, version=None, modified=None):  # noqa: E501
        """InlineResponse2006 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._meta = None
        self._association = None
        self._attributes = None
        self._version = None
        self._modified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.meta = meta
        self.association = association
        if attributes is not None:
            self.attributes = attributes
        if version is not None:
            self.version = version
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this InlineResponse2006.  # noqa: E501


        :return: The id of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2006.


        :param id: The id of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this InlineResponse2006.  # noqa: E501


        :return: The meta of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this InlineResponse2006.


        :param meta: The meta of this InlineResponse2006.  # noqa: E501
        :type: int
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    @property
    def association(self):
        """Gets the association of this InlineResponse2006.  # noqa: E501


        :return: The association of this InlineResponse2006.  # noqa: E501
        :rtype: object
        """
        return self._association

    @association.setter
    def association(self, association):
        """Sets the association of this InlineResponse2006.


        :param association: The association of this InlineResponse2006.  # noqa: E501
        :type: object
        """
        if association is None:
            raise ValueError("Invalid value for `association`, must not be `None`")  # noqa: E501

        self._association = association

    @property
    def attributes(self):
        """Gets the attributes of this InlineResponse2006.  # noqa: E501


        :return: The attributes of this InlineResponse2006.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this InlineResponse2006.


        :param attributes: The attributes of this InlineResponse2006.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def version(self):
        """Gets the version of this InlineResponse2006.  # noqa: E501


        :return: The version of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse2006.


        :param version: The version of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def modified(self):
        """Gets the modified of this InlineResponse2006.  # noqa: E501


        :return: The modified of this InlineResponse2006.  # noqa: E501
        :rtype: bool
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this InlineResponse2006.


        :param modified: The modified of this InlineResponse2006.  # noqa: E501
        :type: bool
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2006, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
