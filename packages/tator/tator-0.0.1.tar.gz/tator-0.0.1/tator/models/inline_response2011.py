# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2011(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_uids': 'list[str]',
        'group_id': 'str'
    }

    attribute_map = {
        'run_uids': 'run_uids',
        'group_id': 'group_id'
    }

    def __init__(self, run_uids=None, group_id=None):  # noqa: E501
        """InlineResponse2011 - a model defined in Swagger"""  # noqa: E501
        self._run_uids = None
        self._group_id = None
        self.discriminator = None
        if run_uids is not None:
            self.run_uids = run_uids
        if group_id is not None:
            self.group_id = group_id

    @property
    def run_uids(self):
        """Gets the run_uids of this InlineResponse2011.  # noqa: E501

        A list of uuid1 strings identifying each job started.  # noqa: E501

        :return: The run_uids of this InlineResponse2011.  # noqa: E501
        :rtype: list[str]
        """
        return self._run_uids

    @run_uids.setter
    def run_uids(self, run_uids):
        """Sets the run_uids of this InlineResponse2011.

        A list of uuid1 strings identifying each job started.  # noqa: E501

        :param run_uids: The run_uids of this InlineResponse2011.  # noqa: E501
        :type: list[str]
        """

        self._run_uids = run_uids

    @property
    def group_id(self):
        """Gets the group_id of this InlineResponse2011.  # noqa: E501

        A uuid1 string identifying the group of jobs started.  # noqa: E501

        :return: The group_id of this InlineResponse2011.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this InlineResponse2011.

        A uuid1 string identifying the group of jobs started.  # noqa: E501

        :param group_id: The group_id of this InlineResponse2011.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2011, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2011):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
