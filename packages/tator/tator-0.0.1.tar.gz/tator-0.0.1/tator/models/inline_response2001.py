# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'media': 'list[str]',
        'frame': 'int',
        'extracted': 'str'
    }

    attribute_map = {
        'id': 'id',
        'media': 'media',
        'frame': 'frame',
        'extracted': 'extracted'
    }

    def __init__(self, id=None, media=None, frame=None, extracted=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._media = None
        self._frame = None
        self._extracted = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.media = media
        self.frame = frame
        if extracted is not None:
            self.extracted = extracted

    @property
    def id(self):
        """Gets the id of this InlineResponse2001.  # noqa: E501


        :return: The id of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2001.


        :param id: The id of this InlineResponse2001.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def media(self):
        """Gets the media of this InlineResponse2001.  # noqa: E501


        :return: The media of this InlineResponse2001.  # noqa: E501
        :rtype: list[str]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this InlineResponse2001.


        :param media: The media of this InlineResponse2001.  # noqa: E501
        :type: list[str]
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")  # noqa: E501

        self._media = media

    @property
    def frame(self):
        """Gets the frame of this InlineResponse2001.  # noqa: E501


        :return: The frame of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this InlineResponse2001.


        :param frame: The frame of this InlineResponse2001.  # noqa: E501
        :type: int
        """
        if frame is None:
            raise ValueError("Invalid value for `frame`, must not be `None`")  # noqa: E501

        self._frame = frame

    @property
    def extracted(self):
        """Gets the extracted of this InlineResponse2001.  # noqa: E501


        :return: The extracted of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._extracted

    @extracted.setter
    def extracted(self, extracted):
        """Sets the extracted of this InlineResponse2001.


        :param extracted: The extracted of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._extracted = extracted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
