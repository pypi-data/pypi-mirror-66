# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2002(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'media': 'list[str]',
        'color': 'str',
        'localizations': 'list[str]',
        'segments': 'object'
    }

    attribute_map = {
        'id': 'id',
        'media': 'media',
        'color': 'color',
        'localizations': 'localizations',
        'segments': 'segments'
    }

    def __init__(self, id=None, media=None, color=None, localizations=None, segments=None):  # noqa: E501
        """InlineResponse2002 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._media = None
        self._color = None
        self._localizations = None
        self._segments = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.media = media
        if color is not None:
            self.color = color
        self.localizations = localizations
        if segments is not None:
            self.segments = segments

    @property
    def id(self):
        """Gets the id of this InlineResponse2002.  # noqa: E501


        :return: The id of this InlineResponse2002.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2002.


        :param id: The id of this InlineResponse2002.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def media(self):
        """Gets the media of this InlineResponse2002.  # noqa: E501


        :return: The media of this InlineResponse2002.  # noqa: E501
        :rtype: list[str]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this InlineResponse2002.


        :param media: The media of this InlineResponse2002.  # noqa: E501
        :type: list[str]
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")  # noqa: E501

        self._media = media

    @property
    def color(self):
        """Gets the color of this InlineResponse2002.  # noqa: E501


        :return: The color of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this InlineResponse2002.


        :param color: The color of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def localizations(self):
        """Gets the localizations of this InlineResponse2002.  # noqa: E501


        :return: The localizations of this InlineResponse2002.  # noqa: E501
        :rtype: list[str]
        """
        return self._localizations

    @localizations.setter
    def localizations(self, localizations):
        """Sets the localizations of this InlineResponse2002.


        :param localizations: The localizations of this InlineResponse2002.  # noqa: E501
        :type: list[str]
        """
        if localizations is None:
            raise ValueError("Invalid value for `localizations`, must not be `None`")  # noqa: E501

        self._localizations = localizations

    @property
    def segments(self):
        """Gets the segments of this InlineResponse2002.  # noqa: E501


        :return: The segments of this InlineResponse2002.  # noqa: E501
        :rtype: object
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this InlineResponse2002.


        :param segments: The segments of this InlineResponse2002.  # noqa: E501
        :type: object
        """

        self._segments = segments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
