# coding: utf-8

"""
    Tator REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tator.api_client import ApiClient


class StateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_state_list_api(self, project, **kwargs):  # noqa: E501
        """create_state_list_api  # noqa: E501

        Interact with list of states.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.  This endpoint supports bulk patch of user-defined state attributes and bulk delete. Both are accomplished using the same query parameters used for a GET request.      It is importarant to know the fields required for a given entity_type_id as they are  expected in the request data for this function. As an example, if the entity_type_id has  attribute types associated with it named time and position, the JSON object must have  them specified as keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_state_list_api(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project: A unique integer identifying a project. (required)
        :param dict(str, object) body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_state_list_api_with_http_info(project, **kwargs)  # noqa: E501
        else:
            (data) = self.create_state_list_api_with_http_info(project, **kwargs)  # noqa: E501
            return data

    def create_state_list_api_with_http_info(self, project, **kwargs):  # noqa: E501
        """create_state_list_api  # noqa: E501

        Interact with list of states.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.  This endpoint supports bulk patch of user-defined state attributes and bulk delete. Both are accomplished using the same query parameters used for a GET request.      It is importarant to know the fields required for a given entity_type_id as they are  expected in the request data for this function. As an example, if the entity_type_id has  attribute types associated with it named time and position, the JSON object must have  them specified as keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_state_list_api_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project: A unique integer identifying a project. (required)
        :param dict(str, object) body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_state_list_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `create_state_list_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/States/{project}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_entity_state(self, id, **kwargs):  # noqa: E501
        """destroy_entity_state  # noqa: E501

        Interact with an individual state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a types of entity in Tator, meaning they can be described by user defined attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_entity_state(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer identifying a state. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_entity_state_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_entity_state_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def destroy_entity_state_with_http_info(self, id, **kwargs):  # noqa: E501
        """destroy_entity_state  # noqa: E501

        Interact with an individual state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a types of entity in Tator, meaning they can be described by user defined attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_entity_state_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer identifying a state. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_entity_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `destroy_entity_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/State/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_state_list_api(self, project, **kwargs):  # noqa: E501
        """destroy_state_list_api  # noqa: E501

        Interact with list of states.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.  This endpoint supports bulk patch of user-defined state attributes and bulk delete. Both are accomplished using the same query parameters used for a GET request.      It is importarant to know the fields required for a given entity_type_id as they are  expected in the request data for this function. As an example, if the entity_type_id has  attribute types associated with it named time and position, the JSON object must have  them specified as keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_state_list_api(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project: A unique integer identifying a project. (required)
        :param list[int] media_id: Comma-separated list of media IDs.
        :param int type: Unique integer identifying a annotation type.
        :param int version: Unique integer identifying a version.
        :param int modified: Whether to return original or modified annotations, 0 or 1.
        :param str search: Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        :param str attribute: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lt: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lte: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gt: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gte: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_contains: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_distance: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        :param str attribute_null: Attribute null filter. Returns elements for which a given attribute is not defined.
        :param str operation: Set to \"count\" to return a count of objects instead of the objects.
        :param int start: Pagination start index. Index of the first item in a larger list to return.
        :param int stop: Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_state_list_api_with_http_info(project, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_state_list_api_with_http_info(project, **kwargs)  # noqa: E501
            return data

    def destroy_state_list_api_with_http_info(self, project, **kwargs):  # noqa: E501
        """destroy_state_list_api  # noqa: E501

        Interact with list of states.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.  This endpoint supports bulk patch of user-defined state attributes and bulk delete. Both are accomplished using the same query parameters used for a GET request.      It is importarant to know the fields required for a given entity_type_id as they are  expected in the request data for this function. As an example, if the entity_type_id has  attribute types associated with it named time and position, the JSON object must have  them specified as keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_state_list_api_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project: A unique integer identifying a project. (required)
        :param list[int] media_id: Comma-separated list of media IDs.
        :param int type: Unique integer identifying a annotation type.
        :param int version: Unique integer identifying a version.
        :param int modified: Whether to return original or modified annotations, 0 or 1.
        :param str search: Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        :param str attribute: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lt: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lte: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gt: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gte: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_contains: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_distance: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        :param str attribute_null: Attribute null filter. Returns elements for which a given attribute is not defined.
        :param str operation: Set to \"count\" to return a count of objects instead of the objects.
        :param int start: Pagination start index. Index of the first item in a larger list to return.
        :param int stop: Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project', 'media_id', 'type', 'version', 'modified', 'search', 'attribute', 'attribute_lt', 'attribute_lte', 'attribute_gt', 'attribute_gte', 'attribute_contains', 'attribute_distance', 'attribute_null', 'operation', 'start', 'stop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_state_list_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `destroy_state_list_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501

        query_params = []
        if 'media_id' in params:
            query_params.append(('media_id', params['media_id']))  # noqa: E501
            collection_formats['media_id'] = 'multi'  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'modified' in params:
            query_params.append(('modified', params['modified']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'attribute' in params:
            query_params.append(('attribute', params['attribute']))  # noqa: E501
        if 'attribute_lt' in params:
            query_params.append(('attribute_lt', params['attribute_lt']))  # noqa: E501
        if 'attribute_lte' in params:
            query_params.append(('attribute_lte', params['attribute_lte']))  # noqa: E501
        if 'attribute_gt' in params:
            query_params.append(('attribute_gt', params['attribute_gt']))  # noqa: E501
        if 'attribute_gte' in params:
            query_params.append(('attribute_gte', params['attribute_gte']))  # noqa: E501
        if 'attribute_contains' in params:
            query_params.append(('attribute_contains', params['attribute_contains']))  # noqa: E501
        if 'attribute_distance' in params:
            query_params.append(('attribute_distance', params['attribute_distance']))  # noqa: E501
        if 'attribute_null' in params:
            query_params.append(('attribute_null', params['attribute_null']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'stop' in params:
            query_params.append(('stop', params['stop']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/States/{project}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_entity_state(self, id, **kwargs):  # noqa: E501
        """partial_update_entity_state  # noqa: E501

        Interact with an individual state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a types of entity in Tator, meaning they can be described by user defined attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_entity_state(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer identifying a state. (required)
        :param Body20 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_entity_state_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_entity_state_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def partial_update_entity_state_with_http_info(self, id, **kwargs):  # noqa: E501
        """partial_update_entity_state  # noqa: E501

        Interact with an individual state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a types of entity in Tator, meaning they can be described by user defined attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_entity_state_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer identifying a state. (required)
        :param Body20 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_entity_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partial_update_entity_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/State/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_state_list_api(self, project, **kwargs):  # noqa: E501
        """partial_update_state_list_api  # noqa: E501

        Interact with list of states.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.  This endpoint supports bulk patch of user-defined state attributes and bulk delete. Both are accomplished using the same query parameters used for a GET request.      It is importarant to know the fields required for a given entity_type_id as they are  expected in the request data for this function. As an example, if the entity_type_id has  attribute types associated with it named time and position, the JSON object must have  them specified as keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_state_list_api(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project: A unique integer identifying a project. (required)
        :param Body19 body:
        :param list[int] media_id: Comma-separated list of media IDs.
        :param int type: Unique integer identifying a annotation type.
        :param int version: Unique integer identifying a version.
        :param int modified: Whether to return original or modified annotations, 0 or 1.
        :param str search: Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        :param str attribute: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lt: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lte: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gt: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gte: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_contains: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_distance: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        :param str attribute_null: Attribute null filter. Returns elements for which a given attribute is not defined.
        :param str operation: Set to \"count\" to return a count of objects instead of the objects.
        :param int start: Pagination start index. Index of the first item in a larger list to return.
        :param int stop: Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_state_list_api_with_http_info(project, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_state_list_api_with_http_info(project, **kwargs)  # noqa: E501
            return data

    def partial_update_state_list_api_with_http_info(self, project, **kwargs):  # noqa: E501
        """partial_update_state_list_api  # noqa: E501

        Interact with list of states.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.  This endpoint supports bulk patch of user-defined state attributes and bulk delete. Both are accomplished using the same query parameters used for a GET request.      It is importarant to know the fields required for a given entity_type_id as they are  expected in the request data for this function. As an example, if the entity_type_id has  attribute types associated with it named time and position, the JSON object must have  them specified as keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_state_list_api_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project: A unique integer identifying a project. (required)
        :param Body19 body:
        :param list[int] media_id: Comma-separated list of media IDs.
        :param int type: Unique integer identifying a annotation type.
        :param int version: Unique integer identifying a version.
        :param int modified: Whether to return original or modified annotations, 0 or 1.
        :param str search: Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        :param str attribute: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lt: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lte: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gt: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gte: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_contains: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_distance: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        :param str attribute_null: Attribute null filter. Returns elements for which a given attribute is not defined.
        :param str operation: Set to \"count\" to return a count of objects instead of the objects.
        :param int start: Pagination start index. Index of the first item in a larger list to return.
        :param int stop: Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project', 'body', 'media_id', 'type', 'version', 'modified', 'search', 'attribute', 'attribute_lt', 'attribute_lte', 'attribute_gt', 'attribute_gte', 'attribute_contains', 'attribute_distance', 'attribute_null', 'operation', 'start', 'stop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_state_list_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `partial_update_state_list_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501

        query_params = []
        if 'media_id' in params:
            query_params.append(('media_id', params['media_id']))  # noqa: E501
            collection_formats['media_id'] = 'multi'  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'modified' in params:
            query_params.append(('modified', params['modified']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'attribute' in params:
            query_params.append(('attribute', params['attribute']))  # noqa: E501
        if 'attribute_lt' in params:
            query_params.append(('attribute_lt', params['attribute_lt']))  # noqa: E501
        if 'attribute_lte' in params:
            query_params.append(('attribute_lte', params['attribute_lte']))  # noqa: E501
        if 'attribute_gt' in params:
            query_params.append(('attribute_gt', params['attribute_gt']))  # noqa: E501
        if 'attribute_gte' in params:
            query_params.append(('attribute_gte', params['attribute_gte']))  # noqa: E501
        if 'attribute_contains' in params:
            query_params.append(('attribute_contains', params['attribute_contains']))  # noqa: E501
        if 'attribute_distance' in params:
            query_params.append(('attribute_distance', params['attribute_distance']))  # noqa: E501
        if 'attribute_null' in params:
            query_params.append(('attribute_null', params['attribute_null']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'stop' in params:
            query_params.append(('stop', params['stop']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/States/{project}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_entity_state(self, id, **kwargs):  # noqa: E501
        """retrieve_entity_state  # noqa: E501

        Interact with an individual state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a types of entity in Tator, meaning they can be described by user defined attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_entity_state(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer identifying a state. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_entity_state_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_entity_state_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_entity_state_with_http_info(self, id, **kwargs):  # noqa: E501
        """retrieve_entity_state  # noqa: E501

        Interact with an individual state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a types of entity in Tator, meaning they can be described by user defined attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_entity_state_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer identifying a state. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_entity_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_entity_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/State/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_state_list_api(self, project, **kwargs):  # noqa: E501
        """retrieve_state_list_api  # noqa: E501

        Interact with list of states.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.  This endpoint supports bulk patch of user-defined state attributes and bulk delete. Both are accomplished using the same query parameters used for a GET request.      It is importarant to know the fields required for a given entity_type_id as they are  expected in the request data for this function. As an example, if the entity_type_id has  attribute types associated with it named time and position, the JSON object must have  them specified as keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_state_list_api(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project: A unique integer identifying a project. (required)
        :param list[int] media_id: Comma-separated list of media IDs.
        :param int type: Unique integer identifying a annotation type.
        :param int version: Unique integer identifying a version.
        :param int modified: Whether to return original or modified annotations, 0 or 1.
        :param str search: Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        :param str attribute: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lt: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lte: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gt: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gte: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_contains: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_distance: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        :param str attribute_null: Attribute null filter. Returns elements for which a given attribute is not defined.
        :param str operation: Set to \"count\" to return a count of objects instead of the objects.
        :param int start: Pagination start index. Index of the first item in a larger list to return.
        :param int stop: Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_state_list_api_with_http_info(project, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_state_list_api_with_http_info(project, **kwargs)  # noqa: E501
            return data

    def retrieve_state_list_api_with_http_info(self, project, **kwargs):  # noqa: E501
        """retrieve_state_list_api  # noqa: E501

        Interact with list of states.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a type of entity in Tator, meaning they can be described by user defined attributes.  This endpoint supports bulk patch of user-defined state attributes and bulk delete. Both are accomplished using the same query parameters used for a GET request.      It is importarant to know the fields required for a given entity_type_id as they are  expected in the request data for this function. As an example, if the entity_type_id has  attribute types associated with it named time and position, the JSON object must have  them specified as keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_state_list_api_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project: A unique integer identifying a project. (required)
        :param list[int] media_id: Comma-separated list of media IDs.
        :param int type: Unique integer identifying a annotation type.
        :param int version: Unique integer identifying a version.
        :param int modified: Whether to return original or modified annotations, 0 or 1.
        :param str search: Lucene query syntax string for use with Elasticsearch. See `reference <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        :param str attribute: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lt: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_lte: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gt: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_gte: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_contains: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        :param str attribute_distance: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        :param str attribute_null: Attribute null filter. Returns elements for which a given attribute is not defined.
        :param str operation: Set to \"count\" to return a count of objects instead of the objects.
        :param int start: Pagination start index. Index of the first item in a larger list to return.
        :param int stop: Pagination start index. Non-inclusive ndex of the last item in a larger list to return.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project', 'media_id', 'type', 'version', 'modified', 'search', 'attribute', 'attribute_lt', 'attribute_lte', 'attribute_gt', 'attribute_gte', 'attribute_contains', 'attribute_distance', 'attribute_null', 'operation', 'start', 'stop']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_state_list_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project' is set
        if ('project' not in params or
                params['project'] is None):
            raise ValueError("Missing the required parameter `project` when calling `retrieve_state_list_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project' in params:
            path_params['project'] = params['project']  # noqa: E501

        query_params = []
        if 'media_id' in params:
            query_params.append(('media_id', params['media_id']))  # noqa: E501
            collection_formats['media_id'] = 'multi'  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'modified' in params:
            query_params.append(('modified', params['modified']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'attribute' in params:
            query_params.append(('attribute', params['attribute']))  # noqa: E501
        if 'attribute_lt' in params:
            query_params.append(('attribute_lt', params['attribute_lt']))  # noqa: E501
        if 'attribute_lte' in params:
            query_params.append(('attribute_lte', params['attribute_lte']))  # noqa: E501
        if 'attribute_gt' in params:
            query_params.append(('attribute_gt', params['attribute_gt']))  # noqa: E501
        if 'attribute_gte' in params:
            query_params.append(('attribute_gte', params['attribute_gte']))  # noqa: E501
        if 'attribute_contains' in params:
            query_params.append(('attribute_contains', params['attribute_contains']))  # noqa: E501
        if 'attribute_distance' in params:
            query_params.append(('attribute_distance', params['attribute_distance']))  # noqa: E501
        if 'attribute_null' in params:
            query_params.append(('attribute_null', params['attribute_null']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'stop' in params:
            query_params.append(('stop', params['stop']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/States/{project}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_entity_state(self, id, **kwargs):  # noqa: E501
        """update_entity_state  # noqa: E501

        Interact with an individual state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a types of entity in Tator, meaning they can be described by user defined attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_entity_state(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer identifying a state. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_entity_state_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_entity_state_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_entity_state_with_http_info(self, id, **kwargs):  # noqa: E501
        """update_entity_state  # noqa: E501

        Interact with an individual state.  A state is a description of a collection of other objects. The objects a state describes could be media (image or video), video frames, or localizations. A state referring to a collection of localizations is often referred to as a track. States are a types of entity in Tator, meaning they can be described by user defined attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_entity_state_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer identifying a state. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_entity_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_entity_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/State/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
