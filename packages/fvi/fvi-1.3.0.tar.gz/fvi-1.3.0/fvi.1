.\" Man page generated from reStructuredText.
.
.TH FVI 1 "2020-04-16" "1.3.0" ""
.SH NAME
fvi \- find and edit files that contain a pattern
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" :Copyright: public domain
.
.\" :Manual group: Utilities
.
.SH SYNOPSIS
.sp
\fBfvi\fP [\fIoptions\fP] pattern [\fIfiles\fP]
.SH OPTIONS
.sp
Usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fvi [\-h] [\-w] [\-i] [\-m] [\-v] [\-g] pattern [file [file ...]]
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-h\fP,\fB  \-\-help
show help message and exit
.TP
.B \-w\fP,\fB  \-\-word
match a word
.TP
.B \-i\fP,\fB  \-\-ignore\-case
ignore case
.TP
.B \-m\fP,\fB  \-\-magic
treat a pattern as a vim magic or grep basic regular
expression
.TP
.B \-v\fP,\fB  \-\-very\-magic
treat a pattern as a vim very magic or grep extended
regular expression
.TP
.B \-g\fP,\fB  \-\-gvim
open files in gvim rather than vim
.UNINDENT
.SH DESCRIPTION
.sp
\fBfvi\fP searches for files that contain a pattern and then open them in
\fIvim\fP or \fIgvim\fP\&.
.SS BASIC USE
.sp
A typical use of \fBfvi\fP would be to search a list of files looking for
the use of a particular pattern and then edit those files. For example,
imagine you want to search your python source code looking for uses of
the function \(aqgenerate\(aq. You can do so with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fvi generate *.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This searches through the files that end in .py in the current working
directory, finds those that contains \(aqgenerate\(aq, and then runs \fIvim\fP on
just those files (it silently ignores directories, binary files, and
unreadable files that are given in the file list).
.sp
When running \fIvim\fP, \fBfvi\fP enables the autowrite feature, and disables
folds.  It also positions the cursor on the first occurrence of the
pattern when it opens a file.  Finally, it maps N to move to the next
occurrence of the pattern and maps Ctrl\-N to move to the next file.
Since autowrite is enabled, you do not have to explicitly write out the
file after making a change. Just moving to the next file will write out
any changes you made to a file.
.SS Words
.sp
Using:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fvi generate *.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will find every occurrence of \(aqgenerate\(aq, but it will also find
occurrences of \(aqgenerated\(aq. Using the \fB\-w\fP or \fB\-\-word\fP command line
option you can limit the pattern to only match complete words, in this
case \(aqgenerate\(aq:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fvi \-w generate *.py
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Case Sensitivity
.sp
Normally the pattern is case sensitive. Using \fB\-i\fP or
\fB\-\-ignore\-case\fP causes the case of the letters in the pattern to be
ignored. So:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fvi \-i generate *.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
will find occurrences of \(aqgenerate\(aq, \(aqGenerate\(aq, \(aqGENERATE\(aq, and the
like.
.SS gvim
.sp
By default, \fBfvi\fP opens \fIvim\fP in the terminal. By adding the \fB\-g\fP or
\fB\-\-gvim\fP command line option you instruct \fBfvi\fP to instead use
\fIgvim\fP, which opens the files in a dedicated gvim window.
.SS Ack
.sp
If you leave off the list of files to be searched, then \fIack\fP is used
find the files. By default \fIack\fP searches all regular non\-binary file in
the current working directory and all its subdirectories, however you
can use .ackrc files to control this behavior (run \(aqman ack\(aq for more
information).
.SS ADVANCED USE
.sp
It is possible to use regular expressions for the search pattern.
However, \fBfvi\fP faces a challenge in doing so. When a regular
expression is given, \fBfvi\fP uses the regular expression capabilities of
\fIgrep\fP or \fIack\fP to search the files looking for the ones to edit, and
then uses the regular expression capabilities of \fIvim\fP after opening the
files. Unfortunately the same regular expression is used in both cases
and these capabilities are not completely compatible.
.SS Grep
.sp
When you use \fBfvi\fP with a regular expression pattern and a file list,
\fIgrep\fP is used to identify which files contain that pattern. \fIgrep\fP and
\fIvim\fP both provide two kinds of regular expressions that are closely
related.  \fIGrep\fP supports basic and extended GNU regular expressions.
\fIVim\fP supports magic and very magic regular expressions.  The basic GNU
and Vim magic regular expressions correspond, and similarly the extended
GNU and Vim very magic regular expressions correspond, however this
correspondence is not exact.  I have not mapped the degree to which they
do not correspond, but here are some examples of things that are known
to correspond, and things that are known not to correspond.
.SS Things that are not safe to use
.sp
\fB\eb\fP, \fB\eB\fP to match edges of words (available in \fIgrep\fP but not \fIvim\fP).
.SS Things that are not safe to use in basic/magic
.sp
None.
.SS Things that are not safe to use in extended/very magic
.nf
beginning of word: use \fB\e<\fP in extended, \fB<\fP in very magic
end of word:       use \fB\e>\fP in extended, \fB>\fP in very magic
.fi
.sp
.SS Things that are safe to use
.nf
\fB[ ]\fP  expressions
\fB\ew\fP
\fB\eW\fP
\fB\es\fP
\fB\eS\fP
\fB^\fP
\fB$\fP
\fB\&.\fP
\fB*\fP
\fB+\fP    use \fB\e+\fP in basic/magic, use \fB+\fP in extended/very magic
\fB?\fP    use \fB\e?\fP in basic/magic, use \fB?\fP in extended/very magic
\fB{\fP    use \fB\e{\fP in basic/magic, use \fB{\fP in extended/very magic
\fB}\fP    use \fB\e}\fP in basic/magic, use \fB}\fP in extended/very magic
\fB|\fP    use \fB\e|\fP in basic/magic, use \fB|\fP in extended/very magic
\fB(\fP    use \fB\e(\fP in basic/magic, use \fB)\fP in extended/very magic
\fB)\fP    use \fB\e(\fP in basic/magic, use \fB)\fP in extended/very magic
\fB\ed\fP   matches previously matched group, were \fId\fP is a digit
.fi
.sp
.SS Ack
.sp
When you use \fBfvi\fP without a file list, \fIack\fP is used to identify
which files contain that pattern.  \fIack\fP and \fIvim\fP both support regular
expressions, but \fIack\fP provides Perl compatible regular expressions and
\fIvim\fP supports regular expressions similar to the GNU regular
expressions. The compatibility between these two types of regular
expressions is rough. I recommend that in this situation, you use Perl
regular expressions as the pattern given on the \fBfvi\fP command line.
Then when the files are opened in \fIvim\fP you may find that \fIvm\fP has
trouble finding the pattern. At this point you should simply type \fB/\fP
and then re\-enter the search pattern, but this time in a \fIvim\fP
compatible manner.
.SH SEE ALSO
.sp
vim(3), grep(3), ack(3)
.SH AUTHOR
Ken Kundert <fvi@nurdletech.com>
.\" Generated by docutils manpage writer.
.
