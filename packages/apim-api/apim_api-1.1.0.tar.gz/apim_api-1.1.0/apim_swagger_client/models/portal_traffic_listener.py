# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortalTrafficListener(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'protocol': 'str',
        'port': 'int',
        'prefix': 'str',
        'address': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'protocol': 'protocol',
        'port': 'port',
        'prefix': 'prefix',
        'address': 'address',
        'url': 'url'
    }

    def __init__(self, id=None, name=None, protocol=None, port=None, prefix=None, address=None, url=None):  # noqa: E501
        """PortalTrafficListener - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._protocol = None
        self._port = None
        self._prefix = None
        self._address = None
        self._url = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.protocol = protocol
        self.port = port
        if prefix is not None:
            self.prefix = prefix
        self.address = address
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this PortalTrafficListener.  # noqa: E501

        The service listener identifier  # noqa: E501

        :return: The id of this PortalTrafficListener.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortalTrafficListener.

        The service listener identifier  # noqa: E501

        :param id: The id of this PortalTrafficListener.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this PortalTrafficListener.  # noqa: E501

        The name of the service listener  # noqa: E501

        :return: The name of this PortalTrafficListener.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortalTrafficListener.

        The name of the service listener  # noqa: E501

        :param name: The name of this PortalTrafficListener.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this PortalTrafficListener.  # noqa: E501

        The listener protocol  # noqa: E501

        :return: The protocol of this PortalTrafficListener.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PortalTrafficListener.

        The listener protocol  # noqa: E501

        :param protocol: The protocol of this PortalTrafficListener.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def port(self):
        """Gets the port of this PortalTrafficListener.  # noqa: E501

        The listener port  # noqa: E501

        :return: The port of this PortalTrafficListener.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PortalTrafficListener.

        The listener port  # noqa: E501

        :param port: The port of this PortalTrafficListener.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def prefix(self):
        """Gets the prefix of this PortalTrafficListener.  # noqa: E501

        The listener prefix  # noqa: E501

        :return: The prefix of this PortalTrafficListener.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this PortalTrafficListener.

        The listener prefix  # noqa: E501

        :param prefix: The prefix of this PortalTrafficListener.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def address(self):
        """Gets the address of this PortalTrafficListener.  # noqa: E501

        The listener address  # noqa: E501

        :return: The address of this PortalTrafficListener.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PortalTrafficListener.

        The listener address  # noqa: E501

        :param address: The address of this PortalTrafficListener.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def url(self):
        """Gets the url of this PortalTrafficListener.  # noqa: E501

        The listener URL  # noqa: E501

        :return: The url of this PortalTrafficListener.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PortalTrafficListener.

        The listener URL  # noqa: E501

        :param url: The url of this PortalTrafficListener.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortalTrafficListener, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortalTrafficListener):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
