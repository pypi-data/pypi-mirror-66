# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomPropertiesConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'dict(str, CustomProperty)',
        'organization': 'dict(str, CustomProperty)',
        'application': 'dict(str, CustomProperty)',
        'api': 'dict(str, CustomProperty)'
    }

    attribute_map = {
        'user': 'user',
        'organization': 'organization',
        'application': 'application',
        'api': 'api'
    }

    def __init__(self, user=None, organization=None, application=None, api=None):  # noqa: E501
        """CustomPropertiesConfig - a model defined in Swagger"""  # noqa: E501

        self._user = None
        self._organization = None
        self._application = None
        self._api = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if organization is not None:
            self.organization = organization
        if application is not None:
            self.application = application
        if api is not None:
            self.api = api

    @property
    def user(self):
        """Gets the user of this CustomPropertiesConfig.  # noqa: E501

        Dictionary containing the custom properties defined for API Manager User entities  # noqa: E501

        :return: The user of this CustomPropertiesConfig.  # noqa: E501
        :rtype: dict(str, CustomProperty)
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CustomPropertiesConfig.

        Dictionary containing the custom properties defined for API Manager User entities  # noqa: E501

        :param user: The user of this CustomPropertiesConfig.  # noqa: E501
        :type: dict(str, CustomProperty)
        """

        self._user = user

    @property
    def organization(self):
        """Gets the organization of this CustomPropertiesConfig.  # noqa: E501

        Dictionary containing the custom properties defined for API Manager Organization entities  # noqa: E501

        :return: The organization of this CustomPropertiesConfig.  # noqa: E501
        :rtype: dict(str, CustomProperty)
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CustomPropertiesConfig.

        Dictionary containing the custom properties defined for API Manager Organization entities  # noqa: E501

        :param organization: The organization of this CustomPropertiesConfig.  # noqa: E501
        :type: dict(str, CustomProperty)
        """

        self._organization = organization

    @property
    def application(self):
        """Gets the application of this CustomPropertiesConfig.  # noqa: E501

        Dictionary containing the custom properties defined for API Manager Application entities  # noqa: E501

        :return: The application of this CustomPropertiesConfig.  # noqa: E501
        :rtype: dict(str, CustomProperty)
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this CustomPropertiesConfig.

        Dictionary containing the custom properties defined for API Manager Application entities  # noqa: E501

        :param application: The application of this CustomPropertiesConfig.  # noqa: E501
        :type: dict(str, CustomProperty)
        """

        self._application = application

    @property
    def api(self):
        """Gets the api of this CustomPropertiesConfig.  # noqa: E501

        Dictionary containing the custom properties defined for API Manager Frontend API entities  # noqa: E501

        :return: The api of this CustomPropertiesConfig.  # noqa: E501
        :rtype: dict(str, CustomProperty)
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this CustomPropertiesConfig.

        Dictionary containing the custom properties defined for API Manager Frontend API entities  # noqa: E501

        :param api: The api of this CustomPropertiesConfig.  # noqa: E501
        :type: dict(str, CustomProperty)
        """

        self._api = api

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomPropertiesConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomPropertiesConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
