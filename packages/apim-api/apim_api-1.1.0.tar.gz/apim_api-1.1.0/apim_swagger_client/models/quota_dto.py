# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuotaDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'name': 'str',
        'description': 'str',
        'restrictions': 'list[QuotaApiConstraintDTO]',
        'system': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'restrictions': 'restrictions',
        'system': 'system'
    }

    def __init__(self, id=None, type=None, name=None, description=None, restrictions=None, system=False):  # noqa: E501
        """QuotaDTO - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._name = None
        self._description = None
        self._restrictions = None
        self._system = None
        self.discriminator = None

        self.id = id
        self.type = type
        self.name = name
        if description is not None:
            self.description = description
        if restrictions is not None:
            self.restrictions = restrictions
        if system is not None:
            self.system = system

    @property
    def id(self):
        """Gets the id of this QuotaDTO.  # noqa: E501

        The quota identifier  # noqa: E501

        :return: The id of this QuotaDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuotaDTO.

        The quota identifier  # noqa: E501

        :param id: The id of this QuotaDTO.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this QuotaDTO.  # noqa: E501

        The quota type, either API or APPLICATION  # noqa: E501

        :return: The type of this QuotaDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuotaDTO.

        The quota type, either API or APPLICATION  # noqa: E501

        :param type: The type of this QuotaDTO.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["API", "APPLICATION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this QuotaDTO.  # noqa: E501

        The name of the quota  # noqa: E501

        :return: The name of this QuotaDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuotaDTO.

        The name of the quota  # noqa: E501

        :param name: The name of this QuotaDTO.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this QuotaDTO.  # noqa: E501

        The quota for MyApplication the overrides default Application quota  # noqa: E501

        :return: The description of this QuotaDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this QuotaDTO.

        The quota for MyApplication the overrides default Application quota  # noqa: E501

        :param description: The description of this QuotaDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def restrictions(self):
        """Gets the restrictions of this QuotaDTO.  # noqa: E501

        An array of restrictions imposed on the quota  # noqa: E501

        :return: The restrictions of this QuotaDTO.  # noqa: E501
        :rtype: list[QuotaApiConstraintDTO]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this QuotaDTO.

        An array of restrictions imposed on the quota  # noqa: E501

        :param restrictions: The restrictions of this QuotaDTO.  # noqa: E501
        :type: list[QuotaApiConstraintDTO]
        """

        self._restrictions = restrictions

    @property
    def system(self):
        """Gets the system of this QuotaDTO.  # noqa: E501

        Indicates if the quota is system (protected)  # noqa: E501

        :return: The system of this QuotaDTO.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this QuotaDTO.

        Indicates if the quota is system (protected)  # noqa: E501

        :param system: The system of this QuotaDTO.  # noqa: E501
        :type: bool
        """

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuotaDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuotaDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
