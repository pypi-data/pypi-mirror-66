# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuotaApiConstraintDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api': 'str',
        'method': 'str',
        'type': 'str',
        'config': 'dict(str, str)'
    }

    attribute_map = {
        'api': 'api',
        'method': 'method',
        'type': 'type',
        'config': 'config'
    }

    def __init__(self, api=None, method=None, type=None, config=None):  # noqa: E501
        """QuotaApiConstraintDTO - a model defined in Swagger"""  # noqa: E501

        self._api = None
        self._method = None
        self._type = None
        self._config = None
        self.discriminator = None

        if api is not None:
            self.api = api
        if method is not None:
            self.method = method
        self.type = type
        if config is not None:
            self.config = config

    @property
    def api(self):
        """Gets the api of this QuotaApiConstraintDTO.  # noqa: E501

        The API identifier from API discovery, or '\\*' for all API  # noqa: E501

        :return: The api of this QuotaApiConstraintDTO.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this QuotaApiConstraintDTO.

        The API identifier from API discovery, or '\\*' for all API  # noqa: E501

        :param api: The api of this QuotaApiConstraintDTO.  # noqa: E501
        :type: str
        """

        self._api = api

    @property
    def method(self):
        """Gets the method of this QuotaApiConstraintDTO.  # noqa: E501

        The API method identifier from API discovery, or '\\*' for all methods  # noqa: E501

        :return: The method of this QuotaApiConstraintDTO.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this QuotaApiConstraintDTO.

        The API method identifier from API discovery, or '\\*' for all methods  # noqa: E501

        :param method: The method of this QuotaApiConstraintDTO.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def type(self):
        """Gets the type of this QuotaApiConstraintDTO.  # noqa: E501

        The restriction type, one of: throttle, throttlemb  # noqa: E501

        :return: The type of this QuotaApiConstraintDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuotaApiConstraintDTO.

        The restriction type, one of: throttle, throttlemb  # noqa: E501

        :param type: The type of this QuotaApiConstraintDTO.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def config(self):
        """Gets the config of this QuotaApiConstraintDTO.  # noqa: E501

        The restriction configuration  # noqa: E501

        :return: The config of this QuotaApiConstraintDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this QuotaApiConstraintDTO.

        The restriction configuration  # noqa: E501

        :param config: The config of this QuotaApiConstraintDTO.  # noqa: E501
        :type: dict(str, str)
        """

        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuotaApiConstraintDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuotaApiConstraintDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
