# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class APIPromotion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frontend': 'FrontendExport',
        'backend': 'BackendExport',
        'export_version': 'int'
    }

    attribute_map = {
        'frontend': 'frontend',
        'backend': 'backend',
        'export_version': 'exportVersion'
    }

    def __init__(self, frontend=None, backend=None, export_version=None):  # noqa: E501
        """APIPromotion - a model defined in Swagger"""  # noqa: E501

        self._frontend = None
        self._backend = None
        self._export_version = None
        self.discriminator = None

        if frontend is not None:
            self.frontend = frontend
        if backend is not None:
            self.backend = backend
        if export_version is not None:
            self.export_version = export_version

    @property
    def frontend(self):
        """Gets the frontend of this APIPromotion.  # noqa: E501

        Frontend API export.  # noqa: E501

        :return: The frontend of this APIPromotion.  # noqa: E501
        :rtype: FrontendExport
        """
        return self._frontend

    @frontend.setter
    def frontend(self, frontend):
        """Sets the frontend of this APIPromotion.

        Frontend API export.  # noqa: E501

        :param frontend: The frontend of this APIPromotion.  # noqa: E501
        :type: FrontendExport
        """

        self._frontend = frontend

    @property
    def backend(self):
        """Gets the backend of this APIPromotion.  # noqa: E501

        Backend API export.  # noqa: E501

        :return: The backend of this APIPromotion.  # noqa: E501
        :rtype: BackendExport
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this APIPromotion.

        Backend API export.  # noqa: E501

        :param backend: The backend of this APIPromotion.  # noqa: E501
        :type: BackendExport
        """

        self._backend = backend

    @property
    def export_version(self):
        """Gets the export_version of this APIPromotion.  # noqa: E501

        Export version  # noqa: E501

        :return: The export_version of this APIPromotion.  # noqa: E501
        :rtype: int
        """
        return self._export_version

    @export_version.setter
    def export_version(self, export_version):
        """Sets the export_version of this APIPromotion.

        Export version  # noqa: E501

        :param export_version: The export_version of this APIPromotion.  # noqa: E501
        :type: int
        """

        self._export_version = export_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIPromotion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIPromotion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
