# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'organization_id': 'str',
        'name': 'str',
        'description': 'str',
        'login_name': 'str',
        'email': 'str',
        'phone': 'str',
        'mobile': 'str',
        'role': 'str',
        'image': 'str',
        'enabled': 'bool',
        'created_on': 'int',
        'state': 'str',
        'type': 'str',
        'auth_attrs': 'AuthenticatedUserAttributes',
        'dn': 'str'
    }

    attribute_map = {
        'id': 'id',
        'organization_id': 'organizationId',
        'name': 'name',
        'description': 'description',
        'login_name': 'loginName',
        'email': 'email',
        'phone': 'phone',
        'mobile': 'mobile',
        'role': 'role',
        'image': 'image',
        'enabled': 'enabled',
        'created_on': 'createdOn',
        'state': 'state',
        'type': 'type',
        'auth_attrs': 'authAttrs',
        'dn': 'dn'
    }

    def __init__(self, id=None, organization_id=None, name=None, description=None, login_name=None, email=None, phone=None, mobile=None, role=None, image=None, enabled=False, created_on=None, state=None, type=None, auth_attrs=None, dn=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._organization_id = None
        self._name = None
        self._description = None
        self._login_name = None
        self._email = None
        self._phone = None
        self._mobile = None
        self._role = None
        self._image = None
        self._enabled = None
        self._created_on = None
        self._state = None
        self._type = None
        self._auth_attrs = None
        self._dn = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if login_name is not None:
            self.login_name = login_name
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if mobile is not None:
            self.mobile = mobile
        if role is not None:
            self.role = role
        if image is not None:
            self.image = image
        if enabled is not None:
            self.enabled = enabled
        if created_on is not None:
            self.created_on = created_on
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        if auth_attrs is not None:
            self.auth_attrs = auth_attrs
        if dn is not None:
            self.dn = dn

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        The unique identifier for the user  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The unique identifier for the user  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this User.  # noqa: E501

        The unique identifier for the organization to which the user belongs  # noqa: E501

        :return: The organization_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this User.

        The unique identifier for the organization to which the user belongs  # noqa: E501

        :param organization_id: The organization_id of this User.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        The user's name  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The user's name  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this User.  # noqa: E501

        A description of the user  # noqa: E501

        :return: The description of this User.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this User.

        A description of the user  # noqa: E501

        :param description: The description of this User.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def login_name(self):
        """Gets the login_name of this User.  # noqa: E501

        A unique login name for the user  # noqa: E501

        :return: The login_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this User.

        A unique login name for the user  # noqa: E501

        :param login_name: The login_name of this User.  # noqa: E501
        :type: str
        """

        self._login_name = login_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        An email address for the user  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        An email address for the user  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501

        The user's phone number  # noqa: E501

        :return: The phone of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.

        The user's phone number  # noqa: E501

        :param phone: The phone of this User.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def mobile(self):
        """Gets the mobile of this User.  # noqa: E501

        The user's mobile number  # noqa: E501

        :return: The mobile of this User.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this User.

        The user's mobile number  # noqa: E501

        :param mobile: The mobile of this User.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501

        The user's role, one of: user, oadmin, or admin  # noqa: E501

        :return: The role of this User.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.

        The user's role, one of: user, oadmin, or admin  # noqa: E501

        :param role: The role of this User.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def image(self):
        """Gets the image of this User.  # noqa: E501

        The user's photo. To update the image, please refer to the API.  # noqa: E501

        :return: The image of this User.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this User.

        The user's photo. To update the image, please refer to the API.  # noqa: E501

        :param image: The image of this User.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def enabled(self):
        """Gets the enabled of this User.  # noqa: E501

        Indicates whether or not the user account is enabled or not  # noqa: E501

        :return: The enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.

        Indicates whether or not the user account is enabled or not  # noqa: E501

        :param enabled: The enabled of this User.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def created_on(self):
        """Gets the created_on of this User.  # noqa: E501

        Epoch/Unix time stamp when the organization was created  # noqa: E501

        :return: The created_on of this User.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this User.

        Epoch/Unix time stamp when the organization was created  # noqa: E501

        :param created_on: The created_on of this User.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def state(self):
        """Gets the state of this User.  # noqa: E501

        The current state of the account, one of: approved, pending  # noqa: E501

        :return: The state of this User.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this User.

        The current state of the account, one of: approved, pending  # noqa: E501

        :param state: The state of this User.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this User.  # noqa: E501

        Indicates the type of user. Possible values: internal, external  # noqa: E501

        :return: The type of this User.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this User.

        Indicates the type of user. Possible values: internal, external  # noqa: E501

        :param type: The type of this User.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def auth_attrs(self):
        """Gets the auth_attrs of this User.  # noqa: E501


        :return: The auth_attrs of this User.  # noqa: E501
        :rtype: AuthenticatedUserAttributes
        """
        return self._auth_attrs

    @auth_attrs.setter
    def auth_attrs(self, auth_attrs):
        """Sets the auth_attrs of this User.


        :param auth_attrs: The auth_attrs of this User.  # noqa: E501
        :type: AuthenticatedUserAttributes
        """

        self._auth_attrs = auth_attrs

    @property
    def dn(self):
        """Gets the dn of this User.  # noqa: E501


        :return: The dn of this User.  # noqa: E501
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this User.


        :param dn: The dn of this User.  # noqa: E501
        :type: str
        """

        self._dn = dn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
