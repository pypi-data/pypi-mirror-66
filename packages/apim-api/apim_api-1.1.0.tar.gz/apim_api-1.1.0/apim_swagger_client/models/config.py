# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portal_name': 'str',
        'portal_hostname': 'str',
        'api_portal_name': 'str',
        'api_portal_hostname': 'str',
        'is_api_portal_configured': 'bool',
        'registration_enabled': 'bool',
        'reset_password_enabled': 'bool',
        'change_password_on_first_login': 'bool',
        'password_expiry_enabled': 'bool',
        'password_lifetime_days': 'int',
        'minimum_password_length': 'int',
        'auto_approve_user_registration': 'bool',
        'system_o_auth_scopes_enabled': 'bool',
        'application_scope_restrictions': 'bool',
        'auto_approve_applications': 'bool',
        'delegate_user_administration': 'bool',
        'delegate_application_administration': 'bool',
        'api_default_virtual_host': 'str',
        'api_routing_key_enabled': 'bool',
        'api_routing_key_location': 'str',
        'email_from': 'str',
        'email_bounce_address': 'str',
        'promote_api_via_policy': 'bool',
        'global_policies_enabled': 'bool',
        'global_request_policy': 'str',
        'global_response_policy': 'str',
        'fault_handlers_enabled': 'bool',
        'global_fault_handler_policy': 'str',
        'strict_certificate_checking': 'bool',
        'server_certificate_verification': 'bool',
        'advisory_banner_enabled': 'bool',
        'advisory_banner_text': 'str',
        'base_o_auth': 'bool',
        'external_user_name': 'str',
        'external_user_description': 'str',
        'external_user_phone': 'str',
        'external_user_email': 'str',
        'external_user_organization': 'str',
        'external_user_role': 'str',
        'external_user_enabled': 'str',
        'session_idle_timeout': 'int',
        'is_trial': 'bool',
        'default_trial_duration': 'int',
        'login_name_regex': 'str',
        'product_version': 'str',
        'os': 'str',
        'architecture': 'str'
    }

    attribute_map = {
        'portal_name': 'portalName',
        'portal_hostname': 'portalHostname',
        'api_portal_name': 'apiPortalName',
        'api_portal_hostname': 'apiPortalHostname',
        'is_api_portal_configured': 'isApiPortalConfigured',
        'registration_enabled': 'registrationEnabled',
        'reset_password_enabled': 'resetPasswordEnabled',
        'change_password_on_first_login': 'changePasswordOnFirstLogin',
        'password_expiry_enabled': 'passwordExpiryEnabled',
        'password_lifetime_days': 'passwordLifetimeDays',
        'minimum_password_length': 'minimumPasswordLength',
        'auto_approve_user_registration': 'autoApproveUserRegistration',
        'system_o_auth_scopes_enabled': 'systemOAuthScopesEnabled',
        'application_scope_restrictions': 'applicationScopeRestrictions',
        'auto_approve_applications': 'autoApproveApplications',
        'delegate_user_administration': 'delegateUserAdministration',
        'delegate_application_administration': 'delegateApplicationAdministration',
        'api_default_virtual_host': 'apiDefaultVirtualHost',
        'api_routing_key_enabled': 'apiRoutingKeyEnabled',
        'api_routing_key_location': 'apiRoutingKeyLocation',
        'email_from': 'emailFrom',
        'email_bounce_address': 'emailBounceAddress',
        'promote_api_via_policy': 'promoteApiViaPolicy',
        'global_policies_enabled': 'globalPoliciesEnabled',
        'global_request_policy': 'globalRequestPolicy',
        'global_response_policy': 'globalResponsePolicy',
        'fault_handlers_enabled': 'faultHandlersEnabled',
        'global_fault_handler_policy': 'globalFaultHandlerPolicy',
        'strict_certificate_checking': 'strictCertificateChecking',
        'server_certificate_verification': 'serverCertificateVerification',
        'advisory_banner_enabled': 'advisoryBannerEnabled',
        'advisory_banner_text': 'advisoryBannerText',
        'base_o_auth': 'baseOAuth',
        'external_user_name': 'externalUserName',
        'external_user_description': 'externalUserDescription',
        'external_user_phone': 'externalUserPhone',
        'external_user_email': 'externalUserEmail',
        'external_user_organization': 'externalUserOrganization',
        'external_user_role': 'externalUserRole',
        'external_user_enabled': 'externalUserEnabled',
        'session_idle_timeout': 'sessionIdleTimeout',
        'is_trial': 'isTrial',
        'default_trial_duration': 'defaultTrialDuration',
        'login_name_regex': 'loginNameRegex',
        'product_version': 'productVersion',
        'os': 'os',
        'architecture': 'architecture'
    }

    def __init__(self, portal_name=None, portal_hostname=None, api_portal_name=None, api_portal_hostname=None, is_api_portal_configured=False, registration_enabled=False, reset_password_enabled=False, change_password_on_first_login=False, password_expiry_enabled=False, password_lifetime_days=None, minimum_password_length=None, auto_approve_user_registration=False, system_o_auth_scopes_enabled=False, application_scope_restrictions=False, auto_approve_applications=False, delegate_user_administration=False, delegate_application_administration=False, api_default_virtual_host=None, api_routing_key_enabled=False, api_routing_key_location=None, email_from=None, email_bounce_address=None, promote_api_via_policy=False, global_policies_enabled=False, global_request_policy=None, global_response_policy=None, fault_handlers_enabled=False, global_fault_handler_policy=None, strict_certificate_checking=False, server_certificate_verification=False, advisory_banner_enabled=False, advisory_banner_text=None, base_o_auth=False, external_user_name=None, external_user_description=None, external_user_phone=None, external_user_email=None, external_user_organization=None, external_user_role=None, external_user_enabled=None, session_idle_timeout=None, is_trial=False, default_trial_duration=None, login_name_regex=None, product_version=None, os=None, architecture=None):  # noqa: E501
        """Config - a model defined in Swagger"""  # noqa: E501

        self._portal_name = None
        self._portal_hostname = None
        self._api_portal_name = None
        self._api_portal_hostname = None
        self._is_api_portal_configured = None
        self._registration_enabled = None
        self._reset_password_enabled = None
        self._change_password_on_first_login = None
        self._password_expiry_enabled = None
        self._password_lifetime_days = None
        self._minimum_password_length = None
        self._auto_approve_user_registration = None
        self._system_o_auth_scopes_enabled = None
        self._application_scope_restrictions = None
        self._auto_approve_applications = None
        self._delegate_user_administration = None
        self._delegate_application_administration = None
        self._api_default_virtual_host = None
        self._api_routing_key_enabled = None
        self._api_routing_key_location = None
        self._email_from = None
        self._email_bounce_address = None
        self._promote_api_via_policy = None
        self._global_policies_enabled = None
        self._global_request_policy = None
        self._global_response_policy = None
        self._fault_handlers_enabled = None
        self._global_fault_handler_policy = None
        self._strict_certificate_checking = None
        self._server_certificate_verification = None
        self._advisory_banner_enabled = None
        self._advisory_banner_text = None
        self._base_o_auth = None
        self._external_user_name = None
        self._external_user_description = None
        self._external_user_phone = None
        self._external_user_email = None
        self._external_user_organization = None
        self._external_user_role = None
        self._external_user_enabled = None
        self._session_idle_timeout = None
        self._is_trial = None
        self._default_trial_duration = None
        self._login_name_regex = None
        self._product_version = None
        self._os = None
        self._architecture = None
        self.discriminator = None

        if portal_name is not None:
            self.portal_name = portal_name
        if portal_hostname is not None:
            self.portal_hostname = portal_hostname
        if api_portal_name is not None:
            self.api_portal_name = api_portal_name
        if api_portal_hostname is not None:
            self.api_portal_hostname = api_portal_hostname
        if is_api_portal_configured is not None:
            self.is_api_portal_configured = is_api_portal_configured
        if registration_enabled is not None:
            self.registration_enabled = registration_enabled
        if reset_password_enabled is not None:
            self.reset_password_enabled = reset_password_enabled
        if change_password_on_first_login is not None:
            self.change_password_on_first_login = change_password_on_first_login
        if password_expiry_enabled is not None:
            self.password_expiry_enabled = password_expiry_enabled
        if password_lifetime_days is not None:
            self.password_lifetime_days = password_lifetime_days
        if minimum_password_length is not None:
            self.minimum_password_length = minimum_password_length
        if auto_approve_user_registration is not None:
            self.auto_approve_user_registration = auto_approve_user_registration
        if system_o_auth_scopes_enabled is not None:
            self.system_o_auth_scopes_enabled = system_o_auth_scopes_enabled
        if application_scope_restrictions is not None:
            self.application_scope_restrictions = application_scope_restrictions
        if auto_approve_applications is not None:
            self.auto_approve_applications = auto_approve_applications
        if delegate_user_administration is not None:
            self.delegate_user_administration = delegate_user_administration
        if delegate_application_administration is not None:
            self.delegate_application_administration = delegate_application_administration
        if api_default_virtual_host is not None:
            self.api_default_virtual_host = api_default_virtual_host
        if api_routing_key_enabled is not None:
            self.api_routing_key_enabled = api_routing_key_enabled
        if api_routing_key_location is not None:
            self.api_routing_key_location = api_routing_key_location
        if email_from is not None:
            self.email_from = email_from
        if email_bounce_address is not None:
            self.email_bounce_address = email_bounce_address
        if promote_api_via_policy is not None:
            self.promote_api_via_policy = promote_api_via_policy
        if global_policies_enabled is not None:
            self.global_policies_enabled = global_policies_enabled
        if global_request_policy is not None:
            self.global_request_policy = global_request_policy
        if global_response_policy is not None:
            self.global_response_policy = global_response_policy
        if fault_handlers_enabled is not None:
            self.fault_handlers_enabled = fault_handlers_enabled
        if global_fault_handler_policy is not None:
            self.global_fault_handler_policy = global_fault_handler_policy
        if strict_certificate_checking is not None:
            self.strict_certificate_checking = strict_certificate_checking
        if server_certificate_verification is not None:
            self.server_certificate_verification = server_certificate_verification
        if advisory_banner_enabled is not None:
            self.advisory_banner_enabled = advisory_banner_enabled
        if advisory_banner_text is not None:
            self.advisory_banner_text = advisory_banner_text
        if base_o_auth is not None:
            self.base_o_auth = base_o_auth
        if external_user_name is not None:
            self.external_user_name = external_user_name
        if external_user_description is not None:
            self.external_user_description = external_user_description
        if external_user_phone is not None:
            self.external_user_phone = external_user_phone
        if external_user_email is not None:
            self.external_user_email = external_user_email
        if external_user_organization is not None:
            self.external_user_organization = external_user_organization
        if external_user_role is not None:
            self.external_user_role = external_user_role
        if external_user_enabled is not None:
            self.external_user_enabled = external_user_enabled
        self.session_idle_timeout = session_idle_timeout
        if is_trial is not None:
            self.is_trial = is_trial
        if default_trial_duration is not None:
            self.default_trial_duration = default_trial_duration
        if login_name_regex is not None:
            self.login_name_regex = login_name_regex
        if product_version is not None:
            self.product_version = product_version
        if os is not None:
            self.os = os
        if architecture is not None:
            self.architecture = architecture

    @property
    def portal_name(self):
        """Gets the portal_name of this Config.  # noqa: E501

        The name of the API Manager.  # noqa: E501

        :return: The portal_name of this Config.  # noqa: E501
        :rtype: str
        """
        return self._portal_name

    @portal_name.setter
    def portal_name(self, portal_name):
        """Sets the portal_name of this Config.

        The name of the API Manager.  # noqa: E501

        :param portal_name: The portal_name of this Config.  # noqa: E501
        :type: str
        """

        self._portal_name = portal_name

    @property
    def portal_hostname(self):
        """Gets the portal_hostname of this Config.  # noqa: E501

        The network hostname or IP Address of the API Manager which will be used in email links.  # noqa: E501

        :return: The portal_hostname of this Config.  # noqa: E501
        :rtype: str
        """
        return self._portal_hostname

    @portal_hostname.setter
    def portal_hostname(self, portal_hostname):
        """Sets the portal_hostname of this Config.

        The network hostname or IP Address of the API Manager which will be used in email links.  # noqa: E501

        :param portal_hostname: The portal_hostname of this Config.  # noqa: E501
        :type: str
        """

        self._portal_hostname = portal_hostname

    @property
    def api_portal_name(self):
        """Gets the api_portal_name of this Config.  # noqa: E501

        The name of the API Portal  # noqa: E501

        :return: The api_portal_name of this Config.  # noqa: E501
        :rtype: str
        """
        return self._api_portal_name

    @api_portal_name.setter
    def api_portal_name(self, api_portal_name):
        """Sets the api_portal_name of this Config.

        The name of the API Portal  # noqa: E501

        :param api_portal_name: The api_portal_name of this Config.  # noqa: E501
        :type: str
        """

        self._api_portal_name = api_portal_name

    @property
    def api_portal_hostname(self):
        """Gets the api_portal_hostname of this Config.  # noqa: E501

        The network hostname or IP Address of the API Portal which will be used in email links.  # noqa: E501

        :return: The api_portal_hostname of this Config.  # noqa: E501
        :rtype: str
        """
        return self._api_portal_hostname

    @api_portal_hostname.setter
    def api_portal_hostname(self, api_portal_hostname):
        """Sets the api_portal_hostname of this Config.

        The network hostname or IP Address of the API Portal which will be used in email links.  # noqa: E501

        :param api_portal_hostname: The api_portal_hostname of this Config.  # noqa: E501
        :type: str
        """

        self._api_portal_hostname = api_portal_hostname

    @property
    def is_api_portal_configured(self):
        """Gets the is_api_portal_configured of this Config.  # noqa: E501

        Indicates if the API Portal is configured.  # noqa: E501

        :return: The is_api_portal_configured of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._is_api_portal_configured

    @is_api_portal_configured.setter
    def is_api_portal_configured(self, is_api_portal_configured):
        """Sets the is_api_portal_configured of this Config.

        Indicates if the API Portal is configured.  # noqa: E501

        :param is_api_portal_configured: The is_api_portal_configured of this Config.  # noqa: E501
        :type: bool
        """

        self._is_api_portal_configured = is_api_portal_configured

    @property
    def registration_enabled(self):
        """Gets the registration_enabled of this Config.  # noqa: E501

        Enables/disables user registration for the API Manager  # noqa: E501

        :return: The registration_enabled of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._registration_enabled

    @registration_enabled.setter
    def registration_enabled(self, registration_enabled):
        """Sets the registration_enabled of this Config.

        Enables/disables user registration for the API Manager  # noqa: E501

        :param registration_enabled: The registration_enabled of this Config.  # noqa: E501
        :type: bool
        """

        self._registration_enabled = registration_enabled

    @property
    def reset_password_enabled(self):
        """Gets the reset_password_enabled of this Config.  # noqa: E501

        Enables/disables support for resetting user passwords for the API Manager  # noqa: E501

        :return: The reset_password_enabled of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._reset_password_enabled

    @reset_password_enabled.setter
    def reset_password_enabled(self, reset_password_enabled):
        """Sets the reset_password_enabled of this Config.

        Enables/disables support for resetting user passwords for the API Manager  # noqa: E501

        :param reset_password_enabled: The reset_password_enabled of this Config.  # noqa: E501
        :type: bool
        """

        self._reset_password_enabled = reset_password_enabled

    @property
    def change_password_on_first_login(self):
        """Gets the change_password_on_first_login of this Config.  # noqa: E501

        Enables/disables support for changing user passwords on first login for the API Manager  # noqa: E501

        :return: The change_password_on_first_login of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._change_password_on_first_login

    @change_password_on_first_login.setter
    def change_password_on_first_login(self, change_password_on_first_login):
        """Sets the change_password_on_first_login of this Config.

        Enables/disables support for changing user passwords on first login for the API Manager  # noqa: E501

        :param change_password_on_first_login: The change_password_on_first_login of this Config.  # noqa: E501
        :type: bool
        """

        self._change_password_on_first_login = change_password_on_first_login

    @property
    def password_expiry_enabled(self):
        """Gets the password_expiry_enabled of this Config.  # noqa: E501

        Enables/disables support for user passwords expiration for the API Manager  # noqa: E501

        :return: The password_expiry_enabled of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._password_expiry_enabled

    @password_expiry_enabled.setter
    def password_expiry_enabled(self, password_expiry_enabled):
        """Sets the password_expiry_enabled of this Config.

        Enables/disables support for user passwords expiration for the API Manager  # noqa: E501

        :param password_expiry_enabled: The password_expiry_enabled of this Config.  # noqa: E501
        :type: bool
        """

        self._password_expiry_enabled = password_expiry_enabled

    @property
    def password_lifetime_days(self):
        """Gets the password_lifetime_days of this Config.  # noqa: E501

        The number of days before user passwords expire for the API Manager  # noqa: E501

        :return: The password_lifetime_days of this Config.  # noqa: E501
        :rtype: int
        """
        return self._password_lifetime_days

    @password_lifetime_days.setter
    def password_lifetime_days(self, password_lifetime_days):
        """Sets the password_lifetime_days of this Config.

        The number of days before user passwords expire for the API Manager  # noqa: E501

        :param password_lifetime_days: The password_lifetime_days of this Config.  # noqa: E501
        :type: int
        """

        self._password_lifetime_days = password_lifetime_days

    @property
    def minimum_password_length(self):
        """Gets the minimum_password_length of this Config.  # noqa: E501

        The minimum password length.  # noqa: E501

        :return: The minimum_password_length of this Config.  # noqa: E501
        :rtype: int
        """
        return self._minimum_password_length

    @minimum_password_length.setter
    def minimum_password_length(self, minimum_password_length):
        """Sets the minimum_password_length of this Config.

        The minimum password length.  # noqa: E501

        :param minimum_password_length: The minimum_password_length of this Config.  # noqa: E501
        :type: int
        """

        self._minimum_password_length = minimum_password_length

    @property
    def auto_approve_user_registration(self):
        """Gets the auto_approve_user_registration of this Config.  # noqa: E501

        Enables/disables auto-approve for user registration whereby API Administrator or Organization Administrator approval is not required.  # noqa: E501

        :return: The auto_approve_user_registration of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_user_registration

    @auto_approve_user_registration.setter
    def auto_approve_user_registration(self, auto_approve_user_registration):
        """Sets the auto_approve_user_registration of this Config.

        Enables/disables auto-approve for user registration whereby API Administrator or Organization Administrator approval is not required.  # noqa: E501

        :param auto_approve_user_registration: The auto_approve_user_registration of this Config.  # noqa: E501
        :type: bool
        """

        self._auto_approve_user_registration = auto_approve_user_registration

    @property
    def system_o_auth_scopes_enabled(self):
        """Gets the system_o_auth_scopes_enabled of this Config.  # noqa: E501

        Enables/disables the ability to add System scopes to an Application. These scopes represent Gateway OAuth resources that are not covered by APIs.  # noqa: E501

        :return: The system_o_auth_scopes_enabled of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._system_o_auth_scopes_enabled

    @system_o_auth_scopes_enabled.setter
    def system_o_auth_scopes_enabled(self, system_o_auth_scopes_enabled):
        """Sets the system_o_auth_scopes_enabled of this Config.

        Enables/disables the ability to add System scopes to an Application. These scopes represent Gateway OAuth resources that are not covered by APIs.  # noqa: E501

        :param system_o_auth_scopes_enabled: The system_o_auth_scopes_enabled of this Config.  # noqa: E501
        :type: bool
        """

        self._system_o_auth_scopes_enabled = system_o_auth_scopes_enabled

    @property
    def application_scope_restrictions(self):
        """Gets the application_scope_restrictions of this Config.  # noqa: E501

        Enables/disables the ability to show Application default enabled scopes only.  # noqa: E501

        :return: The application_scope_restrictions of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._application_scope_restrictions

    @application_scope_restrictions.setter
    def application_scope_restrictions(self, application_scope_restrictions):
        """Sets the application_scope_restrictions of this Config.

        Enables/disables the ability to show Application default enabled scopes only.  # noqa: E501

        :param application_scope_restrictions: The application_scope_restrictions of this Config.  # noqa: E501
        :type: bool
        """

        self._application_scope_restrictions = application_scope_restrictions

    @property
    def auto_approve_applications(self):
        """Gets the auto_approve_applications of this Config.  # noqa: E501

        Enables/disables auto-application approval whereby users do not need API Administrator or Organization Administrator approval.  # noqa: E501

        :return: The auto_approve_applications of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_applications

    @auto_approve_applications.setter
    def auto_approve_applications(self, auto_approve_applications):
        """Sets the auto_approve_applications of this Config.

        Enables/disables auto-application approval whereby users do not need API Administrator or Organization Administrator approval.  # noqa: E501

        :param auto_approve_applications: The auto_approve_applications of this Config.  # noqa: E501
        :type: bool
        """

        self._auto_approve_applications = auto_approve_applications

    @property
    def delegate_user_administration(self):
        """Gets the delegate_user_administration of this Config.  # noqa: E501

        Enables/disables user administration to the Organization Administrators.  # noqa: E501

        :return: The delegate_user_administration of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._delegate_user_administration

    @delegate_user_administration.setter
    def delegate_user_administration(self, delegate_user_administration):
        """Sets the delegate_user_administration of this Config.

        Enables/disables user administration to the Organization Administrators.  # noqa: E501

        :param delegate_user_administration: The delegate_user_administration of this Config.  # noqa: E501
        :type: bool
        """

        self._delegate_user_administration = delegate_user_administration

    @property
    def delegate_application_administration(self):
        """Gets the delegate_application_administration of this Config.  # noqa: E501

        Enables/disables application administration to the Organization Administrators.  # noqa: E501

        :return: The delegate_application_administration of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._delegate_application_administration

    @delegate_application_administration.setter
    def delegate_application_administration(self, delegate_application_administration):
        """Sets the delegate_application_administration of this Config.

        Enables/disables application administration to the Organization Administrators.  # noqa: E501

        :param delegate_application_administration: The delegate_application_administration of this Config.  # noqa: E501
        :type: bool
        """

        self._delegate_application_administration = delegate_application_administration

    @property
    def api_default_virtual_host(self):
        """Gets the api_default_virtual_host of this Config.  # noqa: E501

        The network host and port that serves as the default virtual host from which API Manager registered API will be accessible through.  # noqa: E501

        :return: The api_default_virtual_host of this Config.  # noqa: E501
        :rtype: str
        """
        return self._api_default_virtual_host

    @api_default_virtual_host.setter
    def api_default_virtual_host(self, api_default_virtual_host):
        """Sets the api_default_virtual_host of this Config.

        The network host and port that serves as the default virtual host from which API Manager registered API will be accessible through.  # noqa: E501

        :param api_default_virtual_host: The api_default_virtual_host of this Config.  # noqa: E501
        :type: str
        """

        self._api_default_virtual_host = api_default_virtual_host

    @property
    def api_routing_key_enabled(self):
        """Gets the api_routing_key_enabled of this Config.  # noqa: E501

        Enable routing to APIs on the same base path.  # noqa: E501

        :return: The api_routing_key_enabled of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._api_routing_key_enabled

    @api_routing_key_enabled.setter
    def api_routing_key_enabled(self, api_routing_key_enabled):
        """Sets the api_routing_key_enabled of this Config.

        Enable routing to APIs on the same base path.  # noqa: E501

        :param api_routing_key_enabled: The api_routing_key_enabled of this Config.  # noqa: E501
        :type: bool
        """

        self._api_routing_key_enabled = api_routing_key_enabled

    @property
    def api_routing_key_location(self):
        """Gets the api_routing_key_location of this Config.  # noqa: E501

        An additional routing key is required to support multiple APIs registered on the same base path. This indicates where to look for the value.  # noqa: E501

        :return: The api_routing_key_location of this Config.  # noqa: E501
        :rtype: str
        """
        return self._api_routing_key_location

    @api_routing_key_location.setter
    def api_routing_key_location(self, api_routing_key_location):
        """Sets the api_routing_key_location of this Config.

        An additional routing key is required to support multiple APIs registered on the same base path. This indicates where to look for the value.  # noqa: E501

        :param api_routing_key_location: The api_routing_key_location of this Config.  # noqa: E501
        :type: str
        """

        self._api_routing_key_location = api_routing_key_location

    @property
    def email_from(self):
        """Gets the email_from of this Config.  # noqa: E501

        The 'from' address used in emails.  # noqa: E501

        :return: The email_from of this Config.  # noqa: E501
        :rtype: str
        """
        return self._email_from

    @email_from.setter
    def email_from(self, email_from):
        """Sets the email_from of this Config.

        The 'from' address used in emails.  # noqa: E501

        :param email_from: The email_from of this Config.  # noqa: E501
        :type: str
        """

        self._email_from = email_from

    @property
    def email_bounce_address(self):
        """Gets the email_bounce_address of this Config.  # noqa: E501

        An email address where undeliverable emails will be bounced to.  # noqa: E501

        :return: The email_bounce_address of this Config.  # noqa: E501
        :rtype: str
        """
        return self._email_bounce_address

    @email_bounce_address.setter
    def email_bounce_address(self, email_bounce_address):
        """Sets the email_bounce_address of this Config.

        An email address where undeliverable emails will be bounced to.  # noqa: E501

        :param email_bounce_address: The email_bounce_address of this Config.  # noqa: E501
        :type: str
        """

        self._email_bounce_address = email_bounce_address

    @property
    def promote_api_via_policy(self):
        """Gets the promote_api_via_policy of this Config.  # noqa: E501

        Enables/disables API promotion via policy.  # noqa: E501

        :return: The promote_api_via_policy of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._promote_api_via_policy

    @promote_api_via_policy.setter
    def promote_api_via_policy(self, promote_api_via_policy):
        """Sets the promote_api_via_policy of this Config.

        Enables/disables API promotion via policy.  # noqa: E501

        :param promote_api_via_policy: The promote_api_via_policy of this Config.  # noqa: E501
        :type: bool
        """

        self._promote_api_via_policy = promote_api_via_policy

    @property
    def global_policies_enabled(self):
        """Gets the global_policies_enabled of this Config.  # noqa: E501

        Enables/disables Global policies.  # noqa: E501

        :return: The global_policies_enabled of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._global_policies_enabled

    @global_policies_enabled.setter
    def global_policies_enabled(self, global_policies_enabled):
        """Sets the global_policies_enabled of this Config.

        Enables/disables Global policies.  # noqa: E501

        :param global_policies_enabled: The global_policies_enabled of this Config.  # noqa: E501
        :type: bool
        """

        self._global_policies_enabled = global_policies_enabled

    @property
    def global_request_policy(self):
        """Gets the global_request_policy of this Config.  # noqa: E501

        The Global Request Policy to be executed for all Frontend API calls. Must be a valid policy ID. Can be null to indicate no policy  # noqa: E501

        :return: The global_request_policy of this Config.  # noqa: E501
        :rtype: str
        """
        return self._global_request_policy

    @global_request_policy.setter
    def global_request_policy(self, global_request_policy):
        """Sets the global_request_policy of this Config.

        The Global Request Policy to be executed for all Frontend API calls. Must be a valid policy ID. Can be null to indicate no policy  # noqa: E501

        :param global_request_policy: The global_request_policy of this Config.  # noqa: E501
        :type: str
        """

        self._global_request_policy = global_request_policy

    @property
    def global_response_policy(self):
        """Gets the global_response_policy of this Config.  # noqa: E501

        The Global Response Policy to be executed for all Frontend API calls. Must be a valid policy ID. Can be null to indicate no policy  # noqa: E501

        :return: The global_response_policy of this Config.  # noqa: E501
        :rtype: str
        """
        return self._global_response_policy

    @global_response_policy.setter
    def global_response_policy(self, global_response_policy):
        """Sets the global_response_policy of this Config.

        The Global Response Policy to be executed for all Frontend API calls. Must be a valid policy ID. Can be null to indicate no policy  # noqa: E501

        :param global_response_policy: The global_response_policy of this Config.  # noqa: E501
        :type: str
        """

        self._global_response_policy = global_response_policy

    @property
    def fault_handlers_enabled(self):
        """Gets the fault_handlers_enabled of this Config.  # noqa: E501

        Enables/disables API Manager fault handlers.  # noqa: E501

        :return: The fault_handlers_enabled of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._fault_handlers_enabled

    @fault_handlers_enabled.setter
    def fault_handlers_enabled(self, fault_handlers_enabled):
        """Sets the fault_handlers_enabled of this Config.

        Enables/disables API Manager fault handlers.  # noqa: E501

        :param fault_handlers_enabled: The fault_handlers_enabled of this Config.  # noqa: E501
        :type: bool
        """

        self._fault_handlers_enabled = fault_handlers_enabled

    @property
    def global_fault_handler_policy(self):
        """Gets the global_fault_handler_policy of this Config.  # noqa: E501

        The Global Fault Handler Policy to be used by all Frontend APIs in the event of an error. Must be a valid policy ID. Can be null to indicate no policy  # noqa: E501

        :return: The global_fault_handler_policy of this Config.  # noqa: E501
        :rtype: str
        """
        return self._global_fault_handler_policy

    @global_fault_handler_policy.setter
    def global_fault_handler_policy(self, global_fault_handler_policy):
        """Sets the global_fault_handler_policy of this Config.

        The Global Fault Handler Policy to be used by all Frontend APIs in the event of an error. Must be a valid policy ID. Can be null to indicate no policy  # noqa: E501

        :param global_fault_handler_policy: The global_fault_handler_policy of this Config.  # noqa: E501
        :type: str
        """

        self._global_fault_handler_policy = global_fault_handler_policy

    @property
    def strict_certificate_checking(self):
        """Gets the strict_certificate_checking of this Config.  # noqa: E501

        For API import, strict certificate checking will only allow recognised, valid server certificates when performing API imports from SSL protected endpoints. Default is set to true  # noqa: E501

        :return: The strict_certificate_checking of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._strict_certificate_checking

    @strict_certificate_checking.setter
    def strict_certificate_checking(self, strict_certificate_checking):
        """Sets the strict_certificate_checking of this Config.

        For API import, strict certificate checking will only allow recognised, valid server certificates when performing API imports from SSL protected endpoints. Default is set to true  # noqa: E501

        :param strict_certificate_checking: The strict_certificate_checking of this Config.  # noqa: E501
        :type: bool
        """

        self._strict_certificate_checking = strict_certificate_checking

    @property
    def server_certificate_verification(self):
        """Gets the server_certificate_verification of this Config.  # noqa: E501

        Fr API import, server certificate verification ensures that the certificate presented by the server matches the name of the remote host being connected to. Default is set to true  # noqa: E501

        :return: The server_certificate_verification of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._server_certificate_verification

    @server_certificate_verification.setter
    def server_certificate_verification(self, server_certificate_verification):
        """Sets the server_certificate_verification of this Config.

        Fr API import, server certificate verification ensures that the certificate presented by the server matches the name of the remote host being connected to. Default is set to true  # noqa: E501

        :param server_certificate_verification: The server_certificate_verification of this Config.  # noqa: E501
        :type: bool
        """

        self._server_certificate_verification = server_certificate_verification

    @property
    def advisory_banner_enabled(self):
        """Gets the advisory_banner_enabled of this Config.  # noqa: E501

        Enables/disables API Manager advisory banner.  # noqa: E501

        :return: The advisory_banner_enabled of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._advisory_banner_enabled

    @advisory_banner_enabled.setter
    def advisory_banner_enabled(self, advisory_banner_enabled):
        """Sets the advisory_banner_enabled of this Config.

        Enables/disables API Manager advisory banner.  # noqa: E501

        :param advisory_banner_enabled: The advisory_banner_enabled of this Config.  # noqa: E501
        :type: bool
        """

        self._advisory_banner_enabled = advisory_banner_enabled

    @property
    def advisory_banner_text(self):
        """Gets the advisory_banner_text of this Config.  # noqa: E501

        Advisory banner text.  # noqa: E501

        :return: The advisory_banner_text of this Config.  # noqa: E501
        :rtype: str
        """
        return self._advisory_banner_text

    @advisory_banner_text.setter
    def advisory_banner_text(self, advisory_banner_text):
        """Sets the advisory_banner_text of this Config.

        Advisory banner text.  # noqa: E501

        :param advisory_banner_text: The advisory_banner_text of this Config.  # noqa: E501
        :type: str
        """

        self._advisory_banner_text = advisory_banner_text

    @property
    def base_o_auth(self):
        """Gets the base_o_auth of this Config.  # noqa: E501


        :return: The base_o_auth of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._base_o_auth

    @base_o_auth.setter
    def base_o_auth(self, base_o_auth):
        """Sets the base_o_auth of this Config.


        :param base_o_auth: The base_o_auth of this Config.  # noqa: E501
        :type: bool
        """

        self._base_o_auth = base_o_auth

    @property
    def external_user_name(self):
        """Gets the external_user_name of this Config.  # noqa: E501

        External user name  # noqa: E501

        :return: The external_user_name of this Config.  # noqa: E501
        :rtype: str
        """
        return self._external_user_name

    @external_user_name.setter
    def external_user_name(self, external_user_name):
        """Sets the external_user_name of this Config.

        External user name  # noqa: E501

        :param external_user_name: The external_user_name of this Config.  # noqa: E501
        :type: str
        """

        self._external_user_name = external_user_name

    @property
    def external_user_description(self):
        """Gets the external_user_description of this Config.  # noqa: E501

        External user description  # noqa: E501

        :return: The external_user_description of this Config.  # noqa: E501
        :rtype: str
        """
        return self._external_user_description

    @external_user_description.setter
    def external_user_description(self, external_user_description):
        """Sets the external_user_description of this Config.

        External user description  # noqa: E501

        :param external_user_description: The external_user_description of this Config.  # noqa: E501
        :type: str
        """

        self._external_user_description = external_user_description

    @property
    def external_user_phone(self):
        """Gets the external_user_phone of this Config.  # noqa: E501

        External user phone  # noqa: E501

        :return: The external_user_phone of this Config.  # noqa: E501
        :rtype: str
        """
        return self._external_user_phone

    @external_user_phone.setter
    def external_user_phone(self, external_user_phone):
        """Sets the external_user_phone of this Config.

        External user phone  # noqa: E501

        :param external_user_phone: The external_user_phone of this Config.  # noqa: E501
        :type: str
        """

        self._external_user_phone = external_user_phone

    @property
    def external_user_email(self):
        """Gets the external_user_email of this Config.  # noqa: E501

        External user email  # noqa: E501

        :return: The external_user_email of this Config.  # noqa: E501
        :rtype: str
        """
        return self._external_user_email

    @external_user_email.setter
    def external_user_email(self, external_user_email):
        """Sets the external_user_email of this Config.

        External user email  # noqa: E501

        :param external_user_email: The external_user_email of this Config.  # noqa: E501
        :type: str
        """

        self._external_user_email = external_user_email

    @property
    def external_user_organization(self):
        """Gets the external_user_organization of this Config.  # noqa: E501

        External user organization name  # noqa: E501

        :return: The external_user_organization of this Config.  # noqa: E501
        :rtype: str
        """
        return self._external_user_organization

    @external_user_organization.setter
    def external_user_organization(self, external_user_organization):
        """Sets the external_user_organization of this Config.

        External user organization name  # noqa: E501

        :param external_user_organization: The external_user_organization of this Config.  # noqa: E501
        :type: str
        """

        self._external_user_organization = external_user_organization

    @property
    def external_user_role(self):
        """Gets the external_user_role of this Config.  # noqa: E501

        External user role  # noqa: E501

        :return: The external_user_role of this Config.  # noqa: E501
        :rtype: str
        """
        return self._external_user_role

    @external_user_role.setter
    def external_user_role(self, external_user_role):
        """Sets the external_user_role of this Config.

        External user role  # noqa: E501

        :param external_user_role: The external_user_role of this Config.  # noqa: E501
        :type: str
        """

        self._external_user_role = external_user_role

    @property
    def external_user_enabled(self):
        """Gets the external_user_enabled of this Config.  # noqa: E501

        External user enabled  # noqa: E501

        :return: The external_user_enabled of this Config.  # noqa: E501
        :rtype: str
        """
        return self._external_user_enabled

    @external_user_enabled.setter
    def external_user_enabled(self, external_user_enabled):
        """Sets the external_user_enabled of this Config.

        External user enabled  # noqa: E501

        :param external_user_enabled: The external_user_enabled of this Config.  # noqa: E501
        :type: str
        """

        self._external_user_enabled = external_user_enabled

    @property
    def session_idle_timeout(self):
        """Gets the session_idle_timeout of this Config.  # noqa: E501

        Idle session timeout in milliseconds  # noqa: E501

        :return: The session_idle_timeout of this Config.  # noqa: E501
        :rtype: int
        """
        return self._session_idle_timeout

    @session_idle_timeout.setter
    def session_idle_timeout(self, session_idle_timeout):
        """Sets the session_idle_timeout of this Config.

        Idle session timeout in milliseconds  # noqa: E501

        :param session_idle_timeout: The session_idle_timeout of this Config.  # noqa: E501
        :type: int
        """
        if session_idle_timeout is None:
            raise ValueError("Invalid value for `session_idle_timeout`, must not be `None`")  # noqa: E501

        self._session_idle_timeout = session_idle_timeout

    @property
    def is_trial(self):
        """Gets the is_trial of this Config.  # noqa: E501

        Is trial enabled  # noqa: E501

        :return: The is_trial of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._is_trial

    @is_trial.setter
    def is_trial(self, is_trial):
        """Sets the is_trial of this Config.

        Is trial enabled  # noqa: E501

        :param is_trial: The is_trial of this Config.  # noqa: E501
        :type: bool
        """

        self._is_trial = is_trial

    @property
    def default_trial_duration(self):
        """Gets the default_trial_duration of this Config.  # noqa: E501

        Default trial duration in days  # noqa: E501

        :return: The default_trial_duration of this Config.  # noqa: E501
        :rtype: int
        """
        return self._default_trial_duration

    @default_trial_duration.setter
    def default_trial_duration(self, default_trial_duration):
        """Sets the default_trial_duration of this Config.

        Default trial duration in days  # noqa: E501

        :param default_trial_duration: The default_trial_duration of this Config.  # noqa: E501
        :type: int
        """

        self._default_trial_duration = default_trial_duration

    @property
    def login_name_regex(self):
        """Gets the login_name_regex of this Config.  # noqa: E501

        Login name validation regex  # noqa: E501

        :return: The login_name_regex of this Config.  # noqa: E501
        :rtype: str
        """
        return self._login_name_regex

    @login_name_regex.setter
    def login_name_regex(self, login_name_regex):
        """Sets the login_name_regex of this Config.

        Login name validation regex  # noqa: E501

        :param login_name_regex: The login_name_regex of this Config.  # noqa: E501
        :type: str
        """

        self._login_name_regex = login_name_regex

    @property
    def product_version(self):
        """Gets the product_version of this Config.  # noqa: E501

        The Version information of API Manager.  # noqa: E501

        :return: The product_version of this Config.  # noqa: E501
        :rtype: str
        """
        return self._product_version

    @product_version.setter
    def product_version(self, product_version):
        """Sets the product_version of this Config.

        The Version information of API Manager.  # noqa: E501

        :param product_version: The product_version of this Config.  # noqa: E501
        :type: str
        """

        self._product_version = product_version

    @property
    def os(self):
        """Gets the os of this Config.  # noqa: E501

        The operating system on which API Manager server is running.  # noqa: E501

        :return: The os of this Config.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Config.

        The operating system on which API Manager server is running.  # noqa: E501

        :param os: The os of this Config.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def architecture(self):
        """Gets the architecture of this Config.  # noqa: E501

        The architecture of the operating system on which the API Manager server is running. Supported values: [ win-x86-32, linux-x86-64 ]  # noqa: E501

        :return: The architecture of this Config.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this Config.

        The architecture of the operating system on which the API Manager server is running. Supported values: [ win-x86-32, linux-x86-64 ]  # noqa: E501

        :param architecture: The architecture of this Config.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
