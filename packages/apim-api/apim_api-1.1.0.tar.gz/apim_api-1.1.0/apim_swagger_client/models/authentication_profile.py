# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuthenticationProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_default': 'bool',
        'parameters': 'dict(str, object)',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'is_default': 'isDefault',
        'parameters': 'parameters',
        'type': 'type'
    }

    def __init__(self, name=None, is_default=False, parameters=None, type=None):  # noqa: E501
        """AuthenticationProfile - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._is_default = None
        self._parameters = None
        self._type = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if is_default is not None:
            self.is_default = is_default
        if parameters is not None:
            self.parameters = parameters
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this AuthenticationProfile.  # noqa: E501

        Unique name of the Profile  # noqa: E501

        :return: The name of this AuthenticationProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticationProfile.

        Unique name of the Profile  # noqa: E501

        :param name: The name of this AuthenticationProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_default(self):
        """Gets the is_default of this AuthenticationProfile.  # noqa: E501

        Indicates that this is the default profile.  There can be only one default.  # noqa: E501

        :return: The is_default of this AuthenticationProfile.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this AuthenticationProfile.

        Indicates that this is the default profile.  There can be only one default.  # noqa: E501

        :param is_default: The is_default of this AuthenticationProfile.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def parameters(self):
        """Gets the parameters of this AuthenticationProfile.  # noqa: E501

        Parameters for the backend authentication profile  # noqa: E501

        :return: The parameters of this AuthenticationProfile.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AuthenticationProfile.

        Parameters for the backend authentication profile  # noqa: E501

        :param parameters: The parameters of this AuthenticationProfile.  # noqa: E501
        :type: dict(str, object)
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this AuthenticationProfile.  # noqa: E501

        Type of backend authentication. Possible values: *none*, *http_basic*, *http_digest*, *apiKey*, *oauth*, and *ssl*.  # noqa: E501

        :return: The type of this AuthenticationProfile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthenticationProfile.

        Type of backend authentication. Possible values: *none*, *http_basic*, *http_digest*, *apiKey*, *oauth*, and *ssl*.  # noqa: E501

        :param type: The type of this AuthenticationProfile.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
