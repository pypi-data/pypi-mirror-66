# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OAuthProtectedResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uriprefix': 'str',
        'scopes': 'list[str]',
        'scope': 'str',
        'description': 'str'
    }

    attribute_map = {
        'uriprefix': 'uriprefix',
        'scopes': 'scopes',
        'scope': 'scope',
        'description': 'description'
    }

    def __init__(self, uriprefix=None, scopes=None, scope=None, description=None):  # noqa: E501
        """OAuthProtectedResource - a model defined in Swagger"""  # noqa: E501

        self._uriprefix = None
        self._scopes = None
        self._scope = None
        self._description = None
        self.discriminator = None

        if uriprefix is not None:
            self.uriprefix = uriprefix
        if scopes is not None:
            self.scopes = scopes
        if scope is not None:
            self.scope = scope
        if description is not None:
            self.description = description

    @property
    def uriprefix(self):
        """Gets the uriprefix of this OAuthProtectedResource.  # noqa: E501

        Oauth protected path  # noqa: E501

        :return: The uriprefix of this OAuthProtectedResource.  # noqa: E501
        :rtype: str
        """
        return self._uriprefix

    @uriprefix.setter
    def uriprefix(self, uriprefix):
        """Sets the uriprefix of this OAuthProtectedResource.

        Oauth protected path  # noqa: E501

        :param uriprefix: The uriprefix of this OAuthProtectedResource.  # noqa: E501
        :type: str
        """

        self._uriprefix = uriprefix

    @property
    def scopes(self):
        """Gets the scopes of this OAuthProtectedResource.  # noqa: E501

        List of scopes associated with the OAuth protected path  # noqa: E501

        :return: The scopes of this OAuthProtectedResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this OAuthProtectedResource.

        List of scopes associated with the OAuth protected path  # noqa: E501

        :param scopes: The scopes of this OAuthProtectedResource.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def scope(self):
        """Gets the scope of this OAuthProtectedResource.  # noqa: E501

        Oauth Scope  # noqa: E501

        :return: The scope of this OAuthProtectedResource.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OAuthProtectedResource.

        Oauth Scope  # noqa: E501

        :param scope: The scope of this OAuthProtectedResource.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def description(self):
        """Gets the description of this OAuthProtectedResource.  # noqa: E501

        Scope Description  # noqa: E501

        :return: The description of this OAuthProtectedResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OAuthProtectedResource.

        Scope Description  # noqa: E501

        :param description: The description of this OAuthProtectedResource.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthProtectedResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthProtectedResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
