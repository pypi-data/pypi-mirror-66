# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class APIDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'summary': 'str',
        'description': 'str',
        'version': 'str',
        'base_path': 'str',
        '_resource_path': 'str',
        'models': 'dict(str, object)',
        'consumes': 'list[str]',
        'produces': 'list[str]',
        'integral': 'bool',
        'created_on': 'int',
        'created_by': 'str',
        'organization_id': 'str',
        'service_type': 'str',
        'has_original_definition': 'bool',
        'import_url': 'str',
        'properties': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'summary': 'summary',
        'description': 'description',
        'version': 'version',
        'base_path': 'basePath',
        '_resource_path': 'resourcePath',
        'models': 'models',
        'consumes': 'consumes',
        'produces': 'produces',
        'integral': 'integral',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'organization_id': 'organizationId',
        'service_type': 'serviceType',
        'has_original_definition': 'hasOriginalDefinition',
        'import_url': 'importUrl',
        'properties': 'properties'
    }

    def __init__(self, id=None, name=None, summary=None, description=None, version=None, base_path=None, _resource_path=None, models=None, consumes=None, produces=None, integral=False, created_on=None, created_by=None, organization_id=None, service_type=None, has_original_definition=False, import_url=None, properties=None):  # noqa: E501
        """APIDefinition - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._summary = None
        self._description = None
        self._version = None
        self._base_path = None
        self.__resource_path = None
        self._models = None
        self._consumes = None
        self._produces = None
        self._integral = None
        self._created_on = None
        self._created_by = None
        self._organization_id = None
        self._service_type = None
        self._has_original_definition = None
        self._import_url = None
        self._properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if summary is not None:
            self.summary = summary
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if base_path is not None:
            self.base_path = base_path
        if _resource_path is not None:
            self._resource_path = _resource_path
        if models is not None:
            self.models = models
        if consumes is not None:
            self.consumes = consumes
        if produces is not None:
            self.produces = produces
        if integral is not None:
            self.integral = integral
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if organization_id is not None:
            self.organization_id = organization_id
        if service_type is not None:
            self.service_type = service_type
        if has_original_definition is not None:
            self.has_original_definition = has_original_definition
        if import_url is not None:
            self.import_url = import_url
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this APIDefinition.  # noqa: E501

        A unique identifier.  # noqa: E501

        :return: The id of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIDefinition.

        A unique identifier.  # noqa: E501

        :param id: The id of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this APIDefinition.  # noqa: E501

        The name of the API.  # noqa: E501

        :return: The name of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIDefinition.

        The name of the API.  # noqa: E501

        :param name: The name of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this APIDefinition.  # noqa: E501

        A summary of the API.  # noqa: E501

        :return: The summary of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this APIDefinition.

        A summary of the API.  # noqa: E501

        :param summary: The summary of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this APIDefinition.  # noqa: E501

        A detailed description of the API.  # noqa: E501

        :return: The description of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this APIDefinition.

        A detailed description of the API.  # noqa: E501

        :param description: The description of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this APIDefinition.  # noqa: E501

        The API version.  # noqa: E501

        :return: The version of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this APIDefinition.

        The API version.  # noqa: E501

        :param version: The version of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def base_path(self):
        """Gets the base_path of this APIDefinition.  # noqa: E501

        The base path is where the API service is hosted.  # noqa: E501

        :return: The base_path of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this APIDefinition.

        The base path is where the API service is hosted.  # noqa: E501

        :param base_path: The base_path of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._base_path = base_path

    @property
    def _resource_path(self):
        """Gets the _resource_path of this APIDefinition.  # noqa: E501

        The resource path is applied to **basePath** to provide the prefix for all API methods.  # noqa: E501

        :return: The _resource_path of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self.__resource_path

    @_resource_path.setter
    def _resource_path(self, _resource_path):
        """Sets the _resource_path of this APIDefinition.

        The resource path is applied to **basePath** to provide the prefix for all API methods.  # noqa: E501

        :param _resource_path: The _resource_path of this APIDefinition.  # noqa: E501
        :type: str
        """

        self.__resource_path = _resource_path

    @property
    def models(self):
        """Gets the models of this APIDefinition.  # noqa: E501

        The models/schema the that the API  # noqa: E501

        :return: The models of this APIDefinition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this APIDefinition.

        The models/schema the that the API  # noqa: E501

        :param models: The models of this APIDefinition.  # noqa: E501
        :type: dict(str, object)
        """

        self._models = models

    @property
    def consumes(self):
        """Gets the consumes of this APIDefinition.  # noqa: E501

        The content types that the API consumes  # noqa: E501

        :return: The consumes of this APIDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._consumes

    @consumes.setter
    def consumes(self, consumes):
        """Sets the consumes of this APIDefinition.

        The content types that the API consumes  # noqa: E501

        :param consumes: The consumes of this APIDefinition.  # noqa: E501
        :type: list[str]
        """

        self._consumes = consumes

    @property
    def produces(self):
        """Gets the produces of this APIDefinition.  # noqa: E501

        The content types that the API produces  # noqa: E501

        :return: The produces of this APIDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._produces

    @produces.setter
    def produces(self, produces):
        """Sets the produces of this APIDefinition.

        The content types that the API produces  # noqa: E501

        :param produces: The produces of this APIDefinition.  # noqa: E501
        :type: list[str]
        """

        self._produces = produces

    @property
    def integral(self):
        """Gets the integral of this APIDefinition.  # noqa: E501

        Indicates that the API definition is integral to a frontend API; that the API was imported to define the frontend API.  # noqa: E501

        :return: The integral of this APIDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._integral

    @integral.setter
    def integral(self, integral):
        """Sets the integral of this APIDefinition.

        Indicates that the API definition is integral to a frontend API; that the API was imported to define the frontend API.  # noqa: E501

        :param integral: The integral of this APIDefinition.  # noqa: E501
        :type: bool
        """

        self._integral = integral

    @property
    def created_on(self):
        """Gets the created_on of this APIDefinition.  # noqa: E501

        Epoch/Unix time stamp when the organization was created.  # noqa: E501

        :return: The created_on of this APIDefinition.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this APIDefinition.

        Epoch/Unix time stamp when the organization was created.  # noqa: E501

        :param created_on: The created_on of this APIDefinition.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this APIDefinition.  # noqa: E501

        The identifier of the user that created the API.  # noqa: E501

        :return: The created_by of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this APIDefinition.

        The identifier of the user that created the API.  # noqa: E501

        :param created_by: The created_by of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def organization_id(self):
        """Gets the organization_id of this APIDefinition.  # noqa: E501

        The [Organization](Organization.html) identifier.  # noqa: E501

        :return: The organization_id of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this APIDefinition.

        The [Organization](Organization.html) identifier.  # noqa: E501

        :param organization_id: The organization_id of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def service_type(self):
        """Gets the service_type of this APIDefinition.  # noqa: E501

        Indicates the type of service being imported. Possible values: rest, wsdl.  # noqa: E501

        :return: The service_type of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this APIDefinition.

        Indicates the type of service being imported. Possible values: rest, wsdl.  # noqa: E501

        :param service_type: The service_type of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._service_type = service_type

    @property
    def has_original_definition(self):
        """Gets the has_original_definition of this APIDefinition.  # noqa: E501

        Indicates whether or not an original definition is available  # noqa: E501

        :return: The has_original_definition of this APIDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._has_original_definition

    @has_original_definition.setter
    def has_original_definition(self, has_original_definition):
        """Sets the has_original_definition of this APIDefinition.

        Indicates whether or not an original definition is available  # noqa: E501

        :param has_original_definition: The has_original_definition of this APIDefinition.  # noqa: E501
        :type: bool
        """

        self._has_original_definition = has_original_definition

    @property
    def import_url(self):
        """Gets the import_url of this APIDefinition.  # noqa: E501

        Specifies the URL used to import the backend API definition.  # noqa: E501

        :return: The import_url of this APIDefinition.  # noqa: E501
        :rtype: str
        """
        return self._import_url

    @import_url.setter
    def import_url(self, import_url):
        """Sets the import_url of this APIDefinition.

        Specifies the URL used to import the backend API definition.  # noqa: E501

        :param import_url: The import_url of this APIDefinition.  # noqa: E501
        :type: str
        """

        self._import_url = import_url

    @property
    def properties(self):
        """Gets the properties of this APIDefinition.  # noqa: E501

        A list of properties associated with this API.  # noqa: E501

        :return: The properties of this APIDefinition.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this APIDefinition.

        A list of properties associated with this API.  # noqa: E501

        :param properties: The properties of this APIDefinition.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
