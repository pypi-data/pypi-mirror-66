# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OutboundProfiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_profile': 'str',
        'route_type': 'str',
        'request_policy': 'str',
        'response_policy': 'str',
        'route_policy': 'str',
        'fault_handler_policy': 'str',
        'api_id': 'str',
        'api_method_id': 'str',
        'parameters': 'list[ParamValue]'
    }

    attribute_map = {
        'authentication_profile': 'authenticationProfile',
        'route_type': 'routeType',
        'request_policy': 'requestPolicy',
        'response_policy': 'responsePolicy',
        'route_policy': 'routePolicy',
        'fault_handler_policy': 'faultHandlerPolicy',
        'api_id': 'apiId',
        'api_method_id': 'apiMethodId',
        'parameters': 'parameters'
    }

    def __init__(self, authentication_profile=None, route_type=None, request_policy=None, response_policy=None, route_policy=None, fault_handler_policy=None, api_id=None, api_method_id=None, parameters=None):  # noqa: E501
        """OutboundProfiles - a model defined in Swagger"""  # noqa: E501

        self._authentication_profile = None
        self._route_type = None
        self._request_policy = None
        self._response_policy = None
        self._route_policy = None
        self._fault_handler_policy = None
        self._api_id = None
        self._api_method_id = None
        self._parameters = None
        self.discriminator = None

        if authentication_profile is not None:
            self.authentication_profile = authentication_profile
        if route_type is not None:
            self.route_type = route_type
        if request_policy is not None:
            self.request_policy = request_policy
        if response_policy is not None:
            self.response_policy = response_policy
        if route_policy is not None:
            self.route_policy = route_policy
        if fault_handler_policy is not None:
            self.fault_handler_policy = fault_handler_policy
        if api_id is not None:
            self.api_id = api_id
        if api_method_id is not None:
            self.api_method_id = api_method_id
        if parameters is not None:
            self.parameters = parameters

    @property
    def authentication_profile(self):
        """Gets the authentication_profile of this OutboundProfiles.  # noqa: E501

        Outbound authentication credentials if __routeType__ is 'proxy'.  Can be null to indicate no credentials.  # noqa: E501

        :return: The authentication_profile of this OutboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._authentication_profile

    @authentication_profile.setter
    def authentication_profile(self, authentication_profile):
        """Sets the authentication_profile of this OutboundProfiles.

        Outbound authentication credentials if __routeType__ is 'proxy'.  Can be null to indicate no credentials.  # noqa: E501

        :param authentication_profile: The authentication_profile of this OutboundProfiles.  # noqa: E501
        :type: str
        """

        self._authentication_profile = authentication_profile

    @property
    def route_type(self):
        """Gets the route_type of this OutboundProfiles.  # noqa: E501

        The route type.  Values are either: 'proxy' or 'policy'.    Can be null and defaults to *proxy*.  # noqa: E501

        :return: The route_type of this OutboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this OutboundProfiles.

        The route type.  Values are either: 'proxy' or 'policy'.    Can be null and defaults to *proxy*.  # noqa: E501

        :param route_type: The route_type of this OutboundProfiles.  # noqa: E501
        :type: str
        """

        self._route_type = route_type

    @property
    def request_policy(self):
        """Gets the request_policy of this OutboundProfiles.  # noqa: E501

        Request policy that applies to all outbound requests.  Can be null to indicate no policy.  # noqa: E501

        :return: The request_policy of this OutboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._request_policy

    @request_policy.setter
    def request_policy(self, request_policy):
        """Sets the request_policy of this OutboundProfiles.

        Request policy that applies to all outbound requests.  Can be null to indicate no policy.  # noqa: E501

        :param request_policy: The request_policy of this OutboundProfiles.  # noqa: E501
        :type: str
        """

        self._request_policy = request_policy

    @property
    def response_policy(self):
        """Gets the response_policy of this OutboundProfiles.  # noqa: E501

        Response policy that applies to all responses from outbound requests.  Can be null to indicate no policy.  # noqa: E501

        :return: The response_policy of this OutboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._response_policy

    @response_policy.setter
    def response_policy(self, response_policy):
        """Sets the response_policy of this OutboundProfiles.

        Response policy that applies to all responses from outbound requests.  Can be null to indicate no policy.  # noqa: E501

        :param response_policy: The response_policy of this OutboundProfiles.  # noqa: E501
        :type: str
        """

        self._response_policy = response_policy

    @property
    def route_policy(self):
        """Gets the route_policy of this OutboundProfiles.  # noqa: E501

        Route policy if the routeType is 'policy', in which case it must be a valid policy ID.  Can be null if __routeType__ is 'proxy'.  # noqa: E501

        :return: The route_policy of this OutboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._route_policy

    @route_policy.setter
    def route_policy(self, route_policy):
        """Sets the route_policy of this OutboundProfiles.

        Route policy if the routeType is 'policy', in which case it must be a valid policy ID.  Can be null if __routeType__ is 'proxy'.  # noqa: E501

        :param route_policy: The route_policy of this OutboundProfiles.  # noqa: E501
        :type: str
        """

        self._route_policy = route_policy

    @property
    def fault_handler_policy(self):
        """Gets the fault_handler_policy of this OutboundProfiles.  # noqa: E501

        Fault handler policy that gets executed in the event of an error.  Can be null to indicate no policy.  # noqa: E501

        :return: The fault_handler_policy of this OutboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._fault_handler_policy

    @fault_handler_policy.setter
    def fault_handler_policy(self, fault_handler_policy):
        """Sets the fault_handler_policy of this OutboundProfiles.

        Fault handler policy that gets executed in the event of an error.  Can be null to indicate no policy.  # noqa: E501

        :param fault_handler_policy: The fault_handler_policy of this OutboundProfiles.  # noqa: E501
        :type: str
        """

        self._fault_handler_policy = fault_handler_policy

    @property
    def api_id(self):
        """Gets the api_id of this OutboundProfiles.  # noqa: E501

        Route to a different API.  Can be null.  Ignored on the 'default' outbound profile.  # noqa: E501

        :return: The api_id of this OutboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this OutboundProfiles.

        Route to a different API.  Can be null.  Ignored on the 'default' outbound profile.  # noqa: E501

        :param api_id: The api_id of this OutboundProfiles.  # noqa: E501
        :type: str
        """

        self._api_id = api_id

    @property
    def api_method_id(self):
        """Gets the api_method_id of this OutboundProfiles.  # noqa: E501

        Route to a different API method.  Can be null.  Ignored on the 'default' outbound profile.  # noqa: E501

        :return: The api_method_id of this OutboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._api_method_id

    @api_method_id.setter
    def api_method_id(self, api_method_id):
        """Sets the api_method_id of this OutboundProfiles.

        Route to a different API method.  Can be null.  Ignored on the 'default' outbound profile.  # noqa: E501

        :param api_method_id: The api_method_id of this OutboundProfiles.  # noqa: E501
        :type: str
        """

        self._api_method_id = api_method_id

    @property
    def parameters(self):
        """Gets the parameters of this OutboundProfiles.  # noqa: E501

        A list of outbound parameters values - maps from frontend parameters to backend parameters.  # noqa: E501

        :return: The parameters of this OutboundProfiles.  # noqa: E501
        :rtype: list[ParamValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this OutboundProfiles.

        A list of outbound parameters values - maps from frontend parameters to backend parameters.  # noqa: E501

        :param parameters: The parameters of this OutboundProfiles.  # noqa: E501
        :type: list[ParamValue]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutboundProfiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutboundProfiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
