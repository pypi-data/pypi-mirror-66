# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ParamValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'param_type': 'str',
        'type': 'str',
        'value': 'str',
        'required': 'bool',
        'exclude': 'bool',
        'additional': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'param_type': 'paramType',
        'type': 'type',
        'value': 'value',
        'required': 'required',
        'exclude': 'exclude',
        'additional': 'additional'
    }

    def __init__(self, name=None, param_type=None, type=None, value=None, required=False, exclude=False, additional=False):  # noqa: E501
        """ParamValue - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._param_type = None
        self._type = None
        self._value = None
        self._required = None
        self._exclude = None
        self._additional = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if param_type is not None:
            self.param_type = param_type
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if required is not None:
            self.required = required
        if exclude is not None:
            self.exclude = exclude
        if additional is not None:
            self.additional = additional

    @property
    def name(self):
        """Gets the name of this ParamValue.  # noqa: E501

        The parameter name.  # noqa: E501

        :return: The name of this ParamValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParamValue.

        The parameter name.  # noqa: E501

        :param name: The name of this ParamValue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def param_type(self):
        """Gets the param_type of this ParamValue.  # noqa: E501

        The type of parameter type.  Can be one of: *body*, *query*, *path*, *form*, or *header*.  # noqa: E501

        :return: The param_type of this ParamValue.  # noqa: E501
        :rtype: str
        """
        return self._param_type

    @param_type.setter
    def param_type(self, param_type):
        """Sets the param_type of this ParamValue.

        The type of parameter type.  Can be one of: *body*, *query*, *path*, *form*, or *header*.  # noqa: E501

        :param param_type: The param_type of this ParamValue.  # noqa: E501
        :type: str
        """

        self._param_type = param_type

    @property
    def type(self):
        """Gets the type of this ParamValue.  # noqa: E501

        The parameter data type.  Can be one of: *string*, *integer*, etc.  # noqa: E501

        :return: The type of this ParamValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ParamValue.

        The parameter data type.  Can be one of: *string*, *integer*, etc.  # noqa: E501

        :param type: The type of this ParamValue.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this ParamValue.  # noqa: E501

        The parameter value.  Can be a regular value, or a selector, e.g.: ${params.path.id}.  # noqa: E501

        :return: The value of this ParamValue.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ParamValue.

        The parameter value.  Can be a regular value, or a selector, e.g.: ${params.path.id}.  # noqa: E501

        :param value: The value of this ParamValue.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def required(self):
        """Gets the required of this ParamValue.  # noqa: E501

        Indicates whether or not the parameter is required for the backend API.  # noqa: E501

        :return: The required of this ParamValue.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ParamValue.

        Indicates whether or not the parameter is required for the backend API.  # noqa: E501

        :param required: The required of this ParamValue.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def exclude(self):
        """Gets the exclude of this ParamValue.  # noqa: E501

        Indicates whether or not the parameter is excluded for the backend API.  # noqa: E501

        :return: The exclude of this ParamValue.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this ParamValue.

        Indicates whether or not the parameter is excluded for the backend API.  # noqa: E501

        :param exclude: The exclude of this ParamValue.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def additional(self):
        """Gets the additional of this ParamValue.  # noqa: E501

        Indicates whether or not the parameter is an additional parameter (does not replace an existing parameter).  # noqa: E501

        :return: The additional of this ParamValue.  # noqa: E501
        :rtype: bool
        """
        return self._additional

    @additional.setter
    def additional(self, additional):
        """Sets the additional of this ParamValue.

        Indicates whether or not the parameter is an additional parameter (does not replace an existing parameter).  # noqa: E501

        :param additional: The additional of this ParamValue.  # noqa: E501
        :type: bool
        """

        self._additional = additional

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParamValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParamValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
