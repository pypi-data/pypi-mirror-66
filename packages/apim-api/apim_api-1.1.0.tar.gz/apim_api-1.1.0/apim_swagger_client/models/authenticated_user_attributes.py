# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuthenticatedUserAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_login': 'bool',
        'is_sso_login': 'bool',
        'user_dn': 'str',
        'last_seen': 'int',
        'change_password': 'bool',
        'change_password_message': 'str'
    }

    attribute_map = {
        'first_login': 'firstLogin',
        'is_sso_login': 'isSSOLogin',
        'user_dn': 'userDn',
        'last_seen': 'lastSeen',
        'change_password': 'changePassword',
        'change_password_message': 'changePasswordMessage'
    }

    def __init__(self, first_login=False, is_sso_login=False, user_dn=None, last_seen=None, change_password=False, change_password_message=None):  # noqa: E501
        """AuthenticatedUserAttributes - a model defined in Swagger"""  # noqa: E501

        self._first_login = None
        self._is_sso_login = None
        self._user_dn = None
        self._last_seen = None
        self._change_password = None
        self._change_password_message = None
        self.discriminator = None

        if first_login is not None:
            self.first_login = first_login
        if is_sso_login is not None:
            self.is_sso_login = is_sso_login
        if user_dn is not None:
            self.user_dn = user_dn
        if last_seen is not None:
            self.last_seen = last_seen
        if change_password is not None:
            self.change_password = change_password
        if change_password_message is not None:
            self.change_password_message = change_password_message

    @property
    def first_login(self):
        """Gets the first_login of this AuthenticatedUserAttributes.  # noqa: E501


        :return: The first_login of this AuthenticatedUserAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._first_login

    @first_login.setter
    def first_login(self, first_login):
        """Sets the first_login of this AuthenticatedUserAttributes.


        :param first_login: The first_login of this AuthenticatedUserAttributes.  # noqa: E501
        :type: bool
        """

        self._first_login = first_login

    @property
    def is_sso_login(self):
        """Gets the is_sso_login of this AuthenticatedUserAttributes.  # noqa: E501


        :return: The is_sso_login of this AuthenticatedUserAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._is_sso_login

    @is_sso_login.setter
    def is_sso_login(self, is_sso_login):
        """Sets the is_sso_login of this AuthenticatedUserAttributes.


        :param is_sso_login: The is_sso_login of this AuthenticatedUserAttributes.  # noqa: E501
        :type: bool
        """

        self._is_sso_login = is_sso_login

    @property
    def user_dn(self):
        """Gets the user_dn of this AuthenticatedUserAttributes.  # noqa: E501


        :return: The user_dn of this AuthenticatedUserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._user_dn

    @user_dn.setter
    def user_dn(self, user_dn):
        """Sets the user_dn of this AuthenticatedUserAttributes.


        :param user_dn: The user_dn of this AuthenticatedUserAttributes.  # noqa: E501
        :type: str
        """

        self._user_dn = user_dn

    @property
    def last_seen(self):
        """Gets the last_seen of this AuthenticatedUserAttributes.  # noqa: E501


        :return: The last_seen of this AuthenticatedUserAttributes.  # noqa: E501
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this AuthenticatedUserAttributes.


        :param last_seen: The last_seen of this AuthenticatedUserAttributes.  # noqa: E501
        :type: int
        """

        self._last_seen = last_seen

    @property
    def change_password(self):
        """Gets the change_password of this AuthenticatedUserAttributes.  # noqa: E501


        :return: The change_password of this AuthenticatedUserAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._change_password

    @change_password.setter
    def change_password(self, change_password):
        """Sets the change_password of this AuthenticatedUserAttributes.


        :param change_password: The change_password of this AuthenticatedUserAttributes.  # noqa: E501
        :type: bool
        """

        self._change_password = change_password

    @property
    def change_password_message(self):
        """Gets the change_password_message of this AuthenticatedUserAttributes.  # noqa: E501


        :return: The change_password_message of this AuthenticatedUserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._change_password_message

    @change_password_message.setter
    def change_password_message(self, change_password_message):
        """Sets the change_password_message of this AuthenticatedUserAttributes.


        :param change_password_message: The change_password_message of this AuthenticatedUserAttributes.  # noqa: E501
        :type: str
        """

        self._change_password_message = change_password_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticatedUserAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticatedUserAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
