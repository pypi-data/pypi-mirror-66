# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemoteHost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'port': 'int',
        'created_on': 'int',
        'created_by': 'str',
        'organization_id': 'str',
        'max_connections': 'int',
        'allow_http11': 'bool',
        'include_content_length_request': 'bool',
        'include_content_length_response': 'bool',
        'offer_tls_server_name': 'bool',
        'verify_server_hostname': 'bool',
        'connection_timeout': 'int',
        'active_timeout': 'int',
        'transaction_timeout': 'int',
        'idle_timeout': 'int',
        'max_receive_bytes': 'int',
        'max_send_bytes': 'int',
        'input_buffer_size': 'int',
        'output_buffer_size': 'int',
        'address_cache_timeout': 'int',
        'ssl_session_cache_size': 'int',
        'input_encodings': 'list[str]',
        'output_encodings': 'list[str]',
        'export_correlation_id': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'port': 'port',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'organization_id': 'organizationId',
        'max_connections': 'maxConnections',
        'allow_http11': 'allowHTTP11',
        'include_content_length_request': 'includeContentLengthRequest',
        'include_content_length_response': 'includeContentLengthResponse',
        'offer_tls_server_name': 'offerTLSServerName',
        'verify_server_hostname': 'verifyServerHostname',
        'connection_timeout': 'connectionTimeout',
        'active_timeout': 'activeTimeout',
        'transaction_timeout': 'transactionTimeout',
        'idle_timeout': 'idleTimeout',
        'max_receive_bytes': 'maxReceiveBytes',
        'max_send_bytes': 'maxSendBytes',
        'input_buffer_size': 'inputBufferSize',
        'output_buffer_size': 'outputBufferSize',
        'address_cache_timeout': 'addressCacheTimeout',
        'ssl_session_cache_size': 'sslSessionCacheSize',
        'input_encodings': 'inputEncodings',
        'output_encodings': 'outputEncodings',
        'export_correlation_id': 'exportCorrelationId'
    }

    def __init__(self, id=None, name=None, port=None, created_on=None, created_by=None, organization_id=None, max_connections=None, allow_http11=False, include_content_length_request=False, include_content_length_response=False, offer_tls_server_name=False, verify_server_hostname=False, connection_timeout=None, active_timeout=None, transaction_timeout=None, idle_timeout=None, max_receive_bytes=None, max_send_bytes=None, input_buffer_size=None, output_buffer_size=None, address_cache_timeout=None, ssl_session_cache_size=None, input_encodings=None, output_encodings=None, export_correlation_id=False):  # noqa: E501
        """RemoteHost - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._port = None
        self._created_on = None
        self._created_by = None
        self._organization_id = None
        self._max_connections = None
        self._allow_http11 = None
        self._include_content_length_request = None
        self._include_content_length_response = None
        self._offer_tls_server_name = None
        self._verify_server_hostname = None
        self._connection_timeout = None
        self._active_timeout = None
        self._transaction_timeout = None
        self._idle_timeout = None
        self._max_receive_bytes = None
        self._max_send_bytes = None
        self._input_buffer_size = None
        self._output_buffer_size = None
        self._address_cache_timeout = None
        self._ssl_session_cache_size = None
        self._input_encodings = None
        self._output_encodings = None
        self._export_correlation_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.port = port
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if organization_id is not None:
            self.organization_id = organization_id
        if max_connections is not None:
            self.max_connections = max_connections
        if allow_http11 is not None:
            self.allow_http11 = allow_http11
        if include_content_length_request is not None:
            self.include_content_length_request = include_content_length_request
        if include_content_length_response is not None:
            self.include_content_length_response = include_content_length_response
        if offer_tls_server_name is not None:
            self.offer_tls_server_name = offer_tls_server_name
        if verify_server_hostname is not None:
            self.verify_server_hostname = verify_server_hostname
        if connection_timeout is not None:
            self.connection_timeout = connection_timeout
        if active_timeout is not None:
            self.active_timeout = active_timeout
        if transaction_timeout is not None:
            self.transaction_timeout = transaction_timeout
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout
        if max_receive_bytes is not None:
            self.max_receive_bytes = max_receive_bytes
        if max_send_bytes is not None:
            self.max_send_bytes = max_send_bytes
        if input_buffer_size is not None:
            self.input_buffer_size = input_buffer_size
        if output_buffer_size is not None:
            self.output_buffer_size = output_buffer_size
        if address_cache_timeout is not None:
            self.address_cache_timeout = address_cache_timeout
        if ssl_session_cache_size is not None:
            self.ssl_session_cache_size = ssl_session_cache_size
        if input_encodings is not None:
            self.input_encodings = input_encodings
        if output_encodings is not None:
            self.output_encodings = output_encodings
        if export_correlation_id is not None:
            self.export_correlation_id = export_correlation_id

    @property
    def id(self):
        """Gets the id of this RemoteHost.  # noqa: E501

        The unique identifier for the remote host  # noqa: E501

        :return: The id of this RemoteHost.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteHost.

        The unique identifier for the remote host  # noqa: E501

        :param id: The id of this RemoteHost.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RemoteHost.  # noqa: E501

        The host name of the remote host  # noqa: E501

        :return: The name of this RemoteHost.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteHost.

        The host name of the remote host  # noqa: E501

        :param name: The name of this RemoteHost.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def port(self):
        """Gets the port of this RemoteHost.  # noqa: E501

        The host port of the remote host  # noqa: E501

        :return: The port of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RemoteHost.

        The host port of the remote host  # noqa: E501

        :param port: The port of this RemoteHost.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def created_on(self):
        """Gets the created_on of this RemoteHost.  # noqa: E501

        Epoch/Unix time stamp when the remote host was created  # noqa: E501

        :return: The created_on of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this RemoteHost.

        Epoch/Unix time stamp when the remote host was created  # noqa: E501

        :param created_on: The created_on of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this RemoteHost.  # noqa: E501

        The unique identifier for user that created the remote host  # noqa: E501

        :return: The created_by of this RemoteHost.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RemoteHost.

        The unique identifier for user that created the remote host  # noqa: E501

        :param created_by: The created_by of this RemoteHost.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def organization_id(self):
        """Gets the organization_id of this RemoteHost.  # noqa: E501

        The organization identifier to which the remote host belongs  # noqa: E501

        :return: The organization_id of this RemoteHost.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this RemoteHost.

        The organization identifier to which the remote host belongs  # noqa: E501

        :param organization_id: The organization_id of this RemoteHost.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def max_connections(self):
        """Gets the max_connections of this RemoteHost.  # noqa: E501

        The maximum number of connections to open to a Remote Host. If the maximum number of connections has already been established, the API Gateway instance waits for a connection to drop or become idle before making another request. The default value is -1, meaning there is no limit  # noqa: E501

        :return: The max_connections of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this RemoteHost.

        The maximum number of connections to open to a Remote Host. If the maximum number of connections has already been established, the API Gateway instance waits for a connection to drop or become idle before making another request. The default value is -1, meaning there is no limit  # noqa: E501

        :param max_connections: The max_connections of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._max_connections = max_connections

    @property
    def allow_http11(self):
        """Gets the allow_http11 of this RemoteHost.  # noqa: E501

        Enables the API Gateway to use HTTP 1.1 when connecting to the remote host. Default value is false, meaning HTTP 1.0 is used  # noqa: E501

        :return: The allow_http11 of this RemoteHost.  # noqa: E501
        :rtype: bool
        """
        return self._allow_http11

    @allow_http11.setter
    def allow_http11(self, allow_http11):
        """Sets the allow_http11 of this RemoteHost.

        Enables the API Gateway to use HTTP 1.1 when connecting to the remote host. Default value is false, meaning HTTP 1.0 is used  # noqa: E501

        :param allow_http11: The allow_http11 of this RemoteHost.  # noqa: E501
        :type: bool
        """

        self._allow_http11 = allow_http11

    @property
    def include_content_length_request(self):
        """Gets the include_content_length_request of this RemoteHost.  # noqa: E501

        If this option is set, the API Gateway will include the Content-Length HTTP header in all requests to this Remote Host. Default value is false.  # noqa: E501

        :return: The include_content_length_request of this RemoteHost.  # noqa: E501
        :rtype: bool
        """
        return self._include_content_length_request

    @include_content_length_request.setter
    def include_content_length_request(self, include_content_length_request):
        """Sets the include_content_length_request of this RemoteHost.

        If this option is set, the API Gateway will include the Content-Length HTTP header in all requests to this Remote Host. Default value is false.  # noqa: E501

        :param include_content_length_request: The include_content_length_request of this RemoteHost.  # noqa: E501
        :type: bool
        """

        self._include_content_length_request = include_content_length_request

    @property
    def include_content_length_response(self):
        """Gets the include_content_length_response of this RemoteHost.  # noqa: E501

        If this option is set, if the API Gateway receives a response from this Remote Host that contains a Content-Length HTTP header, it returns this length to the client. Default value is false.  # noqa: E501

        :return: The include_content_length_response of this RemoteHost.  # noqa: E501
        :rtype: bool
        """
        return self._include_content_length_response

    @include_content_length_response.setter
    def include_content_length_response(self, include_content_length_response):
        """Sets the include_content_length_response of this RemoteHost.

        If this option is set, if the API Gateway receives a response from this Remote Host that contains a Content-Length HTTP header, it returns this length to the client. Default value is false.  # noqa: E501

        :param include_content_length_response: The include_content_length_response of this RemoteHost.  # noqa: E501
        :type: bool
        """

        self._include_content_length_response = include_content_length_response

    @property
    def offer_tls_server_name(self):
        """Gets the offer_tls_server_name of this RemoteHost.  # noqa: E501

        Adds a field to outbound TLS/SSL calls that shows the name that the client used to connect. Default value is false.  # noqa: E501

        :return: The offer_tls_server_name of this RemoteHost.  # noqa: E501
        :rtype: bool
        """
        return self._offer_tls_server_name

    @offer_tls_server_name.setter
    def offer_tls_server_name(self, offer_tls_server_name):
        """Sets the offer_tls_server_name of this RemoteHost.

        Adds a field to outbound TLS/SSL calls that shows the name that the client used to connect. Default value is false.  # noqa: E501

        :param offer_tls_server_name: The offer_tls_server_name of this RemoteHost.  # noqa: E501
        :type: bool
        """

        self._offer_tls_server_name = offer_tls_server_name

    @property
    def verify_server_hostname(self):
        """Gets the verify_server_hostname of this RemoteHost.  # noqa: E501

        Ensures that the certificate presented by the server matches the name of the remote host being connected to. This prevents host spoofing and man-in-the-middle attacks. Default value is false.  # noqa: E501

        :return: The verify_server_hostname of this RemoteHost.  # noqa: E501
        :rtype: bool
        """
        return self._verify_server_hostname

    @verify_server_hostname.setter
    def verify_server_hostname(self, verify_server_hostname):
        """Sets the verify_server_hostname of this RemoteHost.

        Ensures that the certificate presented by the server matches the name of the remote host being connected to. This prevents host spoofing and man-in-the-middle attacks. Default value is false.  # noqa: E501

        :param verify_server_hostname: The verify_server_hostname of this RemoteHost.  # noqa: E501
        :type: bool
        """

        self._verify_server_hostname = verify_server_hostname

    @property
    def connection_timeout(self):
        """Gets the connection_timeout of this RemoteHost.  # noqa: E501

        If a connection to this remote host is not established within the time set in this field, the connection times out and the connection fails. Default value is 30000 milliseconds (30 seconds).  # noqa: E501

        :return: The connection_timeout of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """Sets the connection_timeout of this RemoteHost.

        If a connection to this remote host is not established within the time set in this field, the connection times out and the connection fails. Default value is 30000 milliseconds (30 seconds).  # noqa: E501

        :param connection_timeout: The connection_timeout of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._connection_timeout = connection_timeout

    @property
    def active_timeout(self):
        """Gets the active_timeout of this RemoteHost.  # noqa: E501

        The maximum amount of time permitted between reading successive blocks of data. If the Active Timeout is exceeded, the API Gateway closes the connection. This prevents a Remote Host from closing the connection while sending data. Default value is 30000 milliseconds (30 seconds).  # noqa: E501

        :return: The active_timeout of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._active_timeout

    @active_timeout.setter
    def active_timeout(self, active_timeout):
        """Sets the active_timeout of this RemoteHost.

        The maximum amount of time permitted between reading successive blocks of data. If the Active Timeout is exceeded, the API Gateway closes the connection. This prevents a Remote Host from closing the connection while sending data. Default value is 30000 milliseconds (30 seconds).  # noqa: E501

        :param active_timeout: The active_timeout of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._active_timeout = active_timeout

    @property
    def transaction_timeout(self):
        """Gets the transaction_timeout of this RemoteHost.  # noqa: E501

        The maximum amount of time permitted to complete the transaction. Default value is 240000 milliseconds (4 minutes).  # noqa: E501

        :return: The transaction_timeout of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._transaction_timeout

    @transaction_timeout.setter
    def transaction_timeout(self, transaction_timeout):
        """Sets the transaction_timeout of this RemoteHost.

        The maximum amount of time permitted to complete the transaction. Default value is 240000 milliseconds (4 minutes).  # noqa: E501

        :param transaction_timeout: The transaction_timeout of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._transaction_timeout = transaction_timeout

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this RemoteHost.  # noqa: E501

        The maximum amount of time that API Gateway waits after sending a message over a persistent connection to the Remote Host before it closes the connection. Default value is 15000 milliseconds (15 seconds).  # noqa: E501

        :return: The idle_timeout of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this RemoteHost.

        The maximum amount of time that API Gateway waits after sending a message over a persistent connection to the Remote Host before it closes the connection. Default value is 15000 milliseconds (15 seconds).  # noqa: E501

        :param idle_timeout: The idle_timeout of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._idle_timeout = idle_timeout

    @property
    def max_receive_bytes(self):
        """Gets the max_receive_bytes of this RemoteHost.  # noqa: E501

        The maximum amount of data the API Gateway can receive per transaction. Default value is 20971520 bytes (20MiB).  # noqa: E501

        :return: The max_receive_bytes of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._max_receive_bytes

    @max_receive_bytes.setter
    def max_receive_bytes(self, max_receive_bytes):
        """Sets the max_receive_bytes of this RemoteHost.

        The maximum amount of data the API Gateway can receive per transaction. Default value is 20971520 bytes (20MiB).  # noqa: E501

        :param max_receive_bytes: The max_receive_bytes of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._max_receive_bytes = max_receive_bytes

    @property
    def max_send_bytes(self):
        """Gets the max_send_bytes of this RemoteHost.  # noqa: E501

        The maximum amount of data the API Gateway can transmit per transaction. Default value is 20971520 bytes (20MiB).  # noqa: E501

        :return: The max_send_bytes of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._max_send_bytes

    @max_send_bytes.setter
    def max_send_bytes(self, max_send_bytes):
        """Sets the max_send_bytes of this RemoteHost.

        The maximum amount of data the API Gateway can transmit per transaction. Default value is 20971520 bytes (20MiB).  # noqa: E501

        :param max_send_bytes: The max_send_bytes of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._max_send_bytes = max_send_bytes

    @property
    def input_buffer_size(self):
        """Gets the input_buffer_size of this RemoteHost.  # noqa: E501

        The maximum amount of memory allocated to each request. Default value is 8192 bytes.  # noqa: E501

        :return: The input_buffer_size of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._input_buffer_size

    @input_buffer_size.setter
    def input_buffer_size(self, input_buffer_size):
        """Sets the input_buffer_size of this RemoteHost.

        The maximum amount of memory allocated to each request. Default value is 8192 bytes.  # noqa: E501

        :param input_buffer_size: The input_buffer_size of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._input_buffer_size = input_buffer_size

    @property
    def output_buffer_size(self):
        """Gets the output_buffer_size of this RemoteHost.  # noqa: E501

        The maximum amount of memory allocated to each response. Default value is 8192 bytes.  # noqa: E501

        :return: The output_buffer_size of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._output_buffer_size

    @output_buffer_size.setter
    def output_buffer_size(self, output_buffer_size):
        """Sets the output_buffer_size of this RemoteHost.

        The maximum amount of memory allocated to each response. Default value is 8192 bytes.  # noqa: E501

        :param output_buffer_size: The output_buffer_size of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._output_buffer_size = output_buffer_size

    @property
    def address_cache_timeout(self):
        """Gets the address_cache_timeout of this RemoteHost.  # noqa: E501

        The period of time to cache addressing information after it has been received from the naming service. Default value is 300000 milliseconds (5 minutes)  # noqa: E501

        :return: The address_cache_timeout of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._address_cache_timeout

    @address_cache_timeout.setter
    def address_cache_timeout(self, address_cache_timeout):
        """Sets the address_cache_timeout of this RemoteHost.

        The period of time to cache addressing information after it has been received from the naming service. Default value is 300000 milliseconds (5 minutes)  # noqa: E501

        :param address_cache_timeout: The address_cache_timeout of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._address_cache_timeout = address_cache_timeout

    @property
    def ssl_session_cache_size(self):
        """Gets the ssl_session_cache_size of this RemoteHost.  # noqa: E501

        Specifies the size of the SSL session cache for connections to the remote host, which controls the number of idle SSL sessions that can be kept in memory. Default value is 32.  # noqa: E501

        :return: The ssl_session_cache_size of this RemoteHost.  # noqa: E501
        :rtype: int
        """
        return self._ssl_session_cache_size

    @ssl_session_cache_size.setter
    def ssl_session_cache_size(self, ssl_session_cache_size):
        """Sets the ssl_session_cache_size of this RemoteHost.

        Specifies the size of the SSL session cache for connections to the remote host, which controls the number of idle SSL sessions that can be kept in memory. Default value is 32.  # noqa: E501

        :param ssl_session_cache_size: The ssl_session_cache_size of this RemoteHost.  # noqa: E501
        :type: int
        """

        self._ssl_session_cache_size = ssl_session_cache_size

    @property
    def input_encodings(self):
        """Gets the input_encodings of this RemoteHost.  # noqa: E501

        Specifies the HTTP content encodings that the API Gateway can accept from peers. Supported encodings: *deflate*, *gzip*. If no encodings are specified the default encoding is applied.  # noqa: E501

        :return: The input_encodings of this RemoteHost.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_encodings

    @input_encodings.setter
    def input_encodings(self, input_encodings):
        """Sets the input_encodings of this RemoteHost.

        Specifies the HTTP content encodings that the API Gateway can accept from peers. Supported encodings: *deflate*, *gzip*. If no encodings are specified the default encoding is applied.  # noqa: E501

        :param input_encodings: The input_encodings of this RemoteHost.  # noqa: E501
        :type: list[str]
        """

        self._input_encodings = input_encodings

    @property
    def output_encodings(self):
        """Gets the output_encodings of this RemoteHost.  # noqa: E501

        Specifies the HTTP content encodings that the API Gateway can apply to outgoing messages. Supported encodings: *deflate*, *gzip*. If no encodings are specified the default encoding is applied.  # noqa: E501

        :return: The output_encodings of this RemoteHost.  # noqa: E501
        :rtype: list[str]
        """
        return self._output_encodings

    @output_encodings.setter
    def output_encodings(self, output_encodings):
        """Sets the output_encodings of this RemoteHost.

        Specifies the HTTP content encodings that the API Gateway can apply to outgoing messages. Supported encodings: *deflate*, *gzip*. If no encodings are specified the default encoding is applied.  # noqa: E501

        :param output_encodings: The output_encodings of this RemoteHost.  # noqa: E501
        :type: list[str]
        """

        self._output_encodings = output_encodings

    @property
    def export_correlation_id(self):
        """Gets the export_correlation_id of this RemoteHost.  # noqa: E501

        Specifies whether to add the X-CorrelationID header to outbound messages  # noqa: E501

        :return: The export_correlation_id of this RemoteHost.  # noqa: E501
        :rtype: bool
        """
        return self._export_correlation_id

    @export_correlation_id.setter
    def export_correlation_id(self, export_correlation_id):
        """Sets the export_correlation_id of this RemoteHost.

        Specifies whether to add the X-CorrelationID header to outbound messages  # noqa: E501

        :param export_correlation_id: The export_correlation_id of this RemoteHost.  # noqa: E501
        :type: bool
        """

        self._export_correlation_id = export_correlation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteHost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteHost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
