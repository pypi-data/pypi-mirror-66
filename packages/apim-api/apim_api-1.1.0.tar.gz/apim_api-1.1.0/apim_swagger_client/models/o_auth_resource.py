# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OAuthResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'application_id': 'str',
        'uriprefix': 'str',
        'scopes': 'list[str]',
        'enabled': 'bool',
        'is_default': 'bool',
        'scope': 'str'
    }

    attribute_map = {
        'id': 'id',
        'application_id': 'applicationId',
        'uriprefix': 'uriprefix',
        'scopes': 'scopes',
        'enabled': 'enabled',
        'is_default': 'isDefault',
        'scope': 'scope'
    }

    def __init__(self, id=None, application_id=None, uriprefix=None, scopes=None, enabled=False, is_default=False, scope=None):  # noqa: E501
        """OAuthResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._application_id = None
        self._uriprefix = None
        self._scopes = None
        self._enabled = None
        self._is_default = None
        self._scope = None
        self.discriminator = None

        self.id = id
        self.application_id = application_id
        if uriprefix is not None:
            self.uriprefix = uriprefix
        if scopes is not None:
            self.scopes = scopes
        if enabled is not None:
            self.enabled = enabled
        if is_default is not None:
            self.is_default = is_default
        if scope is not None:
            self.scope = scope

    @property
    def id(self):
        """Gets the id of this OAuthResource.  # noqa: E501

        The unique identifier for the oauth protected resource  # noqa: E501

        :return: The id of this OAuthResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OAuthResource.

        The unique identifier for the oauth protected resource  # noqa: E501

        :param id: The id of this OAuthResource.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def application_id(self):
        """Gets the application_id of this OAuthResource.  # noqa: E501

        The unique identifier for the application who has access to this resource  # noqa: E501

        :return: The application_id of this OAuthResource.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this OAuthResource.

        The unique identifier for the application who has access to this resource  # noqa: E501

        :param application_id: The application_id of this OAuthResource.  # noqa: E501
        :type: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def uriprefix(self):
        """Gets the uriprefix of this OAuthResource.  # noqa: E501

        The uri prefix which this oauth protected resource relates to  # noqa: E501

        :return: The uriprefix of this OAuthResource.  # noqa: E501
        :rtype: str
        """
        return self._uriprefix

    @uriprefix.setter
    def uriprefix(self, uriprefix):
        """Sets the uriprefix of this OAuthResource.

        The uri prefix which this oauth protected resource relates to  # noqa: E501

        :param uriprefix: The uriprefix of this OAuthResource.  # noqa: E501
        :type: str
        """

        self._uriprefix = uriprefix

    @property
    def scopes(self):
        """Gets the scopes of this OAuthResource.  # noqa: E501

        Set of scope strings that have been resolved from querying the OAuth Resource Service at the uri prefix  # noqa: E501

        :return: The scopes of this OAuthResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this OAuthResource.

        Set of scope strings that have been resolved from querying the OAuth Resource Service at the uri prefix  # noqa: E501

        :param scopes: The scopes of this OAuthResource.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def enabled(self):
        """Gets the enabled of this OAuthResource.  # noqa: E501

        Flag to indicate if this oauth protected resource is enabled or not  # noqa: E501

        :return: The enabled of this OAuthResource.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OAuthResource.

        Flag to indicate if this oauth protected resource is enabled or not  # noqa: E501

        :param enabled: The enabled of this OAuthResource.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def is_default(self):
        """Gets the is_default of this OAuthResource.  # noqa: E501


        :return: The is_default of this OAuthResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this OAuthResource.


        :param is_default: The is_default of this OAuthResource.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def scope(self):
        """Gets the scope of this OAuthResource.  # noqa: E501


        :return: The scope of this OAuthResource.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OAuthResource.


        :param scope: The scope of this OAuthResource.  # noqa: E501
        :type: str
        """

        self._scope = scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
