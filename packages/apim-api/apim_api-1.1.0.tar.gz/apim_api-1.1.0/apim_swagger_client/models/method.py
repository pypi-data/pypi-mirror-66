# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Method(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'api_id': 'str',
        'path': 'str',
        'verb': 'str',
        'name': 'str',
        'summary': 'str',
        'description': 'str',
        'return_type': 'str',
        'parameters': 'list[Parameter]',
        'response_codes': 'list[ResponseCode]',
        'consumes': 'list[str]',
        'produces': 'list[str]',
        'properties': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'api_id': 'apiId',
        'path': 'path',
        'verb': 'verb',
        'name': 'name',
        'summary': 'summary',
        'description': 'description',
        'return_type': 'returnType',
        'parameters': 'parameters',
        'response_codes': 'responseCodes',
        'consumes': 'consumes',
        'produces': 'produces',
        'properties': 'properties'
    }

    def __init__(self, id=None, api_id=None, path=None, verb=None, name=None, summary=None, description=None, return_type=None, parameters=None, response_codes=None, consumes=None, produces=None, properties=None):  # noqa: E501
        """Method - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._api_id = None
        self._path = None
        self._verb = None
        self._name = None
        self._summary = None
        self._description = None
        self._return_type = None
        self._parameters = None
        self._response_codes = None
        self._consumes = None
        self._produces = None
        self._properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if api_id is not None:
            self.api_id = api_id
        if path is not None:
            self.path = path
        if verb is not None:
            self.verb = verb
        if name is not None:
            self.name = name
        if summary is not None:
            self.summary = summary
        if description is not None:
            self.description = description
        if return_type is not None:
            self.return_type = return_type
        if parameters is not None:
            self.parameters = parameters
        if response_codes is not None:
            self.response_codes = response_codes
        if consumes is not None:
            self.consumes = consumes
        if produces is not None:
            self.produces = produces
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this Method.  # noqa: E501

        The method identifier  # noqa: E501

        :return: The id of this Method.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Method.

        The method identifier  # noqa: E501

        :param id: The id of this Method.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def api_id(self):
        """Gets the api_id of this Method.  # noqa: E501

        The API identifier to which this method belongs  # noqa: E501

        :return: The api_id of this Method.  # noqa: E501
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this Method.

        The API identifier to which this method belongs  # noqa: E501

        :param api_id: The api_id of this Method.  # noqa: E501
        :type: str
        """

        self._api_id = api_id

    @property
    def path(self):
        """Gets the path of this Method.  # noqa: E501

        The API path  # noqa: E501

        :return: The path of this Method.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Method.

        The API path  # noqa: E501

        :param path: The path of this Method.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def verb(self):
        """Gets the verb of this Method.  # noqa: E501

        The HTTP verb  # noqa: E501

        :return: The verb of this Method.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this Method.

        The HTTP verb  # noqa: E501

        :param verb: The verb of this Method.  # noqa: E501
        :type: str
        """

        self._verb = verb

    @property
    def name(self):
        """Gets the name of this Method.  # noqa: E501

        The name of the operation  # noqa: E501

        :return: The name of this Method.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Method.

        The name of the operation  # noqa: E501

        :param name: The name of this Method.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this Method.  # noqa: E501

        A short summary description of the operation  # noqa: E501

        :return: The summary of this Method.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Method.

        A short summary description of the operation  # noqa: E501

        :param summary: The summary of this Method.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this Method.  # noqa: E501

        A detailed description of the operation  # noqa: E501

        :return: The description of this Method.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Method.

        A detailed description of the operation  # noqa: E501

        :param description: The description of this Method.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def return_type(self):
        """Gets the return_type of this Method.  # noqa: E501

        The return type of the method, e.g. void, array, or a type found in models  # noqa: E501

        :return: The return_type of this Method.  # noqa: E501
        :rtype: str
        """
        return self._return_type

    @return_type.setter
    def return_type(self, return_type):
        """Sets the return_type of this Method.

        The return type of the method, e.g. void, array, or a type found in models  # noqa: E501

        :param return_type: The return_type of this Method.  # noqa: E501
        :type: str
        """

        self._return_type = return_type

    @property
    def parameters(self):
        """Gets the parameters of this Method.  # noqa: E501

        A list of accepted parameters  # noqa: E501

        :return: The parameters of this Method.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Method.

        A list of accepted parameters  # noqa: E501

        :param parameters: The parameters of this Method.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    @property
    def response_codes(self):
        """Gets the response_codes of this Method.  # noqa: E501

        A list of possible response messages and their meanings  # noqa: E501

        :return: The response_codes of this Method.  # noqa: E501
        :rtype: list[ResponseCode]
        """
        return self._response_codes

    @response_codes.setter
    def response_codes(self, response_codes):
        """Sets the response_codes of this Method.

        A list of possible response messages and their meanings  # noqa: E501

        :param response_codes: The response_codes of this Method.  # noqa: E501
        :type: list[ResponseCode]
        """

        self._response_codes = response_codes

    @property
    def consumes(self):
        """Gets the consumes of this Method.  # noqa: E501

        The content types that the operation consumes  # noqa: E501

        :return: The consumes of this Method.  # noqa: E501
        :rtype: list[str]
        """
        return self._consumes

    @consumes.setter
    def consumes(self, consumes):
        """Sets the consumes of this Method.

        The content types that the operation consumes  # noqa: E501

        :param consumes: The consumes of this Method.  # noqa: E501
        :type: list[str]
        """

        self._consumes = consumes

    @property
    def produces(self):
        """Gets the produces of this Method.  # noqa: E501

        The content types that the operation produces  # noqa: E501

        :return: The produces of this Method.  # noqa: E501
        :rtype: list[str]
        """
        return self._produces

    @produces.setter
    def produces(self, produces):
        """Sets the produces of this Method.

        The content types that the operation produces  # noqa: E501

        :param produces: The produces of this Method.  # noqa: E501
        :type: list[str]
        """

        self._produces = produces

    @property
    def properties(self):
        """Gets the properties of this Method.  # noqa: E501

        A list of properties associated with this API Method. The list of properties may vary, depending on the type of the parent API.  # noqa: E501

        :return: The properties of this Method.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Method.

        A list of properties associated with this API Method. The list of properties may vary, depending on the type of the parent API.  # noqa: E501

        :param properties: The properties of this Method.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Method, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Method):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
