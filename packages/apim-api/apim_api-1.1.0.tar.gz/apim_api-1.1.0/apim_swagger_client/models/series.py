# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Series(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'point_interval': 'int',
        'point_start': 'int',
        'data': 'list[float]'
    }

    attribute_map = {
        'name': 'name',
        'point_interval': 'pointInterval',
        'point_start': 'pointStart',
        'data': 'data'
    }

    def __init__(self, name=None, point_interval=None, point_start=None, data=None):  # noqa: E501
        """Series - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._point_interval = None
        self._point_start = None
        self._data = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if point_interval is not None:
            self.point_interval = point_interval
        if point_start is not None:
            self.point_start = point_start
        if data is not None:
            self.data = data

    @property
    def name(self):
        """Gets the name of this Series.  # noqa: E501

        The metric type name  # noqa: E501

        :return: The name of this Series.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Series.

        The metric type name  # noqa: E501

        :param name: The name of this Series.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def point_interval(self):
        """Gets the point_interval of this Series.  # noqa: E501

        The amount of time, in milliseconds, between data points  # noqa: E501

        :return: The point_interval of this Series.  # noqa: E501
        :rtype: int
        """
        return self._point_interval

    @point_interval.setter
    def point_interval(self, point_interval):
        """Sets the point_interval of this Series.

        The amount of time, in milliseconds, between data points  # noqa: E501

        :param point_interval: The point_interval of this Series.  # noqa: E501
        :type: int
        """

        self._point_interval = point_interval

    @property
    def point_start(self):
        """Gets the point_start of this Series.  # noqa: E501

        The time of the first data point in milliseconds  # noqa: E501

        :return: The point_start of this Series.  # noqa: E501
        :rtype: int
        """
        return self._point_start

    @point_start.setter
    def point_start(self, point_start):
        """Sets the point_start of this Series.

        The time of the first data point in milliseconds  # noqa: E501

        :param point_start: The point_start of this Series.  # noqa: E501
        :type: int
        """

        self._point_start = point_start

    @property
    def data(self):
        """Gets the data of this Series.  # noqa: E501

        The a metric measurement at a specific time interval  # noqa: E501

        :return: The data of this Series.  # noqa: E501
        :rtype: list[float]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Series.

        The a metric measurement at a specific time interval  # noqa: E501

        :param data: The data of this Series.  # noqa: E501
        :type: list[float]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Series, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Series):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
