# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OAuthClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'cert': 'str',
        'secret': 'str',
        'type': 'str',
        'enabled': 'bool',
        'redirect_urls': 'list[str]',
        'cors_origins': 'list[str]',
        'created_by': 'str',
        'created_on': 'int',
        'application_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'cert': 'cert',
        'secret': 'secret',
        'type': 'type',
        'enabled': 'enabled',
        'redirect_urls': 'redirectUrls',
        'cors_origins': 'corsOrigins',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'application_id': 'applicationId'
    }

    def __init__(self, id=None, cert=None, secret=None, type=None, enabled=False, redirect_urls=None, cors_origins=None, created_by=None, created_on=None, application_id=None):  # noqa: E501
        """OAuthClient - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._cert = None
        self._secret = None
        self._type = None
        self._enabled = None
        self._redirect_urls = None
        self._cors_origins = None
        self._created_by = None
        self._created_on = None
        self._application_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if cert is not None:
            self.cert = cert
        if secret is not None:
            self.secret = secret
        if type is not None:
            self.type = type
        if enabled is not None:
            self.enabled = enabled
        if redirect_urls is not None:
            self.redirect_urls = redirect_urls
        if cors_origins is not None:
            self.cors_origins = cors_origins
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if application_id is not None:
            self.application_id = application_id

    @property
    def id(self):
        """Gets the id of this OAuthClient.  # noqa: E501

        The client ID to be used in OAuth flows  # noqa: E501

        :return: The id of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OAuthClient.

        The client ID to be used in OAuth flows  # noqa: E501

        :param id: The id of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def cert(self):
        """Gets the cert of this OAuthClient.  # noqa: E501

        The PEM encodeded certificate used in JWT flow  # noqa: E501

        :return: The cert of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this OAuthClient.

        The PEM encodeded certificate used in JWT flow  # noqa: E501

        :param cert: The cert of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._cert = cert

    @property
    def secret(self):
        """Gets the secret of this OAuthClient.  # noqa: E501

        The client application secret to be used in OAuth flows  # noqa: E501

        :return: The secret of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this OAuthClient.

        The client application secret to be used in OAuth flows  # noqa: E501

        :param secret: The secret of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def type(self):
        """Gets the type of this OAuthClient.  # noqa: E501

        OAuth defines two client types, based on their ability to authenticate securely with the authorization server. Possible values public or confidential  # noqa: E501

        :return: The type of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OAuthClient.

        OAuth defines two client types, based on their ability to authenticate securely with the authorization server. Possible values public or confidential  # noqa: E501

        :param type: The type of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def enabled(self):
        """Gets the enabled of this OAuthClient.  # noqa: E501

        Flag disables the OAuth credentials so they can't be used in authentication  # noqa: E501

        :return: The enabled of this OAuthClient.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OAuthClient.

        Flag disables the OAuth credentials so they can't be used in authentication  # noqa: E501

        :param enabled: The enabled of this OAuthClient.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def redirect_urls(self):
        """Gets the redirect_urls of this OAuthClient.  # noqa: E501

        The URL where the server will redirect the to present authorization codes or access tokens depending on the OAuth flow being executed  # noqa: E501

        :return: The redirect_urls of this OAuthClient.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_urls

    @redirect_urls.setter
    def redirect_urls(self, redirect_urls):
        """Sets the redirect_urls of this OAuthClient.

        The URL where the server will redirect the to present authorization codes or access tokens depending on the OAuth flow being executed  # noqa: E501

        :param redirect_urls: The redirect_urls of this OAuthClient.  # noqa: E501
        :type: list[str]
        """

        self._redirect_urls = redirect_urls

    @property
    def cors_origins(self):
        """Gets the cors_origins of this OAuthClient.  # noqa: E501

        The domains to allow access for browser-based clients  # noqa: E501

        :return: The cors_origins of this OAuthClient.  # noqa: E501
        :rtype: list[str]
        """
        return self._cors_origins

    @cors_origins.setter
    def cors_origins(self, cors_origins):
        """Sets the cors_origins of this OAuthClient.

        The domains to allow access for browser-based clients  # noqa: E501

        :param cors_origins: The cors_origins of this OAuthClient.  # noqa: E501
        :type: list[str]
        """

        self._cors_origins = cors_origins

    @property
    def created_by(self):
        """Gets the created_by of this OAuthClient.  # noqa: E501

        The unique identifier for user that generated the OAuth credentials  # noqa: E501

        :return: The created_by of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OAuthClient.

        The unique identifier for user that generated the OAuth credentials  # noqa: E501

        :param created_by: The created_by of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this OAuthClient.  # noqa: E501

        Epoch/Unix time stamp when the OAuth credentials was created  # noqa: E501

        :return: The created_on of this OAuthClient.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this OAuthClient.

        Epoch/Unix time stamp when the OAuth credentials was created  # noqa: E501

        :param created_on: The created_on of this OAuthClient.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def application_id(self):
        """Gets the application_id of this OAuthClient.  # noqa: E501

        The application identifier associated with the OAuth credential  # noqa: E501

        :return: The application_id of this OAuthClient.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this OAuthClient.

        The application identifier associated with the OAuth credential  # noqa: E501

        :param application_id: The application_id of this OAuthClient.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthClient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
