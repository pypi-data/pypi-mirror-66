# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegistrationToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'organization_id': 'str',
        'expiry': 'int',
        'created_on': 'int',
        'created_by': 'str',
        'user_quota': 'int',
        'max_users': 'int',
        'enabled': 'bool'
    }

    attribute_map = {
        'token': 'token',
        'organization_id': 'organizationId',
        'expiry': 'expiry',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'user_quota': 'userQuota',
        'max_users': 'maxUsers',
        'enabled': 'enabled'
    }

    def __init__(self, token=None, organization_id=None, expiry=None, created_on=None, created_by=None, user_quota=None, max_users=None, enabled=False):  # noqa: E501
        """RegistrationToken - a model defined in Swagger"""  # noqa: E501

        self._token = None
        self._organization_id = None
        self._expiry = None
        self._created_on = None
        self._created_by = None
        self._user_quota = None
        self._max_users = None
        self._enabled = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if organization_id is not None:
            self.organization_id = organization_id
        if expiry is not None:
            self.expiry = expiry
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if user_quota is not None:
            self.user_quota = user_quota
        if max_users is not None:
            self.max_users = max_users
        if enabled is not None:
            self.enabled = enabled

    @property
    def token(self):
        """Gets the token of this RegistrationToken.  # noqa: E501

        The registration code  # noqa: E501

        :return: The token of this RegistrationToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this RegistrationToken.

        The registration code  # noqa: E501

        :param token: The token of this RegistrationToken.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def organization_id(self):
        """Gets the organization_id of this RegistrationToken.  # noqa: E501

        Unique identifier for the organization who the registration code applies to  # noqa: E501

        :return: The organization_id of this RegistrationToken.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this RegistrationToken.

        Unique identifier for the organization who the registration code applies to  # noqa: E501

        :param organization_id: The organization_id of this RegistrationToken.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def expiry(self):
        """Gets the expiry of this RegistrationToken.  # noqa: E501

        Epoch/Unix time stamp when the registration code will expire  # noqa: E501

        :return: The expiry of this RegistrationToken.  # noqa: E501
        :rtype: int
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this RegistrationToken.

        Epoch/Unix time stamp when the registration code will expire  # noqa: E501

        :param expiry: The expiry of this RegistrationToken.  # noqa: E501
        :type: int
        """

        self._expiry = expiry

    @property
    def created_on(self):
        """Gets the created_on of this RegistrationToken.  # noqa: E501

        Epoch/Unix time stamp when the registration code was created  # noqa: E501

        :return: The created_on of this RegistrationToken.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this RegistrationToken.

        Epoch/Unix time stamp when the registration code was created  # noqa: E501

        :param created_on: The created_on of this RegistrationToken.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this RegistrationToken.  # noqa: E501

        The unique identifier for user that created the registration code  # noqa: E501

        :return: The created_by of this RegistrationToken.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RegistrationToken.

        The unique identifier for user that created the registration code  # noqa: E501

        :param created_by: The created_by of this RegistrationToken.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def user_quota(self):
        """Gets the user_quota of this RegistrationToken.  # noqa: E501

        The remaining number of users that can use the registration code for self registration to an organization  # noqa: E501

        :return: The user_quota of this RegistrationToken.  # noqa: E501
        :rtype: int
        """
        return self._user_quota

    @user_quota.setter
    def user_quota(self, user_quota):
        """Sets the user_quota of this RegistrationToken.

        The remaining number of users that can use the registration code for self registration to an organization  # noqa: E501

        :param user_quota: The user_quota of this RegistrationToken.  # noqa: E501
        :type: int
        """

        self._user_quota = user_quota

    @property
    def max_users(self):
        """Gets the max_users of this RegistrationToken.  # noqa: E501

        The total number of users that can use the registration code for self registration to an organization since the code has been created  # noqa: E501

        :return: The max_users of this RegistrationToken.  # noqa: E501
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this RegistrationToken.

        The total number of users that can use the registration code for self registration to an organization since the code has been created  # noqa: E501

        :param max_users: The max_users of this RegistrationToken.  # noqa: E501
        :type: int
        """

        self._max_users = max_users

    @property
    def enabled(self):
        """Gets the enabled of this RegistrationToken.  # noqa: E501

        Flag disables registration code so that it can no longer be used for registration  # noqa: E501

        :return: The enabled of this RegistrationToken.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RegistrationToken.

        Flag disables registration code so that it can no longer be used for registration  # noqa: E501

        :param enabled: The enabled of this RegistrationToken.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistrationToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
