# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SwaggerSecurityDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'type_display_name': 'str',
        'name': 'str',
        'order': 'int',
        'scopes': 'list[str]',
        'scope_matching': 'str'
    }

    attribute_map = {
        'type': 'type',
        'type_display_name': 'typeDisplayName',
        'name': 'name',
        'order': 'order',
        'scopes': 'scopes',
        'scope_matching': 'scopeMatching'
    }

    def __init__(self, type=None, type_display_name=None, name=None, order=None, scopes=None, scope_matching=None):  # noqa: E501
        """SwaggerSecurityDevice - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._type_display_name = None
        self._name = None
        self._order = None
        self._scopes = None
        self._scope_matching = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if type_display_name is not None:
            self.type_display_name = type_display_name
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if scopes is not None:
            self.scopes = scopes
        if scope_matching is not None:
            self.scope_matching = scope_matching

    @property
    def type(self):
        """Gets the type of this SwaggerSecurityDevice.  # noqa: E501

        Type identifier for the device. Possible Values: HTTPBasicSecurityDevice, OAuthSecurityDevice, AWSRESTRequestSecurityDevice, AWSQueryStringRequestSecurityDevice, APIKeyOnlySecurityDevice, APIKeyAndSecretSecurityDevice, TwoWaySSLSecurityDevice  # noqa: E501

        :return: The type of this SwaggerSecurityDevice.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SwaggerSecurityDevice.

        Type identifier for the device. Possible Values: HTTPBasicSecurityDevice, OAuthSecurityDevice, AWSRESTRequestSecurityDevice, AWSQueryStringRequestSecurityDevice, APIKeyOnlySecurityDevice, APIKeyAndSecretSecurityDevice, TwoWaySSLSecurityDevice  # noqa: E501

        :param type: The type of this SwaggerSecurityDevice.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_display_name(self):
        """Gets the type_display_name of this SwaggerSecurityDevice.  # noqa: E501

        Textual display name for the device  # noqa: E501

        :return: The type_display_name of this SwaggerSecurityDevice.  # noqa: E501
        :rtype: str
        """
        return self._type_display_name

    @type_display_name.setter
    def type_display_name(self, type_display_name):
        """Sets the type_display_name of this SwaggerSecurityDevice.

        Textual display name for the device  # noqa: E501

        :param type_display_name: The type_display_name of this SwaggerSecurityDevice.  # noqa: E501
        :type: str
        """

        self._type_display_name = type_display_name

    @property
    def name(self):
        """Gets the name of this SwaggerSecurityDevice.  # noqa: E501

        Name of the device  # noqa: E501

        :return: The name of this SwaggerSecurityDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SwaggerSecurityDevice.

        Name of the device  # noqa: E501

        :param name: The name of this SwaggerSecurityDevice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this SwaggerSecurityDevice.  # noqa: E501

        Order of preference, zero being highest. Devices will attempt to authenticate the incoming request using this order of preference.  # noqa: E501

        :return: The order of this SwaggerSecurityDevice.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SwaggerSecurityDevice.

        Order of preference, zero being highest. Devices will attempt to authenticate the incoming request using this order of preference.  # noqa: E501

        :param order: The order of this SwaggerSecurityDevice.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def scopes(self):
        """Gets the scopes of this SwaggerSecurityDevice.  # noqa: E501

        The list of scopes defined for the security device.  # noqa: E501

        :return: The scopes of this SwaggerSecurityDevice.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this SwaggerSecurityDevice.

        The list of scopes defined for the security device.  # noqa: E501

        :param scopes: The scopes of this SwaggerSecurityDevice.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def scope_matching(self):
        """Gets the scope_matching of this SwaggerSecurityDevice.  # noqa: E501

        Specifies how scopes will be matched. Possible values: [ Any, All ]  # noqa: E501

        :return: The scope_matching of this SwaggerSecurityDevice.  # noqa: E501
        :rtype: str
        """
        return self._scope_matching

    @scope_matching.setter
    def scope_matching(self, scope_matching):
        """Sets the scope_matching of this SwaggerSecurityDevice.

        Specifies how scopes will be matched. Possible values: [ Any, All ]  # noqa: E501

        :param scope_matching: The scope_matching of this SwaggerSecurityDevice.  # noqa: E501
        :type: str
        """

        self._scope_matching = scope_matching

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwaggerSecurityDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwaggerSecurityDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
