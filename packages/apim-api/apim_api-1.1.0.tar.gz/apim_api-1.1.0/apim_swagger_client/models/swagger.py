# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Swagger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'format': 'str',
        'required': 'list[str]',
        'properties': 'dict(str, SchemaObject)',
        'items': 'SchemaObject',
        'example': 'object',
        'max_length': 'int',
        'min_length': 'int',
        'pattern': 'str',
        'exclusive_minimum': 'bool',
        'exclusive_maximum': 'bool',
        'minimum': 'object',
        'maximum': 'object',
        'multiple_of': 'Number',
        'max_items': 'int',
        'min_items': 'int',
        'unique_items': 'bool',
        'collection_format': 'str',
        'discriminator': 'str',
        'api_version': 'str',
        'swagger_version': 'str',
        'base_path': 'str',
        '_resource_path': 'str',
        'models': 'dict(str, object)',
        'consumes': 'list[str]',
        'produces': 'list[str]',
        'authorizations': 'dict(str, Authorization)',
        'name': 'str',
        'summary': 'str',
        'security_profile': 'SwaggerSecurityProfile',
        'base_paths': 'list[str]',
        'image': 'str',
        'state': 'str',
        'cors': 'bool',
        'expired': 'bool',
        'deprecated': 'bool',
        'retirement_date': 'int',
        'tags': 'dict(str, list[str])',
        'documentation_url': 'str',
        'available_api_definitions': 'dict(str, str)',
        'available_sdk': 'dict(str, str)',
        'apis': 'list[API]',
        'ref': 'str',
        'default': 'object',
        'type': 'str',
        'enum': 'list[object]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'format': 'format',
        'required': 'required',
        'properties': 'properties',
        'items': 'items',
        'example': 'example',
        'max_length': 'maxLength',
        'min_length': 'minLength',
        'pattern': 'pattern',
        'exclusive_minimum': 'exclusiveMinimum',
        'exclusive_maximum': 'exclusiveMaximum',
        'minimum': 'minimum',
        'maximum': 'maximum',
        'multiple_of': 'multipleOf',
        'max_items': 'maxItems',
        'min_items': 'minItems',
        'unique_items': 'uniqueItems',
        'collection_format': 'collectionFormat',
        'discriminator': 'discriminator',
        'api_version': 'apiVersion',
        'swagger_version': 'swaggerVersion',
        'base_path': 'basePath',
        '_resource_path': 'resourcePath',
        'models': 'models',
        'consumes': 'consumes',
        'produces': 'produces',
        'authorizations': 'authorizations',
        'name': 'name',
        'summary': 'summary',
        'security_profile': 'securityProfile',
        'base_paths': 'basePaths',
        'image': 'image',
        'state': 'state',
        'cors': 'cors',
        'expired': 'expired',
        'deprecated': 'deprecated',
        'retirement_date': 'retirementDate',
        'tags': 'tags',
        'documentation_url': 'documentationUrl',
        'available_api_definitions': 'availableApiDefinitions',
        'available_sdk': 'availableSDK',
        'apis': 'apis',
        'ref': '$ref',
        'default': 'default',
        'type': 'type',
        'enum': 'enum'
    }

    def __init__(self, id=None, title=None, description=None, format=None, required=None, properties=None, items=None, example=None, max_length=None, min_length=None, pattern=None, exclusive_minimum=False, exclusive_maximum=False, minimum=None, maximum=None, multiple_of=None, max_items=None, min_items=None, unique_items=False, collection_format=None, discriminator=None, api_version=None, swagger_version=None, base_path=None, _resource_path=None, models=None, consumes=None, produces=None, authorizations=None, name=None, summary=None, security_profile=None, base_paths=None, image=None, state=None, cors=False, expired=False, deprecated=False, retirement_date=None, tags=None, documentation_url=None, available_api_definitions=None, available_sdk=None, apis=None, ref=None, default=None, type=None, enum=None):  # noqa: E501
        """Swagger - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._description = None
        self._format = None
        self._required = None
        self._properties = None
        self._items = None
        self._example = None
        self._max_length = None
        self._min_length = None
        self._pattern = None
        self._exclusive_minimum = None
        self._exclusive_maximum = None
        self._minimum = None
        self._maximum = None
        self._multiple_of = None
        self._max_items = None
        self._min_items = None
        self._unique_items = None
        self._collection_format = None
        self._discriminator = None
        self._api_version = None
        self._swagger_version = None
        self._base_path = None
        self.__resource_path = None
        self._models = None
        self._consumes = None
        self._produces = None
        self._authorizations = None
        self._name = None
        self._summary = None
        self._security_profile = None
        self._base_paths = None
        self._image = None
        self._state = None
        self._cors = None
        self._expired = None
        self._deprecated = None
        self._retirement_date = None
        self._tags = None
        self._documentation_url = None
        self._available_api_definitions = None
        self._available_sdk = None
        self._apis = None
        self._ref = None
        self._default = None
        self._type = None
        self._enum = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if format is not None:
            self.format = format
        if required is not None:
            self.required = required
        if properties is not None:
            self.properties = properties
        if items is not None:
            self.items = items
        if example is not None:
            self.example = example
        if max_length is not None:
            self.max_length = max_length
        if min_length is not None:
            self.min_length = min_length
        if pattern is not None:
            self.pattern = pattern
        if exclusive_minimum is not None:
            self.exclusive_minimum = exclusive_minimum
        if exclusive_maximum is not None:
            self.exclusive_maximum = exclusive_maximum
        if minimum is not None:
            self.minimum = minimum
        if maximum is not None:
            self.maximum = maximum
        if multiple_of is not None:
            self.multiple_of = multiple_of
        if max_items is not None:
            self.max_items = max_items
        if min_items is not None:
            self.min_items = min_items
        if unique_items is not None:
            self.unique_items = unique_items
        if collection_format is not None:
            self.collection_format = collection_format
        if discriminator is not None:
            self.discriminator = discriminator
        if api_version is not None:
            self.api_version = api_version
        if swagger_version is not None:
            self.swagger_version = swagger_version
        if base_path is not None:
            self.base_path = base_path
        if _resource_path is not None:
            self._resource_path = _resource_path
        if models is not None:
            self.models = models
        if consumes is not None:
            self.consumes = consumes
        if produces is not None:
            self.produces = produces
        if authorizations is not None:
            self.authorizations = authorizations
        if name is not None:
            self.name = name
        if summary is not None:
            self.summary = summary
        if security_profile is not None:
            self.security_profile = security_profile
        if base_paths is not None:
            self.base_paths = base_paths
        if image is not None:
            self.image = image
        if state is not None:
            self.state = state
        if cors is not None:
            self.cors = cors
        if expired is not None:
            self.expired = expired
        if deprecated is not None:
            self.deprecated = deprecated
        if retirement_date is not None:
            self.retirement_date = retirement_date
        if tags is not None:
            self.tags = tags
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if available_api_definitions is not None:
            self.available_api_definitions = available_api_definitions
        if available_sdk is not None:
            self.available_sdk = available_sdk
        if apis is not None:
            self.apis = apis
        if ref is not None:
            self.ref = ref
        if default is not None:
            self.default = default
        if type is not None:
            self.type = type
        if enum is not None:
            self.enum = enum

    @property
    def id(self):
        """Gets the id of this Swagger.  # noqa: E501

        An identifier  # noqa: E501

        :return: The id of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Swagger.

        An identifier  # noqa: E501

        :param id: The id of this Swagger.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Swagger.  # noqa: E501

        Schema title  # noqa: E501

        :return: The title of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Swagger.

        Schema title  # noqa: E501

        :param title: The title of this Swagger.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Swagger.  # noqa: E501

        Description of the Schema  # noqa: E501

        :return: The description of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Swagger.

        Description of the Schema  # noqa: E501

        :param description: The description of this Swagger.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def format(self):
        """Gets the format of this Swagger.  # noqa: E501

        The format ex: int32, int64, float, double, byte, binary, date, date-time or password  # noqa: E501

        :return: The format of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Swagger.

        The format ex: int32, int64, float, double, byte, binary, date, date-time or password  # noqa: E501

        :param format: The format of this Swagger.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def required(self):
        """Gets the required of this Swagger.  # noqa: E501

        Specifies if the parameter is required  # noqa: E501

        :return: The required of this Swagger.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Swagger.

        Specifies if the parameter is required  # noqa: E501

        :param required: The required of this Swagger.  # noqa: E501
        :type: list[str]
        """

        self._required = required

    @property
    def properties(self):
        """Gets the properties of this Swagger.  # noqa: E501

        Not used because our model does not support inline nested types  # noqa: E501

        :return: The properties of this Swagger.  # noqa: E501
        :rtype: dict(str, SchemaObject)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Swagger.

        Not used because our model does not support inline nested types  # noqa: E501

        :param properties: The properties of this Swagger.  # noqa: E501
        :type: dict(str, SchemaObject)
        """

        self._properties = properties

    @property
    def items(self):
        """Gets the items of this Swagger.  # noqa: E501

        if the schema is an array specifies the items type  # noqa: E501

        :return: The items of this Swagger.  # noqa: E501
        :rtype: SchemaObject
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Swagger.

        if the schema is an array specifies the items type  # noqa: E501

        :param items: The items of this Swagger.  # noqa: E501
        :type: SchemaObject
        """

        self._items = items

    @property
    def example(self):
        """Gets the example of this Swagger.  # noqa: E501

        if the schema is an array specifies the items type  # noqa: E501

        :return: The example of this Swagger.  # noqa: E501
        :rtype: object
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this Swagger.

        if the schema is an array specifies the items type  # noqa: E501

        :param example: The example of this Swagger.  # noqa: E501
        :type: object
        """

        self._example = example

    @property
    def max_length(self):
        """Gets the max_length of this Swagger.  # noqa: E501

        Indicates the maximum length of a parameter of type 'string'  # noqa: E501

        :return: The max_length of this Swagger.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this Swagger.

        Indicates the maximum length of a parameter of type 'string'  # noqa: E501

        :param max_length: The max_length of this Swagger.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def min_length(self):
        """Gets the min_length of this Swagger.  # noqa: E501

        Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.  # noqa: E501

        :return: The min_length of this Swagger.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this Swagger.

        Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.  # noqa: E501

        :param min_length: The min_length of this Swagger.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    @property
    def pattern(self):
        """Gets the pattern of this Swagger.  # noqa: E501

        Specifies a valid regular expression against which a parameter of type 'string' is validated.  # noqa: E501

        :return: The pattern of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this Swagger.

        Specifies a valid regular expression against which a parameter of type 'string' is validated.  # noqa: E501

        :param pattern: The pattern of this Swagger.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def exclusive_minimum(self):
        """Gets the exclusive_minimum of this Swagger.  # noqa: E501

        If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.  # noqa: E501

        :return: The exclusive_minimum of this Swagger.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_minimum

    @exclusive_minimum.setter
    def exclusive_minimum(self, exclusive_minimum):
        """Sets the exclusive_minimum of this Swagger.

        If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.  # noqa: E501

        :param exclusive_minimum: The exclusive_minimum of this Swagger.  # noqa: E501
        :type: bool
        """

        self._exclusive_minimum = exclusive_minimum

    @property
    def exclusive_maximum(self):
        """Gets the exclusive_maximum of this Swagger.  # noqa: E501

        If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.  # noqa: E501

        :return: The exclusive_maximum of this Swagger.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_maximum

    @exclusive_maximum.setter
    def exclusive_maximum(self, exclusive_maximum):
        """Sets the exclusive_maximum of this Swagger.

        If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.  # noqa: E501

        :param exclusive_maximum: The exclusive_maximum of this Swagger.  # noqa: E501
        :type: bool
        """

        self._exclusive_maximum = exclusive_maximum

    @property
    def minimum(self):
        """Gets the minimum of this Swagger.  # noqa: E501

        Specifies the minimum possible value of the number parameter.  # noqa: E501

        :return: The minimum of this Swagger.  # noqa: E501
        :rtype: object
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this Swagger.

        Specifies the minimum possible value of the number parameter.  # noqa: E501

        :param minimum: The minimum of this Swagger.  # noqa: E501
        :type: object
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this Swagger.  # noqa: E501

        Specifies the maximum possible value of the number parameter.  # noqa: E501

        :return: The maximum of this Swagger.  # noqa: E501
        :rtype: object
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this Swagger.

        Specifies the maximum possible value of the number parameter.  # noqa: E501

        :param maximum: The maximum of this Swagger.  # noqa: E501
        :type: object
        """

        self._maximum = maximum

    @property
    def multiple_of(self):
        """Gets the multiple_of of this Swagger.  # noqa: E501

        Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0  # noqa: E501

        :return: The multiple_of of this Swagger.  # noqa: E501
        :rtype: Number
        """
        return self._multiple_of

    @multiple_of.setter
    def multiple_of(self, multiple_of):
        """Sets the multiple_of of this Swagger.

        Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0  # noqa: E501

        :param multiple_of: The multiple_of of this Swagger.  # noqa: E501
        :type: Number
        """

        self._multiple_of = multiple_of

    @property
    def max_items(self):
        """Gets the max_items of this Swagger.  # noqa: E501

        Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0  # noqa: E501

        :return: The max_items of this Swagger.  # noqa: E501
        :rtype: int
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this Swagger.

        Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0  # noqa: E501

        :param max_items: The max_items of this Swagger.  # noqa: E501
        :type: int
        """

        self._max_items = max_items

    @property
    def min_items(self):
        """Gets the min_items of this Swagger.  # noqa: E501

        Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0  # noqa: E501

        :return: The min_items of this Swagger.  # noqa: E501
        :rtype: int
        """
        return self._min_items

    @min_items.setter
    def min_items(self, min_items):
        """Sets the min_items of this Swagger.

        Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0  # noqa: E501

        :param min_items: The min_items of this Swagger.  # noqa: E501
        :type: int
        """

        self._min_items = min_items

    @property
    def unique_items(self):
        """Gets the unique_items of this Swagger.  # noqa: E501

        Specifies whether or not all array items should be unique.  # noqa: E501

        :return: The unique_items of this Swagger.  # noqa: E501
        :rtype: bool
        """
        return self._unique_items

    @unique_items.setter
    def unique_items(self, unique_items):
        """Sets the unique_items of this Swagger.

        Specifies whether or not all array items should be unique.  # noqa: E501

        :param unique_items: The unique_items of this Swagger.  # noqa: E501
        :type: bool
        """

        self._unique_items = unique_items

    @property
    def collection_format(self):
        """Gets the collection_format of this Swagger.  # noqa: E501


        :return: The collection_format of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._collection_format

    @collection_format.setter
    def collection_format(self, collection_format):
        """Sets the collection_format of this Swagger.


        :param collection_format: The collection_format of this Swagger.  # noqa: E501
        :type: str
        """

        self._collection_format = collection_format

    @property
    def discriminator(self):
        """Gets the discriminator of this Swagger.  # noqa: E501


        :return: The discriminator of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this Swagger.


        :param discriminator: The discriminator of this Swagger.  # noqa: E501
        :type: str
        """

        self._discriminator = discriminator

    @property
    def api_version(self):
        """Gets the api_version of this Swagger.  # noqa: E501

        The API version  # noqa: E501

        :return: The api_version of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Swagger.

        The API version  # noqa: E501

        :param api_version: The api_version of this Swagger.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def swagger_version(self):
        """Gets the swagger_version of this Swagger.  # noqa: E501

        The Swagger version  # noqa: E501

        :return: The swagger_version of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._swagger_version

    @swagger_version.setter
    def swagger_version(self, swagger_version):
        """Sets the swagger_version of this Swagger.

        The Swagger version  # noqa: E501

        :param swagger_version: The swagger_version of this Swagger.  # noqa: E501
        :type: str
        """

        self._swagger_version = swagger_version

    @property
    def base_path(self):
        """Gets the base_path of this Swagger.  # noqa: E501

        The base path  # noqa: E501

        :return: The base_path of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this Swagger.

        The base path  # noqa: E501

        :param base_path: The base_path of this Swagger.  # noqa: E501
        :type: str
        """

        self._base_path = base_path

    @property
    def _resource_path(self):
        """Gets the _resource_path of this Swagger.  # noqa: E501

        The resource path hosted  # noqa: E501

        :return: The _resource_path of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self.__resource_path

    @_resource_path.setter
    def _resource_path(self, _resource_path):
        """Sets the _resource_path of this Swagger.

        The resource path hosted  # noqa: E501

        :param _resource_path: The _resource_path of this Swagger.  # noqa: E501
        :type: str
        """

        self.__resource_path = _resource_path

    @property
    def models(self):
        """Gets the models of this Swagger.  # noqa: E501

        The models/schema for the API  # noqa: E501

        :return: The models of this Swagger.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Swagger.

        The models/schema for the API  # noqa: E501

        :param models: The models of this Swagger.  # noqa: E501
        :type: dict(str, object)
        """

        self._models = models

    @property
    def consumes(self):
        """Gets the consumes of this Swagger.  # noqa: E501

        The content types that the API consumes  # noqa: E501

        :return: The consumes of this Swagger.  # noqa: E501
        :rtype: list[str]
        """
        return self._consumes

    @consumes.setter
    def consumes(self, consumes):
        """Sets the consumes of this Swagger.

        The content types that the API consumes  # noqa: E501

        :param consumes: The consumes of this Swagger.  # noqa: E501
        :type: list[str]
        """

        self._consumes = consumes

    @property
    def produces(self):
        """Gets the produces of this Swagger.  # noqa: E501

        The content types that the API produces  # noqa: E501

        :return: The produces of this Swagger.  # noqa: E501
        :rtype: list[str]
        """
        return self._produces

    @produces.setter
    def produces(self, produces):
        """Sets the produces of this Swagger.

        The content types that the API produces  # noqa: E501

        :param produces: The produces of this Swagger.  # noqa: E501
        :type: list[str]
        """

        self._produces = produces

    @property
    def authorizations(self):
        """Gets the authorizations of this Swagger.  # noqa: E501

        The Authorization schemes provided for this API  # noqa: E501

        :return: The authorizations of this Swagger.  # noqa: E501
        :rtype: dict(str, Authorization)
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this Swagger.

        The Authorization schemes provided for this API  # noqa: E501

        :param authorizations: The authorizations of this Swagger.  # noqa: E501
        :type: dict(str, Authorization)
        """

        self._authorizations = authorizations

    @property
    def name(self):
        """Gets the name of this Swagger.  # noqa: E501

        The name of the API  # noqa: E501

        :return: The name of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Swagger.

        The name of the API  # noqa: E501

        :param name: The name of this Swagger.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this Swagger.  # noqa: E501

        Brief summary of the API.  # noqa: E501

        :return: The summary of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Swagger.

        Brief summary of the API.  # noqa: E501

        :param summary: The summary of this Swagger.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def security_profile(self):
        """Gets the security_profile of this Swagger.  # noqa: E501

        The security profile associated with the API  # noqa: E501

        :return: The security_profile of this Swagger.  # noqa: E501
        :rtype: SwaggerSecurityProfile
        """
        return self._security_profile

    @security_profile.setter
    def security_profile(self, security_profile):
        """Sets the security_profile of this Swagger.

        The security profile associated with the API  # noqa: E501

        :param security_profile: The security_profile of this Swagger.  # noqa: E501
        :type: SwaggerSecurityProfile
        """

        self._security_profile = security_profile

    @property
    def base_paths(self):
        """Gets the base_paths of this Swagger.  # noqa: E501

        Array of basePaths supported for this API/service, based on the configured ports  # noqa: E501

        :return: The base_paths of this Swagger.  # noqa: E501
        :rtype: list[str]
        """
        return self._base_paths

    @base_paths.setter
    def base_paths(self, base_paths):
        """Sets the base_paths of this Swagger.

        Array of basePaths supported for this API/service, based on the configured ports  # noqa: E501

        :param base_paths: The base_paths of this Swagger.  # noqa: E501
        :type: list[str]
        """

        self._base_paths = base_paths

    @property
    def image(self):
        """Gets the image of this Swagger.  # noqa: E501

        API image URL  # noqa: E501

        :return: The image of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Swagger.

        API image URL  # noqa: E501

        :param image: The image of this Swagger.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def state(self):
        """Gets the state of this Swagger.  # noqa: E501

        The state of the API.  Possible values: 'pending', 'unpublished', or 'published'.  # noqa: E501

        :return: The state of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Swagger.

        The state of the API.  Possible values: 'pending', 'unpublished', or 'published'.  # noqa: E501

        :param state: The state of this Swagger.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def cors(self):
        """Gets the cors of this Swagger.  # noqa: E501

        Indicates that the API is CORS enabled  # noqa: E501

        :return: The cors of this Swagger.  # noqa: E501
        :rtype: bool
        """
        return self._cors

    @cors.setter
    def cors(self, cors):
        """Sets the cors of this Swagger.

        Indicates that the API is CORS enabled  # noqa: E501

        :param cors: The cors of this Swagger.  # noqa: E501
        :type: bool
        """

        self._cors = cors

    @property
    def expired(self):
        """Gets the expired of this Swagger.  # noqa: E501

        Indicates that the API is expired.  # noqa: E501

        :return: The expired of this Swagger.  # noqa: E501
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this Swagger.

        Indicates that the API is expired.  # noqa: E501

        :param expired: The expired of this Swagger.  # noqa: E501
        :type: bool
        """

        self._expired = expired

    @property
    def deprecated(self):
        """Gets the deprecated of this Swagger.  # noqa: E501

        Indicates that the API is deprecated.  If 'true', then the API may have a 'retirementDate'.  # noqa: E501

        :return: The deprecated of this Swagger.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Swagger.

        Indicates that the API is deprecated.  If 'true', then the API may have a 'retirementDate'.  # noqa: E501

        :param deprecated: The deprecated of this Swagger.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def retirement_date(self):
        """Gets the retirement_date of this Swagger.  # noqa: E501

        Indicates that the API is deprecated and will be retired on the supplied date (in milliseconds).  # noqa: E501

        :return: The retirement_date of this Swagger.  # noqa: E501
        :rtype: int
        """
        return self._retirement_date

    @retirement_date.setter
    def retirement_date(self, retirement_date):
        """Sets the retirement_date of this Swagger.

        Indicates that the API is deprecated and will be retired on the supplied date (in milliseconds).  # noqa: E501

        :param retirement_date: The retirement_date of this Swagger.  # noqa: E501
        :type: int
        """

        self._retirement_date = retirement_date

    @property
    def tags(self):
        """Gets the tags of this Swagger.  # noqa: E501

        The list of tags associated with this API. Each tag can have multiple values  # noqa: E501

        :return: The tags of this Swagger.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Swagger.

        The list of tags associated with this API. Each tag can have multiple values  # noqa: E501

        :param tags: The tags of this Swagger.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._tags = tags

    @property
    def documentation_url(self):
        """Gets the documentation_url of this Swagger.  # noqa: E501

        The documentation URL for the operation  # noqa: E501

        :return: The documentation_url of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this Swagger.

        The documentation URL for the operation  # noqa: E501

        :param documentation_url: The documentation_url of this Swagger.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    @property
    def available_api_definitions(self):
        """Gets the available_api_definitions of this Swagger.  # noqa: E501

        The schema definitions that this API supports and links to those definitions.  # noqa: E501

        :return: The available_api_definitions of this Swagger.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._available_api_definitions

    @available_api_definitions.setter
    def available_api_definitions(self, available_api_definitions):
        """Sets the available_api_definitions of this Swagger.

        The schema definitions that this API supports and links to those definitions.  # noqa: E501

        :param available_api_definitions: The available_api_definitions of this Swagger.  # noqa: E501
        :type: dict(str, str)
        """

        self._available_api_definitions = available_api_definitions

    @property
    def available_sdk(self):
        """Gets the available_sdk of this Swagger.  # noqa: E501

        The SDK downloads that this API supports and links to those downloads.  # noqa: E501

        :return: The available_sdk of this Swagger.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._available_sdk

    @available_sdk.setter
    def available_sdk(self, available_sdk):
        """Sets the available_sdk of this Swagger.

        The SDK downloads that this API supports and links to those downloads.  # noqa: E501

        :param available_sdk: The available_sdk of this Swagger.  # noqa: E501
        :type: dict(str, str)
        """

        self._available_sdk = available_sdk

    @property
    def apis(self):
        """Gets the apis of this Swagger.  # noqa: E501

        The API resources  # noqa: E501

        :return: The apis of this Swagger.  # noqa: E501
        :rtype: list[API]
        """
        return self._apis

    @apis.setter
    def apis(self, apis):
        """Sets the apis of this Swagger.

        The API resources  # noqa: E501

        :param apis: The apis of this Swagger.  # noqa: E501
        :type: list[API]
        """

        self._apis = apis

    @property
    def ref(self):
        """Gets the ref of this Swagger.  # noqa: E501

        A Reference to a definition on definitions object  # noqa: E501

        :return: The ref of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Swagger.

        A Reference to a definition on definitions object  # noqa: E501

        :param ref: The ref of this Swagger.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def default(self):
        """Gets the default of this Swagger.  # noqa: E501

        Default value for this schema if it is applicable  # noqa: E501

        :return: The default of this Swagger.  # noqa: E501
        :rtype: object
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Swagger.

        Default value for this schema if it is applicable  # noqa: E501

        :param default: The default of this Swagger.  # noqa: E501
        :type: object
        """

        self._default = default

    @property
    def type(self):
        """Gets the type of this Swagger.  # noqa: E501

        The resource type. Possible values: 'rest', 'wsdl'  # noqa: E501

        :return: The type of this Swagger.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Swagger.

        The resource type. Possible values: 'rest', 'wsdl'  # noqa: E501

        :param type: The type of this Swagger.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def enum(self):
        """Gets the enum of this Swagger.  # noqa: E501


        :return: The enum of this Swagger.  # noqa: E501
        :rtype: list[object]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this Swagger.


        :param enum: The enum of this Swagger.  # noqa: E501
        :type: list[object]
        """

        self._enum = enum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Swagger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Swagger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
