# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VirtualizedAPIMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'virtualized_api_id': 'str',
        'name': 'str',
        'api_id': 'str',
        'api_method_id': 'str',
        'summary': 'str',
        'description_type': 'str',
        'description_manual': 'str',
        'description_markdown': 'str',
        'description_url': 'str',
        'tags': 'dict(str, list[str])'
    }

    attribute_map = {
        'id': 'id',
        'virtualized_api_id': 'virtualizedApiId',
        'name': 'name',
        'api_id': 'apiId',
        'api_method_id': 'apiMethodId',
        'summary': 'summary',
        'description_type': 'descriptionType',
        'description_manual': 'descriptionManual',
        'description_markdown': 'descriptionMarkdown',
        'description_url': 'descriptionUrl',
        'tags': 'tags'
    }

    def __init__(self, id=None, virtualized_api_id=None, name=None, api_id=None, api_method_id=None, summary=None, description_type=None, description_manual=None, description_markdown=None, description_url=None, tags=None):  # noqa: E501
        """VirtualizedAPIMethod - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._virtualized_api_id = None
        self._name = None
        self._api_id = None
        self._api_method_id = None
        self._summary = None
        self._description_type = None
        self._description_manual = None
        self._description_markdown = None
        self._description_url = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if virtualized_api_id is not None:
            self.virtualized_api_id = virtualized_api_id
        if name is not None:
            self.name = name
        if api_id is not None:
            self.api_id = api_id
        if api_method_id is not None:
            self.api_method_id = api_method_id
        if summary is not None:
            self.summary = summary
        if description_type is not None:
            self.description_type = description_type
        if description_manual is not None:
            self.description_manual = description_manual
        if description_markdown is not None:
            self.description_markdown = description_markdown
        if description_url is not None:
            self.description_url = description_url
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this VirtualizedAPIMethod.  # noqa: E501

        Unique ID of the method.  # noqa: E501

        :return: The id of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualizedAPIMethod.

        Unique ID of the method.  # noqa: E501

        :param id: The id of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def virtualized_api_id(self):
        """Gets the virtualized_api_id of this VirtualizedAPIMethod.  # noqa: E501

        The identifier of the [VirtualizedAPI](VirtualizedAPI.html).  # noqa: E501

        :return: The virtualized_api_id of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._virtualized_api_id

    @virtualized_api_id.setter
    def virtualized_api_id(self, virtualized_api_id):
        """Sets the virtualized_api_id of this VirtualizedAPIMethod.

        The identifier of the [VirtualizedAPI](VirtualizedAPI.html).  # noqa: E501

        :param virtualized_api_id: The virtualized_api_id of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._virtualized_api_id = virtualized_api_id

    @property
    def name(self):
        """Gets the name of this VirtualizedAPIMethod.  # noqa: E501

        The virtualized method name.  This defaults to the original [APIDefinition](APIDefinition.html) method name.  # noqa: E501

        :return: The name of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualizedAPIMethod.

        The virtualized method name.  This defaults to the original [APIDefinition](APIDefinition.html) method name.  # noqa: E501

        :param name: The name of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def api_id(self):
        """Gets the api_id of this VirtualizedAPIMethod.  # noqa: E501

        The reference identifier for the original [APIDefinition](APIDefinition.html) that was virtualized.  # noqa: E501

        :return: The api_id of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this VirtualizedAPIMethod.

        The reference identifier for the original [APIDefinition](APIDefinition.html) that was virtualized.  # noqa: E501

        :param api_id: The api_id of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._api_id = api_id

    @property
    def api_method_id(self):
        """Gets the api_method_id of this VirtualizedAPIMethod.  # noqa: E501

        The reference identifier for the original API [APIDefinition](APIDefinition.html) method that was virtualized.  # noqa: E501

        :return: The api_method_id of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._api_method_id

    @api_method_id.setter
    def api_method_id(self, api_method_id):
        """Sets the api_method_id of this VirtualizedAPIMethod.

        The reference identifier for the original API [APIDefinition](APIDefinition.html) method that was virtualized.  # noqa: E501

        :param api_method_id: The api_method_id of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._api_method_id = api_method_id

    @property
    def summary(self):
        """Gets the summary of this VirtualizedAPIMethod.  # noqa: E501

        A summary of the API Method.  # noqa: E501

        :return: The summary of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this VirtualizedAPIMethod.

        A summary of the API Method.  # noqa: E501

        :param summary: The summary of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description_type(self):
        """Gets the description_type of this VirtualizedAPIMethod.  # noqa: E501

        The source for the method's description.  One of: *original*, *manual*, *markdown*, or *url*.  Defaults to *original*.  # noqa: E501

        :return: The description_type of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._description_type

    @description_type.setter
    def description_type(self, description_type):
        """Sets the description_type of this VirtualizedAPIMethod.

        The source for the method's description.  One of: *original*, *manual*, *markdown*, or *url*.  Defaults to *original*.  # noqa: E501

        :param description_type: The description_type of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._description_type = description_type

    @property
    def description_manual(self):
        """Gets the description_manual of this VirtualizedAPIMethod.  # noqa: E501

        Specifies a manual description, which can be markdown text.  # noqa: E501

        :return: The description_manual of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._description_manual

    @description_manual.setter
    def description_manual(self, description_manual):
        """Sets the description_manual of this VirtualizedAPIMethod.

        Specifies a manual description, which can be markdown text.  # noqa: E501

        :param description_manual: The description_manual of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._description_manual = description_manual

    @property
    def description_markdown(self):
        """Gets the description_markdown of this VirtualizedAPIMethod.  # noqa: E501

        specifies a markdown file to use for description.  # noqa: E501

        :return: The description_markdown of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._description_markdown

    @description_markdown.setter
    def description_markdown(self, description_markdown):
        """Sets the description_markdown of this VirtualizedAPIMethod.

        specifies a markdown file to use for description.  # noqa: E501

        :param description_markdown: The description_markdown of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._description_markdown = description_markdown

    @property
    def description_url(self):
        """Gets the description_url of this VirtualizedAPIMethod.  # noqa: E501

        Specifies a URL to use instead of description text.  # noqa: E501

        :return: The description_url of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: str
        """
        return self._description_url

    @description_url.setter
    def description_url(self, description_url):
        """Sets the description_url of this VirtualizedAPIMethod.

        Specifies a URL to use instead of description text.  # noqa: E501

        :param description_url: The description_url of this VirtualizedAPIMethod.  # noqa: E501
        :type: str
        """

        self._description_url = description_url

    @property
    def tags(self):
        """Gets the tags of this VirtualizedAPIMethod.  # noqa: E501

        The list of tags associated with this API method. Each tag can have multiple values.  # noqa: E501

        :return: The tags of this VirtualizedAPIMethod.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualizedAPIMethod.

        The list of tags associated with this API method. Each tag can have multiple values.  # noqa: E501

        :param tags: The tags of this VirtualizedAPIMethod.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualizedAPIMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualizedAPIMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
