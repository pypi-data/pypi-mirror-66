# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomPropertyPermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read': 'bool',
        'write': 'bool',
        'visible': 'bool'
    }

    attribute_map = {
        'read': 'read',
        'write': 'write',
        'visible': 'visible'
    }

    def __init__(self, read=False, write=False, visible=False):  # noqa: E501
        """CustomPropertyPermission - a model defined in Swagger"""  # noqa: E501

        self._read = None
        self._write = None
        self._visible = None
        self.discriminator = None

        if read is not None:
            self.read = read
        if write is not None:
            self.write = write
        if visible is not None:
            self.visible = visible

    @property
    def read(self):
        """Gets the read of this CustomPropertyPermission.  # noqa: E501

        Value specifying the read permission on a custom property for the associated role. Default value is true  # noqa: E501

        :return: The read of this CustomPropertyPermission.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this CustomPropertyPermission.

        Value specifying the read permission on a custom property for the associated role. Default value is true  # noqa: E501

        :param read: The read of this CustomPropertyPermission.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def write(self):
        """Gets the write of this CustomPropertyPermission.  # noqa: E501

        Value specifying the write permission on a custom property for the associated role. Default value is true  # noqa: E501

        :return: The write of this CustomPropertyPermission.  # noqa: E501
        :rtype: bool
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this CustomPropertyPermission.

        Value specifying the write permission on a custom property for the associated role. Default value is true  # noqa: E501

        :param write: The write of this CustomPropertyPermission.  # noqa: E501
        :type: bool
        """

        self._write = write

    @property
    def visible(self):
        """Gets the visible of this CustomPropertyPermission.  # noqa: E501

        Value specifying whether or not the custom property is visible in API Manager for the associated role. Default value is true  # noqa: E501

        :return: The visible of this CustomPropertyPermission.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this CustomPropertyPermission.

        Value specifying whether or not the custom property is visible in API Manager for the associated role. Default value is true  # noqa: E501

        :param visible: The visible of this CustomPropertyPermission.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomPropertyPermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomPropertyPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
