# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PermissionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'permission': 'str',
        'created_by': 'str',
        'created_on': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'permission': 'permission',
        'created_by': 'createdBy',
        'created_on': 'createdOn'
    }

    def __init__(self, id=None, user_id=None, permission=None, created_by=None, created_on=None):  # noqa: E501
        """PermissionDTO - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_id = None
        self._permission = None
        self._created_by = None
        self._created_on = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if permission is not None:
            self.permission = permission
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on

    @property
    def id(self):
        """Gets the id of this PermissionDTO.  # noqa: E501

        The permission identifier  # noqa: E501

        :return: The id of this PermissionDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PermissionDTO.

        The permission identifier  # noqa: E501

        :param id: The id of this PermissionDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this PermissionDTO.  # noqa: E501

        The user identifier  # noqa: E501

        :return: The user_id of this PermissionDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PermissionDTO.

        The user identifier  # noqa: E501

        :param user_id: The user_id of this PermissionDTO.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def permission(self):
        """Gets the permission of this PermissionDTO.  # noqa: E501

        The privilege  # noqa: E501

        :return: The permission of this PermissionDTO.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this PermissionDTO.

        The privilege  # noqa: E501

        :param permission: The permission of this PermissionDTO.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def created_by(self):
        """Gets the created_by of this PermissionDTO.  # noqa: E501

        The unique identifier for user that create the permission  # noqa: E501

        :return: The created_by of this PermissionDTO.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PermissionDTO.

        The unique identifier for user that create the permission  # noqa: E501

        :param created_by: The created_by of this PermissionDTO.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this PermissionDTO.  # noqa: E501

        Epoch/Unix time stamp when the permission was created  # noqa: E501

        :return: The created_on of this PermissionDTO.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this PermissionDTO.

        Epoch/Unix time stamp when the permission was created  # noqa: E501

        :param created_on: The created_on of this PermissionDTO.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
