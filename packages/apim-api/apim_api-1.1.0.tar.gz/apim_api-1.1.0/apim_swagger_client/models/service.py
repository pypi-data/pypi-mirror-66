# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'scheme': 'str',
        'host_id': 'str',
        'management_port': 'int',
        'tags': 'dict(str, str)',
        'enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'scheme': 'scheme',
        'host_id': 'hostID',
        'management_port': 'managementPort',
        'tags': 'tags',
        'enabled': 'enabled'
    }

    def __init__(self, id=None, name=None, type=None, scheme=None, host_id=None, management_port=None, tags=None, enabled=False):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._scheme = None
        self._host_id = None
        self._management_port = None
        self._tags = None
        self._enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if scheme is not None:
            self.scheme = scheme
        if host_id is not None:
            self.host_id = host_id
        if management_port is not None:
            self.management_port = management_port
        if tags is not None:
            self.tags = tags
        if enabled is not None:
            self.enabled = enabled

    @property
    def id(self):
        """Gets the id of this Service.  # noqa: E501


        :return: The id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.


        :param id: The id of this Service.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Service.  # noqa: E501


        :return: The name of this Service.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.


        :param name: The name of this Service.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Service.  # noqa: E501


        :return: The type of this Service.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Service.


        :param type: The type of this Service.  # noqa: E501
        :type: str
        """
        allowed_values = ["gateway", "nodemanager"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def scheme(self):
        """Gets the scheme of this Service.  # noqa: E501


        :return: The scheme of this Service.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this Service.


        :param scheme: The scheme of this Service.  # noqa: E501
        :type: str
        """

        self._scheme = scheme

    @property
    def host_id(self):
        """Gets the host_id of this Service.  # noqa: E501


        :return: The host_id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this Service.


        :param host_id: The host_id of this Service.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def management_port(self):
        """Gets the management_port of this Service.  # noqa: E501


        :return: The management_port of this Service.  # noqa: E501
        :rtype: int
        """
        return self._management_port

    @management_port.setter
    def management_port(self, management_port):
        """Sets the management_port of this Service.


        :param management_port: The management_port of this Service.  # noqa: E501
        :type: int
        """

        self._management_port = management_port

    @property
    def tags(self):
        """Gets the tags of this Service.  # noqa: E501


        :return: The tags of this Service.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Service.


        :param tags: The tags of this Service.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def enabled(self):
        """Gets the enabled of this Service.  # noqa: E501


        :return: The enabled of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Service.


        :param enabled: The enabled of this Service.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
