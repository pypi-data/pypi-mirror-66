# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExternalClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_id': 'str',
        'enabled': 'bool',
        'created_by': 'str',
        'created_on': 'int',
        'cors_origins': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'client_id': 'clientId',
        'enabled': 'enabled',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'cors_origins': 'corsOrigins'
    }

    def __init__(self, id=None, client_id=None, enabled=False, created_by=None, created_on=None, cors_origins=None):  # noqa: E501
        """ExternalClient - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._enabled = None
        self._created_by = None
        self._created_on = None
        self._cors_origins = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if enabled is not None:
            self.enabled = enabled
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if cors_origins is not None:
            self.cors_origins = cors_origins

    @property
    def id(self):
        """Gets the id of this ExternalClient.  # noqa: E501

        The ID of the external client  # noqa: E501

        :return: The id of this ExternalClient.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalClient.

        The ID of the external client  # noqa: E501

        :param id: The id of this ExternalClient.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this ExternalClient.  # noqa: E501

        The 3rd party client ID. This client ID is provided by a 3rd party OAuth service and is used to map an application to an external client. This value is unique, i.e. no other application can specify the same client ID.  # noqa: E501

        :return: The client_id of this ExternalClient.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ExternalClient.

        The 3rd party client ID. This client ID is provided by a 3rd party OAuth service and is used to map an application to an external client. This value is unique, i.e. no other application can specify the same client ID.  # noqa: E501

        :param client_id: The client_id of this ExternalClient.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def enabled(self):
        """Gets the enabled of this ExternalClient.  # noqa: E501

        Flag disables the external client so it can't be used in authentication  # noqa: E501

        :return: The enabled of this ExternalClient.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ExternalClient.

        Flag disables the external client so it can't be used in authentication  # noqa: E501

        :param enabled: The enabled of this ExternalClient.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def created_by(self):
        """Gets the created_by of this ExternalClient.  # noqa: E501

        The unique identifier of the user that created the mapping  # noqa: E501

        :return: The created_by of this ExternalClient.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ExternalClient.

        The unique identifier of the user that created the mapping  # noqa: E501

        :param created_by: The created_by of this ExternalClient.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this ExternalClient.  # noqa: E501

        Epoch/Unix time stamp when the mapping was created  # noqa: E501

        :return: The created_on of this ExternalClient.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ExternalClient.

        Epoch/Unix time stamp when the mapping was created  # noqa: E501

        :param created_on: The created_on of this ExternalClient.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def cors_origins(self):
        """Gets the cors_origins of this ExternalClient.  # noqa: E501

        The domains to allow access for browser-based clients  # noqa: E501

        :return: The cors_origins of this ExternalClient.  # noqa: E501
        :rtype: list[str]
        """
        return self._cors_origins

    @cors_origins.setter
    def cors_origins(self, cors_origins):
        """Sets the cors_origins of this ExternalClient.

        The domains to allow access for browser-based clients  # noqa: E501

        :param cors_origins: The cors_origins of this ExternalClient.  # noqa: E501
        :type: list[str]
        """

        self._cors_origins = cors_origins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalClient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
