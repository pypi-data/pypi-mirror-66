# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InboundProfiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'security_profile': 'str',
        'cors_profile': 'str',
        'monitor_api': 'bool',
        'monitor_subject': 'str'
    }

    attribute_map = {
        'security_profile': 'securityProfile',
        'cors_profile': 'corsProfile',
        'monitor_api': 'monitorAPI',
        'monitor_subject': 'monitorSubject'
    }

    def __init__(self, security_profile=None, cors_profile=None, monitor_api=False, monitor_subject=None):  # noqa: E501
        """InboundProfiles - a model defined in Swagger"""  # noqa: E501

        self._security_profile = None
        self._cors_profile = None
        self._monitor_api = None
        self._monitor_subject = None
        self.discriminator = None

        if security_profile is not None:
            self.security_profile = security_profile
        if cors_profile is not None:
            self.cors_profile = cors_profile
        if monitor_api is not None:
            self.monitor_api = monitor_api
        if monitor_subject is not None:
            self.monitor_subject = monitor_subject

    @property
    def security_profile(self):
        """Gets the security_profile of this InboundProfiles.  # noqa: E501

        The name of the Security Profile to be used for this Virtualized API.  # noqa: E501

        :return: The security_profile of this InboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._security_profile

    @security_profile.setter
    def security_profile(self, security_profile):
        """Sets the security_profile of this InboundProfiles.

        The name of the Security Profile to be used for this Virtualized API.  # noqa: E501

        :param security_profile: The security_profile of this InboundProfiles.  # noqa: E501
        :type: str
        """

        self._security_profile = security_profile

    @property
    def cors_profile(self):
        """Gets the cors_profile of this InboundProfiles.  # noqa: E501

        The name of the CORS Profile to be used for this Virtualized API.  # noqa: E501

        :return: The cors_profile of this InboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._cors_profile

    @cors_profile.setter
    def cors_profile(self, cors_profile):
        """Sets the cors_profile of this InboundProfiles.

        The name of the CORS Profile to be used for this Virtualized API.  # noqa: E501

        :param cors_profile: The cors_profile of this InboundProfiles.  # noqa: E501
        :type: str
        """

        self._cors_profile = cors_profile

    @property
    def monitor_api(self):
        """Gets the monitor_api of this InboundProfiles.  # noqa: E501

        Enables metrics monitoring for the API  # noqa: E501

        :return: The monitor_api of this InboundProfiles.  # noqa: E501
        :rtype: bool
        """
        return self._monitor_api

    @monitor_api.setter
    def monitor_api(self, monitor_api):
        """Sets the monitor_api of this InboundProfiles.

        Enables metrics monitoring for the API  # noqa: E501

        :param monitor_api: The monitor_api of this InboundProfiles.  # noqa: E501
        :type: bool
        """

        self._monitor_api = monitor_api

    @property
    def monitor_subject(self):
        """Gets the monitor_subject of this InboundProfiles.  # noqa: E501

        Identifies the client for metrics monitoring  # noqa: E501

        :return: The monitor_subject of this InboundProfiles.  # noqa: E501
        :rtype: str
        """
        return self._monitor_subject

    @monitor_subject.setter
    def monitor_subject(self, monitor_subject):
        """Sets the monitor_subject of this InboundProfiles.

        Identifies the client for metrics monitoring  # noqa: E501

        :param monitor_subject: The monitor_subject of this InboundProfiles.  # noqa: E501
        :type: str
        """

        self._monitor_subject = monitor_subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InboundProfiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboundProfiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
