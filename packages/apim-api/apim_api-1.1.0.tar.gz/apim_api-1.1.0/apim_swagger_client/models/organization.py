# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'email': 'str',
        'image': 'str',
        'restricted': 'bool',
        'virtual_host': 'str',
        'phone': 'str',
        'enabled': 'bool',
        'development': 'bool',
        'dn': 'str',
        'created_on': 'int',
        'start_trial_date': 'int',
        'end_trial_date': 'int',
        'trial_duration': 'int',
        'is_trial': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'email': 'email',
        'image': 'image',
        'restricted': 'restricted',
        'virtual_host': 'virtualHost',
        'phone': 'phone',
        'enabled': 'enabled',
        'development': 'development',
        'dn': 'dn',
        'created_on': 'createdOn',
        'start_trial_date': 'startTrialDate',
        'end_trial_date': 'endTrialDate',
        'trial_duration': 'trialDuration',
        'is_trial': 'isTrial'
    }

    def __init__(self, id=None, name=None, description=None, email=None, image=None, restricted=False, virtual_host=None, phone=None, enabled=False, development=False, dn=None, created_on=None, start_trial_date=None, end_trial_date=None, trial_duration=None, is_trial=False):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._email = None
        self._image = None
        self._restricted = None
        self._virtual_host = None
        self._phone = None
        self._enabled = None
        self._development = None
        self._dn = None
        self._created_on = None
        self._start_trial_date = None
        self._end_trial_date = None
        self._trial_duration = None
        self._is_trial = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if email is not None:
            self.email = email
        if image is not None:
            self.image = image
        if restricted is not None:
            self.restricted = restricted
        if virtual_host is not None:
            self.virtual_host = virtual_host
        if phone is not None:
            self.phone = phone
        if enabled is not None:
            self.enabled = enabled
        if development is not None:
            self.development = development
        if dn is not None:
            self.dn = dn
        if created_on is not None:
            self.created_on = created_on
        if start_trial_date is not None:
            self.start_trial_date = start_trial_date
        if end_trial_date is not None:
            self.end_trial_date = end_trial_date
        if trial_duration is not None:
            self.trial_duration = trial_duration
        if is_trial is not None:
            self.is_trial = is_trial

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501

        The unique identifier for the organization  # noqa: E501

        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.

        The unique identifier for the organization  # noqa: E501

        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501

        The name of the organization  # noqa: E501

        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        The name of the organization  # noqa: E501

        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Organization.  # noqa: E501

        The description of the organization  # noqa: E501

        :return: The description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.

        The description of the organization  # noqa: E501

        :param description: The description of this Organization.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this Organization.  # noqa: E501

        The contact email address associated with the organization  # noqa: E501

        :return: The email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Organization.

        The contact email address associated with the organization  # noqa: E501

        :param email: The email of this Organization.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def image(self):
        """Gets the image of this Organization.  # noqa: E501

        URI of the image to be used for this organization. To update the image, please refer to the API.  # noqa: E501

        :return: The image of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Organization.

        URI of the image to be used for this organization. To update the image, please refer to the API.  # noqa: E501

        :param image: The image of this Organization.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def restricted(self):
        """Gets the restricted of this Organization.  # noqa: E501

        Indicates that the organization is restricted.  Users in a restricted organization cannot see other users, and users cannot register for the organization using tokens.  Default is 'false'.  # noqa: E501

        :return: The restricted of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this Organization.

        Indicates that the organization is restricted.  Users in a restricted organization cannot see other users, and users cannot register for the organization using tokens.  Default is 'false'.  # noqa: E501

        :param restricted: The restricted of this Organization.  # noqa: E501
        :type: bool
        """

        self._restricted = restricted

    @property
    def virtual_host(self):
        """Gets the virtual_host of this Organization.  # noqa: E501

        The virtual host associated with the organization  # noqa: E501

        :return: The virtual_host of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._virtual_host

    @virtual_host.setter
    def virtual_host(self, virtual_host):
        """Sets the virtual_host of this Organization.

        The virtual host associated with the organization  # noqa: E501

        :param virtual_host: The virtual_host of this Organization.  # noqa: E501
        :type: str
        """

        self._virtual_host = virtual_host

    @property
    def phone(self):
        """Gets the phone of this Organization.  # noqa: E501

        Contact phone number of the organization  # noqa: E501

        :return: The phone of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Organization.

        Contact phone number of the organization  # noqa: E501

        :param phone: The phone of this Organization.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def enabled(self):
        """Gets the enabled of this Organization.  # noqa: E501

        Flag to indicate if this organization is enabled or not  # noqa: E501

        :return: The enabled of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Organization.

        Flag to indicate if this organization is enabled or not  # noqa: E501

        :param enabled: The enabled of this Organization.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def development(self):
        """Gets the development of this Organization.  # noqa: E501

        Flag to indicate if this organization is enabled or not for API development.  # noqa: E501

        :return: The development of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._development

    @development.setter
    def development(self, development):
        """Sets the development of this Organization.

        Flag to indicate if this organization is enabled or not for API development.  # noqa: E501

        :param development: The development of this Organization.  # noqa: E501
        :type: bool
        """

        self._development = development

    @property
    def dn(self):
        """Gets the dn of this Organization.  # noqa: E501


        :return: The dn of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this Organization.


        :param dn: The dn of this Organization.  # noqa: E501
        :type: str
        """

        self._dn = dn

    @property
    def created_on(self):
        """Gets the created_on of this Organization.  # noqa: E501

        Epoch/Unix time stamp when the organization was created  # noqa: E501

        :return: The created_on of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Organization.

        Epoch/Unix time stamp when the organization was created  # noqa: E501

        :param created_on: The created_on of this Organization.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def start_trial_date(self):
        """Gets the start_trial_date of this Organization.  # noqa: E501

        Epoch/Unix time stamp when the trial starts  # noqa: E501

        :return: The start_trial_date of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._start_trial_date

    @start_trial_date.setter
    def start_trial_date(self, start_trial_date):
        """Sets the start_trial_date of this Organization.

        Epoch/Unix time stamp when the trial starts  # noqa: E501

        :param start_trial_date: The start_trial_date of this Organization.  # noqa: E501
        :type: int
        """

        self._start_trial_date = start_trial_date

    @property
    def end_trial_date(self):
        """Gets the end_trial_date of this Organization.  # noqa: E501

        Epoch/Unix time stamp when the trial expires  # noqa: E501

        :return: The end_trial_date of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._end_trial_date

    @end_trial_date.setter
    def end_trial_date(self, end_trial_date):
        """Sets the end_trial_date of this Organization.

        Epoch/Unix time stamp when the trial expires  # noqa: E501

        :param end_trial_date: The end_trial_date of this Organization.  # noqa: E501
        :type: int
        """

        self._end_trial_date = end_trial_date

    @property
    def trial_duration(self):
        """Gets the trial_duration of this Organization.  # noqa: E501

        Length of the trial in days  # noqa: E501

        :return: The trial_duration of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._trial_duration

    @trial_duration.setter
    def trial_duration(self, trial_duration):
        """Sets the trial_duration of this Organization.

        Length of the trial in days  # noqa: E501

        :param trial_duration: The trial_duration of this Organization.  # noqa: E501
        :type: int
        """

        self._trial_duration = trial_duration

    @property
    def is_trial(self):
        """Gets the is_trial of this Organization.  # noqa: E501

        Indicates if this Org is a trial or not  # noqa: E501

        :return: The is_trial of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._is_trial

    @is_trial.setter
    def is_trial(self, is_trial):
        """Sets the is_trial of this Organization.

        Indicates if this Org is a trial or not  # noqa: E501

        :param is_trial: The is_trial of this Organization.  # noqa: E501
        :type: bool
        """

        self._is_trial = is_trial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
