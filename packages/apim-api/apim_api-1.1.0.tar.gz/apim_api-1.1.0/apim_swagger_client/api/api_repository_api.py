# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apim_swagger_client.api_client import ApiClient


class APIRepositoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apirepo_get(self, **kwargs):  # noqa: E501
        """Get the list of API  # noqa: E501

        Get the list of API from the API repository.  The list of API can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  id :    Matches the API by ID  name :    Matches the API by name  description :    Matches the API by description  version :    Matches the API by version  createdOn :      The date the backend API was created/imported on, time in ms, e.g.: 1372755998542  resourcePath :      Matches the API by resourcePath  basePath :      Matches the API by basePath  organization :      Matches the API by it's organization identifier  The __op__ is an operation and is one of:  eq :    Equal  ne :    Not equal  gt :     Greater than  lt :     Less than  ge :     Greater than or equal  le :     Less than or equal  like :    Like  gele :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filename:
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[APIDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def apirepo_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of API  # noqa: E501

        Get the list of API from the API repository.  The list of API can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  id :    Matches the API by ID  name :    Matches the API by name  description :    Matches the API by description  version :    Matches the API by version  createdOn :      The date the backend API was created/imported on, time in ms, e.g.: 1372755998542  resourcePath :      Matches the API by resourcePath  basePath :      Matches the API by basePath  organization :      Matches the API by it's organization identifier  The __op__ is an operation and is one of:  eq :    Equal  ne :    Not equal  gt :     Greater than  lt :     Less than  ge :     Greater than or equal  le :     Less than or equal  like :    Like  gele :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filename:
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[APIDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filename', 'field', 'op', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
            collection_formats['field'] = 'multi'  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
            collection_formats['op'] = 'multi'  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
            collection_formats['value'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_delete(self, id, **kwargs):  # noqa: E501
        """Deletes an API.  # noqa: E501

        Deletes a backend API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def apirepo_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes an API.  # noqa: E501

        Deletes a backend API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_download_get(self, id, filename, original, **kwargs):  # noqa: E501
        """Downloads an API by ID.  # noqa: E501

        Downloads an API by ID.  If __filename__ is not supplied, the API name will be used.  If the API was imported using [/import](#importApisFromFile) or [/import](#createApiFromUrl), then it is possible to download the original API definition by setting __original__ to __true__.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_download_get(id, filename, original, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str filename: Override the default filename for download (required)
        :param bool original: If true, and the API was imported, this will download the original definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_download_get_with_http_info(id, filename, original, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_download_get_with_http_info(id, filename, original, **kwargs)  # noqa: E501
            return data

    def apirepo_id_download_get_with_http_info(self, id, filename, original, **kwargs):  # noqa: E501
        """Downloads an API by ID.  # noqa: E501

        Downloads an API by ID.  If __filename__ is not supplied, the API name will be used.  If the API was imported using [/import](#importApisFromFile) or [/import](#createApiFromUrl), then it is possible to download the original API definition by setting __original__ to __true__.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_download_get_with_http_info(id, filename, original, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str filename: Override the default filename for download (required)
        :param bool original: If true, and the API was imported, this will download the original definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filename', 'original']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_download_get`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `apirepo_id_download_get`")  # noqa: E501
        # verify the required parameter 'original' is set
        if ('original' not in params or
                params['original'] is None):
            raise ValueError("Missing the required parameter `original` when calling `apirepo_id_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'original' in params:
            query_params.append(('original', params['original']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_get(self, id, **kwargs):  # noqa: E501
        """Get an API by ID  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def apirepo_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an API by ID  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_methods_get(self, id, **kwargs):  # noqa: E501
        """Queries the list of API methods  # noqa: E501

        Get the list of API methods from the API repository.  The list of methods can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  id :    Matches the API by ID  name :    Matches the API by name  The __op__ is an operation and is one of:  eq :    Equal  ne :    Not equal  gt :     Greater than  lt :     Less than  ge :     Greater than or equal  le :     Less than or equal  like :    Like  gele :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[Method]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_methods_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_methods_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def apirepo_id_methods_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Queries the list of API methods  # noqa: E501

        Get the list of API methods from the API repository.  The list of methods can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  id :    Matches the API by ID  name :    Matches the API by name  The __op__ is an operation and is one of:  eq :    Equal  ne :    Not equal  gt :     Greater than  lt :     Less than  ge :     Greater than or equal  le :     Less than or equal  like :    Like  gele :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[Method]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field', 'op', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_methods_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_methods_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
            collection_formats['field'] = 'multi'  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
            collection_formats['op'] = 'multi'  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
            collection_formats['value'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}/methods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Method]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_methods_method_id_delete(self, id, method_id, **kwargs):  # noqa: E501
        """Delete an API method  # noqa: E501

        Deletes a backend API method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_method_id_delete(id, method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier. (required)
        :param str method_id: The method identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_methods_method_id_delete_with_http_info(id, method_id, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_methods_method_id_delete_with_http_info(id, method_id, **kwargs)  # noqa: E501
            return data

    def apirepo_id_methods_method_id_delete_with_http_info(self, id, method_id, **kwargs):  # noqa: E501
        """Delete an API method  # noqa: E501

        Deletes a backend API method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_method_id_delete_with_http_info(id, method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier. (required)
        :param str method_id: The method identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'method_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_methods_method_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_methods_method_id_delete`")  # noqa: E501
        # verify the required parameter 'method_id' is set
        if ('method_id' not in params or
                params['method_id'] is None):
            raise ValueError("Missing the required parameter `method_id` when calling `apirepo_id_methods_method_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'method_id' in params:
            path_params['methodId'] = params['method_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}/methods/{methodId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_methods_method_id_get(self, id, method_id, **kwargs):  # noqa: E501
        """Get API method by ID.  # noqa: E501

        Retrieves a method for a given API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_method_id_get(id, method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier. (required)
        :param str method_id: The API method ID. (required)
        :return: Method
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_methods_method_id_get_with_http_info(id, method_id, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_methods_method_id_get_with_http_info(id, method_id, **kwargs)  # noqa: E501
            return data

    def apirepo_id_methods_method_id_get_with_http_info(self, id, method_id, **kwargs):  # noqa: E501
        """Get API method by ID.  # noqa: E501

        Retrieves a method for a given API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_method_id_get_with_http_info(id, method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier. (required)
        :param str method_id: The API method ID. (required)
        :return: Method
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'method_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_methods_method_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_methods_method_id_get`")  # noqa: E501
        # verify the required parameter 'method_id' is set
        if ('method_id' not in params or
                params['method_id'] is None):
            raise ValueError("Missing the required parameter `method_id` when calling `apirepo_id_methods_method_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'method_id' in params:
            path_params['methodId'] = params['method_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}/methods/{methodId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Method',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_methods_method_id_put(self, id, method_id, method, **kwargs):  # noqa: E501
        """Update an API method  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_method_id_put(id, method_id, method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifierentifier to create a method. (required)
        :param str method_id: The method identifier. (required)
        :param Method method: The method to update. (required)
        :return: Method
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_methods_method_id_put_with_http_info(id, method_id, method, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_methods_method_id_put_with_http_info(id, method_id, method, **kwargs)  # noqa: E501
            return data

    def apirepo_id_methods_method_id_put_with_http_info(self, id, method_id, method, **kwargs):  # noqa: E501
        """Update an API method  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_method_id_put_with_http_info(id, method_id, method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifierentifier to create a method. (required)
        :param str method_id: The method identifier. (required)
        :param Method method: The method to update. (required)
        :return: Method
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'method_id', 'method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_methods_method_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_methods_method_id_put`")  # noqa: E501
        # verify the required parameter 'method_id' is set
        if ('method_id' not in params or
                params['method_id'] is None):
            raise ValueError("Missing the required parameter `method_id` when calling `apirepo_id_methods_method_id_put`")  # noqa: E501
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `apirepo_id_methods_method_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'method_id' in params:
            path_params['methodId'] = params['method_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'method' in params:
            body_params = params['method']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}/methods/{methodId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Method',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_methods_post(self, id, method, **kwargs):  # noqa: E501
        """Create an API method  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_post(id, method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifierentifier to create a method. (required)
        :param Method method: The method to create. (required)
        :return: Method
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_methods_post_with_http_info(id, method, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_methods_post_with_http_info(id, method, **kwargs)  # noqa: E501
            return data

    def apirepo_id_methods_post_with_http_info(self, id, method, **kwargs):  # noqa: E501
        """Create an API method  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_methods_post_with_http_info(id, method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifierentifier to create a method. (required)
        :param Method method: The method to create. (required)
        :return: Method
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_methods_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_methods_post`")  # noqa: E501
        # verify the required parameter 'method' is set
        if ('method' not in params or
                params['method'] is None):
            raise ValueError("Missing the required parameter `method` when calling `apirepo_id_methods_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'method' in params:
            body_params = params['method']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}/methods', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Method',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_id_put(self, id, **kwargs):  # noqa: E501
        """Updates an API  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier. (required)
        :param APIDefinition body:
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def apirepo_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates an API  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier. (required)
        :param APIDefinition body:
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_import_from_external_post(self, organization_id, connector_id, name, description, api, **kwargs):  # noqa: E501
        """Create one or more backend APIs for an external service  # noqa: E501

        Create one or more backend APIs for an external service. External APIs are imported via a connector. If the connector configuration specifies that all external APIs should be merged into a single new backend API, the name and description parameters are applied to this new API. Alternatively, if the connector specifies that a separate backend API should be created for each external API, the name and description parameters are ignored, and the names and descriptions of the new backend APIs are taken from the external service definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_import_from_external_post(organization_id, connector_id, name, description, api, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: The API development organization that owns the new APIs (required)
        :param str connector_id: The API connector through which new APIs should be created (required)
        :param str name: The name of the merged API (see description) (required)
        :param str description: A description of the merged API (see description) (required)
        :param str api: List of external APIs to be imported (required)
        :return: list[APIDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_import_from_external_post_with_http_info(organization_id, connector_id, name, description, api, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_import_from_external_post_with_http_info(organization_id, connector_id, name, description, api, **kwargs)  # noqa: E501
            return data

    def apirepo_import_from_external_post_with_http_info(self, organization_id, connector_id, name, description, api, **kwargs):  # noqa: E501
        """Create one or more backend APIs for an external service  # noqa: E501

        Create one or more backend APIs for an external service. External APIs are imported via a connector. If the connector configuration specifies that all external APIs should be merged into a single new backend API, the name and description parameters are applied to this new API. Alternatively, if the connector specifies that a separate backend API should be created for each external API, the name and description parameters are ignored, and the names and descriptions of the new backend APIs are taken from the external service definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_import_from_external_post_with_http_info(organization_id, connector_id, name, description, api, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: The API development organization that owns the new APIs (required)
        :param str connector_id: The API connector through which new APIs should be created (required)
        :param str name: The name of the merged API (see description) (required)
        :param str description: A description of the merged API (see description) (required)
        :param str api: List of external APIs to be imported (required)
        :return: list[APIDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'connector_id', 'name', 'description', 'api']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_import_from_external_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `apirepo_import_from_external_post`")  # noqa: E501
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `apirepo_import_from_external_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `apirepo_import_from_external_post`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `apirepo_import_from_external_post`")  # noqa: E501
        # verify the required parameter 'api' is set
        if ('api' not in params or
                params['api'] is None):
            raise ValueError("Missing the required parameter `api` when calling `apirepo_import_from_external_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'organization_id' in params:
            form_params.append(('organizationId', params['organization_id']))  # noqa: E501
        if 'connector_id' in params:
            form_params.append(('connectorId', params['connector_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'api' in params:
            form_params.append(('api', params['api']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/importFromExternal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_import_from_gw_post(self, id, name, organization_id, **kwargs):  # noqa: E501
        """Create an API definition by importing a PolicyStudio-registered web service (REST or WSDL) hosted on the the API Gateway  # noqa: E501

        Imports an API definition from a Policy Studio REST or WSDL service hosted on the API Gateway. On import, a Swagger representation of the original API definition is retained, but the API is converted to an internal format for processing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_import_from_gw_post(id, name, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the PolicyStudio-registered service to import. (required)
        :param str name: The service name. (required)
        :param str organization_id: The API development organization ID that owns the import. (required)
        :param str instance:
        :param str host:
        :param str port:
        :param str username:
        :param str password:
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_import_from_gw_post_with_http_info(id, name, organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_import_from_gw_post_with_http_info(id, name, organization_id, **kwargs)  # noqa: E501
            return data

    def apirepo_import_from_gw_post_with_http_info(self, id, name, organization_id, **kwargs):  # noqa: E501
        """Create an API definition by importing a PolicyStudio-registered web service (REST or WSDL) hosted on the the API Gateway  # noqa: E501

        Imports an API definition from a Policy Studio REST or WSDL service hosted on the API Gateway. On import, a Swagger representation of the original API definition is retained, but the API is converted to an internal format for processing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_import_from_gw_post_with_http_info(id, name, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the PolicyStudio-registered service to import. (required)
        :param str name: The service name. (required)
        :param str organization_id: The API development organization ID that owns the import. (required)
        :param str instance:
        :param str host:
        :param str port:
        :param str username:
        :param str password:
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'organization_id', 'instance', 'host', 'port', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_import_from_gw_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `apirepo_import_from_gw_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `apirepo_import_from_gw_post`")  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `apirepo_import_from_gw_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'organization_id' in params:
            form_params.append(('organizationId', params['organization_id']))  # noqa: E501
        if 'instance' in params:
            form_params.append(('instance', params['instance']))  # noqa: E501
        if 'host' in params:
            form_params.append(('host', params['host']))  # noqa: E501
        if 'port' in params:
            form_params.append(('port', params['port']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/importFromGw', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_import_from_url_post(self, organization_id, type, url, **kwargs):  # noqa: E501
        """Create an API by loading a file from URL.  # noqa: E501

        Imports an API definition from a valid standard Swagger or WADL definition from the specified __url__.  It is possible to supply an optional __username__ and __password__ if the __url__ requires HTTP Basic authentication.  On import, the original API definition is retained, but the API is converted to an internal format for processing. The API name currently defaults to the filename but this will be deprecated in a future release. The name parameter should be used to name the API and will be required in a future release.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_import_from_url_post(organization_id, type, url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: The API development organization ID that owns the import. (required)
        :param str type: The type of import, one of: swagger, wadl, raml. (required)
        :param str url: The URL to import. (required)
        :param str name: The name of the API.
        :param str file_name: The file name of the import.
        :param str username: HTTP Basic username to use for connection.
        :param str password: HTTP Basic password to use for connection.
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_import_from_url_post_with_http_info(organization_id, type, url, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_import_from_url_post_with_http_info(organization_id, type, url, **kwargs)  # noqa: E501
            return data

    def apirepo_import_from_url_post_with_http_info(self, organization_id, type, url, **kwargs):  # noqa: E501
        """Create an API by loading a file from URL.  # noqa: E501

        Imports an API definition from a valid standard Swagger or WADL definition from the specified __url__.  It is possible to supply an optional __username__ and __password__ if the __url__ requires HTTP Basic authentication.  On import, the original API definition is retained, but the API is converted to an internal format for processing. The API name currently defaults to the filename but this will be deprecated in a future release. The name parameter should be used to name the API and will be required in a future release.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_import_from_url_post_with_http_info(organization_id, type, url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: The API development organization ID that owns the import. (required)
        :param str type: The type of import, one of: swagger, wadl, raml. (required)
        :param str url: The URL to import. (required)
        :param str name: The name of the API.
        :param str file_name: The file name of the import.
        :param str username: HTTP Basic username to use for connection.
        :param str password: HTTP Basic password to use for connection.
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'type', 'url', 'name', 'file_name', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_import_from_url_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `apirepo_import_from_url_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `apirepo_import_from_url_post`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `apirepo_import_from_url_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'organization_id' in params:
            form_params.append(('organizationId', params['organization_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'file_name' in params:
            form_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'url' in params:
            form_params.append(('url', params['url']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/importFromUrl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_import_post(self, organization_id, name, type, file, **kwargs):  # noqa: E501
        """Create an API by uploading a file  # noqa: E501

        Imports an API definition from a valid standard Swagger or WADL definition.  On import, the original API definition is retained, but the API is converted to an internal format for processing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_import_post(organization_id, name, type, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: The API development organization ID that owns the import. (required)
        :param str name: The API name. (required)
        :param str type: The type of import, one of: swagger, wadl, raml (required)
        :param file file: The API definition file to import (required)
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_import_post_with_http_info(organization_id, name, type, file, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_import_post_with_http_info(organization_id, name, type, file, **kwargs)  # noqa: E501
            return data

    def apirepo_import_post_with_http_info(self, organization_id, name, type, file, **kwargs):  # noqa: E501
        """Create an API by uploading a file  # noqa: E501

        Imports an API definition from a valid standard Swagger or WADL definition.  On import, the original API definition is retained, but the API is converted to an internal format for processing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_import_post_with_http_info(organization_id, name, type, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: The API development organization ID that owns the import. (required)
        :param str name: The API name. (required)
        :param str type: The type of import, one of: swagger, wadl, raml (required)
        :param file file: The API definition file to import (required)
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'name', 'type', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_import_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `apirepo_import_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `apirepo_import_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `apirepo_import_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `apirepo_import_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'organization_id' in params:
            form_params.append(('organizationId', params['organization_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apirepo_post(self, api, **kwargs):  # noqa: E501
        """Create an API definition  # noqa: E501

        When creating an API, the __name__ and __basePath__ are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_post(api, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param APIDefinition api: The API resource to create. (required)
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apirepo_post_with_http_info(api, **kwargs)  # noqa: E501
        else:
            (data) = self.apirepo_post_with_http_info(api, **kwargs)  # noqa: E501
            return data

    def apirepo_post_with_http_info(self, api, **kwargs):  # noqa: E501
        """Create an API definition  # noqa: E501

        When creating an API, the __name__ and __basePath__ are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apirepo_post_with_http_info(api, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param APIDefinition api: The API resource to create. (required)
        :return: APIDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apirepo_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api' is set
        if ('api' not in params or
                params['api'] is None):
            raise ValueError("Missing the required parameter `api` when calling `apirepo_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'api' in params:
            body_params = params['api']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/apirepo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
