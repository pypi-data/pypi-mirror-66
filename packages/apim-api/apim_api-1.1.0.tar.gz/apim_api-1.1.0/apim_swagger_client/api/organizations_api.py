# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apim_swagger_client.api_client import ApiClient


class OrganizationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def organizations_get(self, **kwargs):  # noqa: E501
        """List all organizations  # noqa: E501

        Get the list of organizations that are visible to the authenticated user.  Only API Administrators may list all organizations, all other users will see their organization.  The list of organizations can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  apiid : Matches the organization if the organization is using the API, specified by ID  description : The organization's description  email : The organization's contact email address  enabled :  The enabled state of the organization, one of: enabled, disabled  createdOn : The date the organization was created on, time in ms, e.g.: 1372755998542  name : The name of the organization  phone : The organization's contact phone  The __op__ is an operation and is one of:  eq : Equal  ne : Not equal  gt :  Greater than  lt :  Less than  ge :  Greater than or equal  le :  Less than or equal  like : Like  gele :  Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[Organization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organizations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def organizations_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all organizations  # noqa: E501

        Get the list of organizations that are visible to the authenticated user.  Only API Administrators may list all organizations, all other users will see their organization.  The list of organizations can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  apiid : Matches the organization if the organization is using the API, specified by ID  description : The organization's description  email : The organization's contact email address  enabled :  The enabled state of the organization, one of: enabled, disabled  createdOn : The date the organization was created on, time in ms, e.g.: 1372755998542  name : The name of the organization  phone : The organization's contact phone  The __op__ is an operation and is one of:  eq : Equal  ne : Not equal  gt :  Greater than  lt :  Less than  ge :  Greater than or equal  le :  Less than or equal  like : Like  gele :  Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[Organization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'op', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
            collection_formats['field'] = 'multi'  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
            collection_formats['op'] = 'multi'  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
            collection_formats['value'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Organization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_apis_api_access_id_delete(self, id, api_access_id, **kwargs):  # noqa: E501
        """Deletes access to an API for an organization  # noqa: E501

        Permanently deletes access to an API for an organization.  Deleting API access will also delete API access to any application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_apis_api_access_id_delete(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID. (required)
        :param str api_access_id: The API access ID. (required)
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_apis_api_access_id_delete_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_apis_api_access_id_delete_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
            return data

    def organizations_id_apis_api_access_id_delete_with_http_info(self, id, api_access_id, **kwargs):  # noqa: E501
        """Deletes access to an API for an organization  # noqa: E501

        Permanently deletes access to an API for an organization.  Deleting API access will also delete API access to any application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_apis_api_access_id_delete_with_http_info(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID. (required)
        :param str api_access_id: The API access ID. (required)
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_access_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_apis_api_access_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_apis_api_access_id_delete`")  # noqa: E501
        # verify the required parameter 'api_access_id' is set
        if ('api_access_id' not in params or
                params['api_access_id'] is None):
            raise ValueError("Missing the required parameter `api_access_id` when calling `organizations_id_apis_api_access_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'api_access_id' in params:
            path_params['apiAccessId'] = params['api_access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/apis/{apiAccessId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIAccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_apis_api_access_id_put(self, id, api_access_id, **kwargs):  # noqa: E501
        """Updates access to an API for an organization  # noqa: E501

        Updates access to an API for an organization.  Only __enabled__ may be modified, and disabling access will also disable access to all applications that may be using it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_apis_api_access_id_put(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID. (required)
        :param str api_access_id: The API access ID. (required)
        :param APIAccess body:
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_apis_api_access_id_put_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_apis_api_access_id_put_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
            return data

    def organizations_id_apis_api_access_id_put_with_http_info(self, id, api_access_id, **kwargs):  # noqa: E501
        """Updates access to an API for an organization  # noqa: E501

        Updates access to an API for an organization.  Only __enabled__ may be modified, and disabling access will also disable access to all applications that may be using it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_apis_api_access_id_put_with_http_info(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID. (required)
        :param str api_access_id: The API access ID. (required)
        :param APIAccess body:
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_access_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_apis_api_access_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_apis_api_access_id_put`")  # noqa: E501
        # verify the required parameter 'api_access_id' is set
        if ('api_access_id' not in params or
                params['api_access_id'] is None):
            raise ValueError("Missing the required parameter `api_access_id` when calling `organizations_id_apis_api_access_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'api_access_id' in params:
            path_params['apiAccessId'] = params['api_access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/apis/{apiAccessId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIAccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_apis_get(self, id, **kwargs):  # noqa: E501
        """Get the list of approved APIs for the organization  # noqa: E501

        Get the list of aproved APIs for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_apis_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID who's approved APIs are required. (required)
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_apis_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_apis_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_apis_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list of approved APIs for the organization  # noqa: E501

        Get the list of aproved APIs for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_apis_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID who's approved APIs are required. (required)
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_apis_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_apis_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/apis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIAccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_apis_post(self, id, **kwargs):  # noqa: E501
        """Grants access to an API for an organization.  # noqa: E501

        Grants access to an API for an organization.  Only the API Admin may call this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_apis_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID requesting access to an API. (required)
        :param APIAccess body:
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_apis_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_apis_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_apis_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Grants access to an API for an organization.  # noqa: E501

        Grants access to an API for an organization.  Only the API Admin may call this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_apis_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID requesting access to an API. (required)
        :param APIAccess body:
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_apis_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_apis_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/apis', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIAccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete an organization  # noqa: E501

        Deletes an organization. Deleting an organization will result in all users and associated applications being deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an organization  # noqa: E501

        Deletes an organization. Deleting an organization will result in all users and associated applications being deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_get(self, id, **kwargs):  # noqa: E501
        """Get an organization  # noqa: E501

        Retrieves the details of an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to be returned. (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an organization  # noqa: E501

        Retrieves the details of an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to be returned. (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_image_get(self, id, **kwargs):  # noqa: E501
        """Get the image for an organization  # noqa: E501

        Returns the jpeg image associated with an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID whos image is to be returned (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the image for an organization  # noqa: E501

        Returns the jpeg image associated with an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID whos image is to be returned (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_image_post(self, id, **kwargs):  # noqa: E501
        """Set the image for an organization  # noqa: E501

        Set the jpeg image to be associated with an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_image_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID whos image is to be set (required)
        :param file file:
        :param str type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_image_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_image_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_image_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set the image for an organization  # noqa: E501

        Set the jpeg image to be associated with an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_image_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID whos image is to be set (required)
        :param file file:
        :param str type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_image_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_image_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_put(self, id, **kwargs):  # noqa: E501
        """Update the details of an organization  # noqa: E501

        Updates an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to update. (required)
        :param Organization body:
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update the details of an organization  # noqa: E501

        Updates an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to update. (required)
        :param Organization body:
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_tokens_get(self, id, **kwargs):  # noqa: E501
        """Get registration codes for an organization  # noqa: E501

        Retrieves the registration codes for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID whos tokens are to be returned. (required)
        :return: list[RegistrationToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_tokens_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_tokens_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_tokens_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get registration codes for an organization  # noqa: E501

        Retrieves the registration codes for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID whos tokens are to be returned. (required)
        :return: list[RegistrationToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_tokens_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_tokens_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RegistrationToken]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_tokens_post(self, id, **kwargs):  # noqa: E501
        """Create a registration code  # noqa: E501

        Create a registration code for self service onboarding of users to the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to be associated with the registration code. (required)
        :param RegistrationToken body:
        :return: RegistrationToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_tokens_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_tokens_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organizations_id_tokens_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a registration code  # noqa: E501

        Create a registration code for self service onboarding of users to the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to be associated with the registration code. (required)
        :param RegistrationToken body:
        :return: RegistrationToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_tokens_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_tokens_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_tokens_token_delete(self, id, token, **kwargs):  # noqa: E501
        """Delete the registration code  # noqa: E501

        Delete the registration code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_token_delete(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID associated with the registration code. (required)
        :param str token: The registration code to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_tokens_token_delete_with_http_info(id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_tokens_token_delete_with_http_info(id, token, **kwargs)  # noqa: E501
            return data

    def organizations_id_tokens_token_delete_with_http_info(self, id, token, **kwargs):  # noqa: E501
        """Delete the registration code  # noqa: E501

        Delete the registration code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_token_delete_with_http_info(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID associated with the registration code. (required)
        :param str token: The registration code to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_tokens_token_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_tokens_token_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `organizations_id_tokens_token_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tokens/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_tokens_token_get(self, id, token, **kwargs):  # noqa: E501
        """Get registration code  # noqa: E501

        Retrieves the registration code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_token_get(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID associated with the registration code. (required)
        :param str token: The registration code to be returned. (required)
        :return: list[RegistrationToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_tokens_token_get_with_http_info(id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_tokens_token_get_with_http_info(id, token, **kwargs)  # noqa: E501
            return data

    def organizations_id_tokens_token_get_with_http_info(self, id, token, **kwargs):  # noqa: E501
        """Get registration code  # noqa: E501

        Retrieves the registration code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_token_get_with_http_info(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID associated with the registration code. (required)
        :param str token: The registration code to be returned. (required)
        :return: list[RegistrationToken]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_tokens_token_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_tokens_token_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `organizations_id_tokens_token_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tokens/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RegistrationToken]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_tokens_token_put(self, id, token, **kwargs):  # noqa: E501
        """Update a registration code  # noqa: E501

        Update a registration code for self service onboarding of users to the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_token_put(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to be associated with the registration code. (required)
        :param str token: (required)
        :param RegistrationToken body:
        :return: RegistrationToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_tokens_token_put_with_http_info(id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_tokens_token_put_with_http_info(id, token, **kwargs)  # noqa: E501
            return data

    def organizations_id_tokens_token_put_with_http_info(self, id, token, **kwargs):  # noqa: E501
        """Update a registration code  # noqa: E501

        Update a registration code for self service onboarding of users to the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_tokens_token_put_with_http_info(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The organization ID to be associated with the registration code. (required)
        :param str token: (required)
        :param RegistrationToken body:
        :return: RegistrationToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_tokens_token_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_tokens_token_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `organizations_id_tokens_token_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tokens/{token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_post(self, **kwargs):  # noqa: E501
        """Creates a new organization  # noqa: E501

        Creates a new organization.  Only API Administrators may create organizations. Data posted in this request may include custom properties defined in app.config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Organization body:
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organizations_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def organizations_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new organization  # noqa: E501

        Creates a new organization.  Only API Administrators may create organizations. Data posted in this request may include custom properties defined in app.config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Organization body:
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/organizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
