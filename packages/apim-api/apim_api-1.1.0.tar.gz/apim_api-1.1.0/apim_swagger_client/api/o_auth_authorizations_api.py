# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apim_swagger_client.api_client import ApiClient


class OAuthAuthorizationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def authorizations_authzid_delete(self, authzid, **kwargs):  # noqa: E501
        """Delete the OAuth Authorization for the given authorization id.  # noqa: E501

        Admin or Resource Owner task to delete the given authorization id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorizations_authzid_delete(authzid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authzid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authorizations_authzid_delete_with_http_info(authzid, **kwargs)  # noqa: E501
        else:
            (data) = self.authorizations_authzid_delete_with_http_info(authzid, **kwargs)  # noqa: E501
            return data

    def authorizations_authzid_delete_with_http_info(self, authzid, **kwargs):  # noqa: E501
        """Delete the OAuth Authorization for the given authorization id.  # noqa: E501

        Admin or Resource Owner task to delete the given authorization id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorizations_authzid_delete_with_http_info(authzid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authzid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authzid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authorizations_authzid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authzid' is set
        if ('authzid' not in params or
                params['authzid'] is None):
            raise ValueError("Missing the required parameter `authzid` when calling `authorizations_authzid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'authzid' in params:
            path_params['authzid'] = params['authzid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/authorizations/{authzid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def authorizations_get(self, **kwargs):  # noqa: E501
        """Retrieve all stored OAuth Authorizations for the logged in user.  # noqa: E501

        If user is a member of the admin group then all authorizations are returned. If not, then the logged in user's authorizations are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorizations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Authorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authorizations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.authorizations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def authorizations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all stored OAuth Authorizations for the logged in user.  # noqa: E501

        If user is a member of the admin group then all authorizations are returned. If not, then the logged in user's authorizations are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorizations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Authorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authorizations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/authorizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Authorization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def authorizations_owner_subjectid_application_appid_delete(self, subjectid, appid, **kwargs):  # noqa: E501
        """  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorizations_owner_subjectid_application_appid_delete(subjectid, appid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subjectid: (required)
        :param str appid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authorizations_owner_subjectid_application_appid_delete_with_http_info(subjectid, appid, **kwargs)  # noqa: E501
        else:
            (data) = self.authorizations_owner_subjectid_application_appid_delete_with_http_info(subjectid, appid, **kwargs)  # noqa: E501
            return data

    def authorizations_owner_subjectid_application_appid_delete_with_http_info(self, subjectid, appid, **kwargs):  # noqa: E501
        """  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorizations_owner_subjectid_application_appid_delete_with_http_info(subjectid, appid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subjectid: (required)
        :param str appid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subjectid', 'appid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authorizations_owner_subjectid_application_appid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subjectid' is set
        if ('subjectid' not in params or
                params['subjectid'] is None):
            raise ValueError("Missing the required parameter `subjectid` when calling `authorizations_owner_subjectid_application_appid_delete`")  # noqa: E501
        # verify the required parameter 'appid' is set
        if ('appid' not in params or
                params['appid'] is None):
            raise ValueError("Missing the required parameter `appid` when calling `authorizations_owner_subjectid_application_appid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subjectid' in params:
            path_params['subjectid'] = params['subjectid']  # noqa: E501
        if 'appid' in params:
            path_params['appid'] = params['appid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/authorizations/owner/{subjectid}/application/{appid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
