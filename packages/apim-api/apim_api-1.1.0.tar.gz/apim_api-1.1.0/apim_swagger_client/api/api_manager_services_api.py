# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apim_swagger_client.api_client import ApiClient


class APIManagerServicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def alerts_get(self, **kwargs):  # noqa: E501
        """Gets the alerts configured for the API Manager  # noqa: E501

        Gets the alerts configured for the API Manager that shows which alerts are enabled/disabled for the application.  Only the API Administrator may call this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alerts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AlertConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alerts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.alerts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def alerts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the alerts configured for the API Manager  # noqa: E501

        Gets the alerts configured for the API Manager that shows which alerts are enabled/disabled for the application.  Only the API Administrator may call this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alerts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AlertConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alerts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def alerts_post(self, **kwargs):  # noqa: E501
        """Updates the API Manager alerts configuration  # noqa: E501

        Updates the API Manager alerts configuration.  Only the API Administrator may call this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alerts_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertConfig body:
        :return: AlertConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.alerts_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.alerts_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def alerts_post_with_http_info(self, **kwargs):  # noqa: E501
        """Updates the API Manager alerts configuration  # noqa: E501

        Updates the API Manager alerts configuration.  Only the API Administrator may call this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.alerts_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AlertConfig body:
        :return: AlertConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alerts_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/alerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appinfo_get(self, **kwargs):  # noqa: E501
        """Gets API Manager feature information.  # noqa: E501

        Returns an API Manager configuration object describing the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appinfo_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Config
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appinfo_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.appinfo_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def appinfo_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets API Manager feature information.  # noqa: E501

        Returns an API Manager configuration object describing the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appinfo_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Config
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appinfo_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/appinfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Config',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def certinfo_post(self, **kwargs):  # noqa: E501
        """Extracts certificate information from the supplied data  # noqa: E501

        Extracts certificate information from the supplied data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certinfo_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username:
        :param file file:
        :param str passphrase:
        :param bool inbound:
        :param bool outbound:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.certinfo_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.certinfo_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def certinfo_post_with_http_info(self, **kwargs):  # noqa: E501
        """Extracts certificate information from the supplied data  # noqa: E501

        Extracts certificate information from the supplied data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certinfo_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username:
        :param file file:
        :param str passphrase:
        :param bool inbound:
        :param bool outbound:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'file', 'passphrase', 'inbound', 'outbound']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certinfo_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'passphrase' in params:
            form_params.append(('passphrase', params['passphrase']))  # noqa: E501
        if 'inbound' in params:
            form_params.append(('inbound', params['inbound']))  # noqa: E501
        if 'outbound' in params:
            form_params.append(('outbound', params['outbound']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/certinfo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_customproperties_get(self, **kwargs):  # noqa: E501
        """Gets API Manager custom property metadata  # noqa: E501

        Returns an API Manager configuration object containing the metadata for the custom properties defined in the API Manager app.config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_customproperties_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CustomPropertiesConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_customproperties_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.config_customproperties_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def config_customproperties_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets API Manager custom property metadata  # noqa: E501

        Returns an API Manager configuration object containing the metadata for the custom properties defined in the API Manager app.config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_customproperties_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CustomPropertiesConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_customproperties_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/config/customproperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomPropertiesConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get(self, **kwargs):  # noqa: E501
        """Gets API Manager configuration  # noqa: E501

        Returns an API Manager configuration object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Config
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.config_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def config_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets API Manager configuration  # noqa: E501

        Returns an API Manager configuration object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Config
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Config',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_put(self, **kwargs):  # noqa: E501
        """Updates the API Manager configuration  # noqa: E501

        Updates the API Manager configuration.  Only the API Administrator may call this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Config body:
        :return: Config
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.config_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def config_put_with_http_info(self, **kwargs):  # noqa: E501
        """Updates the API Manager configuration  # noqa: E501

        Updates the API Manager configuration.  Only the API Administrator may call this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Config body:
        :return: Config
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Config',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_connector_id_get(self, connector_id, **kwargs):  # noqa: E501
        """Return a list of APIs for the specified connector  # noqa: E501

        Return a list of APIs for the specified connector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_connector_id_get(connector_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_id: ID of the connector for which APIs should be returned. Connector IDs can be retrieved by calling /connectors. (required)
        :return: list[dict(str, object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connectors_connector_id_get_with_http_info(connector_id, **kwargs)  # noqa: E501
        else:
            (data) = self.connectors_connector_id_get_with_http_info(connector_id, **kwargs)  # noqa: E501
            return data

    def connectors_connector_id_get_with_http_info(self, connector_id, **kwargs):  # noqa: E501
        """Return a list of APIs for the specified connector  # noqa: E501

        Return a list of APIs for the specified connector.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_connector_id_get_with_http_info(connector_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_id: ID of the connector for which APIs should be returned. Connector IDs can be retrieved by calling /connectors. (required)
        :return: list[dict(str, object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_connector_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `connectors_connector_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_id' in params:
            path_params['connectorId'] = params['connector_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{connectorId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[dict(str, object)]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_connector_id_login_post(self, connector_id, username, password, **kwargs):  # noqa: E501
        """Login to an external service from which APIs will be imported  # noqa: E501

        Login to an external service from which APIs will be imported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_connector_id_login_post(connector_id, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_id: ID of the API connector. Connector IDs can be retrieved by calling /connectors. (required)
        :param str username: External service username (required)
        :param str password: External service password (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connectors_connector_id_login_post_with_http_info(connector_id, username, password, **kwargs)  # noqa: E501
        else:
            (data) = self.connectors_connector_id_login_post_with_http_info(connector_id, username, password, **kwargs)  # noqa: E501
            return data

    def connectors_connector_id_login_post_with_http_info(self, connector_id, username, password, **kwargs):  # noqa: E501
        """Login to an external service from which APIs will be imported  # noqa: E501

        Login to an external service from which APIs will be imported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_connector_id_login_post_with_http_info(connector_id, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connector_id: ID of the API connector. Connector IDs can be retrieved by calling /connectors. (required)
        :param str username: External service username (required)
        :param str password: External service password (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connector_id', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_connector_id_login_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params or
                params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `connectors_connector_id_login_post`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `connectors_connector_id_login_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `connectors_connector_id_login_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'connector_id' in params:
            path_params['connectorId'] = params['connector_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/connectors/{connectorId}/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connectors_get(self, **kwargs):  # noqa: E501
        """Return a list of API connectors  # noqa: E501

        Return a list of API connectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[dict(str, object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connectors_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.connectors_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def connectors_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return a list of API connectors  # noqa: E501

        Return a list of API connectors.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connectors_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[dict(str, object)]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connectors_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/connectors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[dict(str, object)]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filedata_post(self, **kwargs):  # noqa: E501
        """Returns the DataURI representation of the uploaded file  # noqa: E501

        Returns the DataURI representation of the uploaded file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filedata_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filedata_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.filedata_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def filedata_post_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the DataURI representation of the uploaded file  # noqa: E501

        Returns the DataURI representation of the uploaded file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filedata_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filedata_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/filedata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def license_get(self, **kwargs):  # noqa: E501
        """Checks that the API Manager has a valid license  # noqa: E501

        Returns an API Manager license configuration object.  Does not require authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.license_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.license_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.license_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def license_get_with_http_info(self, **kwargs):  # noqa: E501
        """Checks that the API Manager has a valid license  # noqa: E501

        Returns an API Manager license configuration object.  Does not require authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.license_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method license_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/license', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listeners_get(self, **kwargs):  # noqa: E501
        """Gets the API Manager listeners  # noqa: E501

        Returns a list of API Manager listeners.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listeners_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PortalTrafficListener]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listeners_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.listeners_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def listeners_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the API Manager listeners  # noqa: E501

        Returns a list of API Manager listeners.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listeners_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PortalTrafficListener]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listeners_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/listeners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortalTrafficListener]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oauthclientprofiles_get(self, **kwargs):  # noqa: E501
        """Get a list of OAuth profiles for use in backend API authorisation  # noqa: E501

        Return a list of OAuth Client Profiles for use in authorising API access to backend APIs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauthclientprofiles_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ReferencedEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oauthclientprofiles_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.oauthclientprofiles_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def oauthclientprofiles_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of OAuth profiles for use in backend API authorisation  # noqa: E501

        Return a list of OAuth Client Profiles for use in authorising API access to backend APIs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauthclientprofiles_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ReferencedEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oauthclientprofiles_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/oauthclientprofiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReferencedEntity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def policies_get(self, type, **kwargs):  # noqa: E501
        """Gets a list of the specified policies  # noqa: E501

        Returns the list of policies (of the specified type) that are available to Portal-registered APIs.  __type__ is one of: faulthandler, globalrequest, globalresponse, request, routing, response, promotion, authentication or token-info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.policies_get(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The type of policy to return. Possible values are: 'faulthandler', 'globalrequest', 'globalresponse', 'request', 'routing', 'response', 'authentication', 'oauthtokeninfo', 'promotion' (required)
        :return: list[ReferencedEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.policies_get_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.policies_get_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def policies_get_with_http_info(self, type, **kwargs):  # noqa: E501
        """Gets a list of the specified policies  # noqa: E501

        Returns the list of policies (of the specified type) that are available to Portal-registered APIs.  __type__ is one of: faulthandler, globalrequest, globalresponse, request, routing, response, promotion, authentication or token-info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.policies_get_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The type of policy to return. Possible values are: 'faulthandler', 'globalrequest', 'globalresponse', 'request', 'routing', 'response', 'authentication', 'oauthtokeninfo', 'promotion' (required)
        :return: list[ReferencedEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `policies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReferencedEntity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remotehosts_get(self, **kwargs):  # noqa: E501
        """Returns a list of remote hosts  # noqa: E501

        Returns a list of API Manager-registered remote hosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remotehosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[RemoteHost]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remotehosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remotehosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def remotehosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of remote hosts  # noqa: E501

        Returns a list of API Manager-registered remote hosts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remotehosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[RemoteHost]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remotehosts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/remotehosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RemoteHost]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remotehosts_id_delete(self, id, **kwargs):  # noqa: E501
        """Deletes a remote host.  # noqa: E501

        Deletes an API Manager-registered remote host. Dynamically removes the remote host from the API Gateway runtime.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remotehosts_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The remote host identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remotehosts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remotehosts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remotehosts_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes a remote host.  # noqa: E501

        Deletes an API Manager-registered remote host. Dynamically removes the remote host from the API Gateway runtime.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remotehosts_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The remote host identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remotehosts_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remotehosts_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/remotehosts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remotehosts_id_put(self, id, **kwargs):  # noqa: E501
        """Updates a remote host  # noqa: E501

        Updates an API Manager-registered remote host. Dynamically updates the API Gateway runtime so that the new remote host settings are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remotehosts_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The remote host identifier. (required)
        :param RemoteHost body:
        :return: RemoteHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remotehosts_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remotehosts_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remotehosts_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates a remote host  # noqa: E501

        Updates an API Manager-registered remote host. Dynamically updates the API Gateway runtime so that the new remote host settings are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remotehosts_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The remote host identifier. (required)
        :param RemoteHost body:
        :return: RemoteHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remotehosts_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remotehosts_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/remotehosts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remotehosts_post(self, **kwargs):  # noqa: E501
        """Creates a new remote host  # noqa: E501

        Creates a new API Manager-regsitered remote host. Dynamically updates the API Gateway runtime so that the remote host is available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remotehosts_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteHost body:
        :return: RemoteHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remotehosts_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remotehosts_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def remotehosts_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new remote host  # noqa: E501

        Creates a new API Manager-regsitered remote host. Dynamically updates the API Gateway runtime so that the remote host is available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remotehosts_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteHost body:
        :return: RemoteHost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remotehosts_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/remotehosts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_discovery_instance_type_post(self, instance, type, **kwargs):  # noqa: E501
        """Returns a list of services hosted on the specified Gateway instance  # noqa: E501

        Returns a list of services hosted on the specified Gateway instance.  __type__ is one of: rest, wsdl.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_discovery_instance_type_post(instance, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance: (required)
        :param str type: The type of service to return. Possible values are: 'rest', 'wsdl' (required)
        :param str host:
        :param str port:
        :param str username:
        :param str password:
        :return: list[Swagger]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_discovery_instance_type_post_with_http_info(instance, type, **kwargs)  # noqa: E501
        else:
            (data) = self.service_discovery_instance_type_post_with_http_info(instance, type, **kwargs)  # noqa: E501
            return data

    def service_discovery_instance_type_post_with_http_info(self, instance, type, **kwargs):  # noqa: E501
        """Returns a list of services hosted on the specified Gateway instance  # noqa: E501

        Returns a list of services hosted on the specified Gateway instance.  __type__ is one of: rest, wsdl.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_discovery_instance_type_post_with_http_info(instance, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance: (required)
        :param str type: The type of service to return. Possible values are: 'rest', 'wsdl' (required)
        :param str host:
        :param str port:
        :param str username:
        :param str password:
        :return: list[Swagger]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'type', 'host', 'port', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_discovery_instance_type_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params or
                params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `service_discovery_instance_type_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `service_discovery_instance_type_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'host' in params:
            form_params.append(('host', params['host']))  # noqa: E501
        if 'port' in params:
            form_params.append(('port', params['port']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/service-discovery/{instance}/{type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Swagger]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sysconfig_get(self, **kwargs):  # noqa: E501
        """Gets API Manager system configuration  # noqa: E501

        Returns an API Manager system configuration object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sysconfig_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SystemConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sysconfig_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sysconfig_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sysconfig_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets API Manager system configuration  # noqa: E501

        Returns an API Manager system configuration object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sysconfig_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SystemConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sysconfig_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/sysconfig', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sysconfig_put(self, **kwargs):  # noqa: E501
        """Update API Manager system configuration  # noqa: E501

        Returns an API Manager system configuration object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sysconfig_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SystemConfig body:
        :return: SystemConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sysconfig_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sysconfig_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def sysconfig_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update API Manager system configuration  # noqa: E501

        Returns an API Manager system configuration object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sysconfig_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SystemConfig body:
        :return: SystemConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sysconfig_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/sysconfig', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def title_get(self, **kwargs):  # noqa: E501
        """Gets the API Manager's title  # noqa: E501

        Returns the API Manager title.  Does not require authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.title_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.title_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.title_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def title_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the API Manager's title  # noqa: E501

        Returns the API Manager title.  Does not require authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.title_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method title_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/title', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokenstores_get(self, **kwargs):  # noqa: E501
        """Gets a list of Token Stores  # noqa: E501

        Returns a list of Token Stores to be used by OAuth Security Devices for inbound security on portal-registered APIs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokenstores_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ReferencedEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokenstores_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokenstores_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokenstores_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of Token Stores  # noqa: E501

        Returns a list of Token Stores to be used by OAuth Security Devices for inbound security on portal-registered APIs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokenstores_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ReferencedEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokenstores_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/tokenstores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReferencedEntity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def topology_post(self, host, port, username, password, **kwargs):  # noqa: E501
        """Retrieves the Topology from the specified Admin Node Manager  # noqa: E501

        Retrieves the Topology from the specified Admin Node Manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.topology_post(host, port, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: The host on which the Admin Node Manager is running (required)
        :param str port: The Admin Node Manager management port. (required)
        :param str username: Username to use for Admin Node Manager authentication . (required)
        :param str password: Password to use for Admin Node Manager authentication. (required)
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.topology_post_with_http_info(host, port, username, password, **kwargs)  # noqa: E501
        else:
            (data) = self.topology_post_with_http_info(host, port, username, password, **kwargs)  # noqa: E501
            return data

    def topology_post_with_http_info(self, host, port, username, password, **kwargs):  # noqa: E501
        """Retrieves the Topology from the specified Admin Node Manager  # noqa: E501

        Retrieves the Topology from the specified Admin Node Manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.topology_post_with_http_info(host, port, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: The host on which the Admin Node Manager is running (required)
        :param str port: The Admin Node Manager management port. (required)
        :param str username: Username to use for Admin Node Manager authentication . (required)
        :param str password: Password to use for Admin Node Manager authentication. (required)
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host', 'port', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method topology_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `topology_post`")  # noqa: E501
        # verify the required parameter 'port' is set
        if ('port' not in params or
                params['port'] is None):
            raise ValueError("Missing the required parameter `port` when calling `topology_post`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `topology_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `topology_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'host' in params:
            form_params.append(('host', params['host']))  # noqa: E501
        if 'port' in params:
            form_params.append(('port', params['port']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/topology', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topology',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
