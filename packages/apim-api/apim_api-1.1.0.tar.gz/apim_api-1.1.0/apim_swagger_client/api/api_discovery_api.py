# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apim_swagger_client.api_client import ApiClient


class APIDiscoveryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def discovery_apis_get(self, **kwargs):  # noqa: E501
        """Lists all APIs/services virtualised in the API Server.  # noqa: E501

        Lists all APIs/services virtualised in the API Server. API Administrators see all APIs/services. Users see APIs/services for their organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_apis_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[DiscoveryAPI]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_apis_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.discovery_apis_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def discovery_apis_get_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all APIs/services virtualised in the API Server.  # noqa: E501

        Lists all APIs/services virtualised in the API Server. API Administrators see all APIs/services. Users see APIs/services for their organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_apis_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[DiscoveryAPI]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_apis_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/apis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DiscoveryAPI]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_oauthresources_get(self, **kwargs):  # noqa: E501
        """Gets a list OAuth protected resources and their associated scopes.  # noqa: E501

        Gets a list OAuth protected resources and their associated scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_oauthresources_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_oauthresources_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.discovery_oauthresources_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def discovery_oauthresources_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list OAuth protected resources and their associated scopes.  # noqa: E501

        Gets a list OAuth protected resources and their associated scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_oauthresources_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_oauthresources_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/oauthresources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_scopes_get(self, **kwargs):  # noqa: E501
        """Retrieves every resource on the API Server that is protected by OAuth, and the scopes that cover those resources  # noqa: E501

        Retrieves every resource on the API Server that is protected by OAuth, and the scopes that cover those resources. Only API Administrators will be able to retrieve information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_scopes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[OAuthProtectedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_scopes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.discovery_scopes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def discovery_scopes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves every resource on the API Server that is protected by OAuth, and the scopes that cover those resources  # noqa: E501

        Retrieves every resource on the API Server that is protected by OAuth, and the scopes that cover those resources. Only API Administrators will be able to retrieve information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_scopes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[OAuthProtectedResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_scopes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/scopes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OAuthProtectedResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_sdk_id_platform_get(self, id, platform, **kwargs):  # noqa: E501
        """Generates an SDK package for the specified API based on the type of the client requested  # noqa: E501

        Generates a client SDK package for the specified API based on the platform. Supported platform are Android, iOS-swift, NodeJS, Titanium  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_sdk_id_platform_get(id, platform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The name of the API to generate the client SDK package for (required)
        :param str platform: Generated client type, one of: android, iOS-swift, nodejS, titanium (required)
        :param str packagename: Java package name generated only for Android platform. It must be a valid java package name.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_sdk_id_platform_get_with_http_info(id, platform, **kwargs)  # noqa: E501
        else:
            (data) = self.discovery_sdk_id_platform_get_with_http_info(id, platform, **kwargs)  # noqa: E501
            return data

    def discovery_sdk_id_platform_get_with_http_info(self, id, platform, **kwargs):  # noqa: E501
        """Generates an SDK package for the specified API based on the type of the client requested  # noqa: E501

        Generates a client SDK package for the specified API based on the platform. Supported platform are Android, iOS-swift, NodeJS, Titanium  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_sdk_id_platform_get_with_http_info(id, platform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The name of the API to generate the client SDK package for (required)
        :param str platform: Generated client type, one of: android, iOS-swift, nodejS, titanium (required)
        :param str packagename: Java package name generated only for Android platform. It must be a valid java package name.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'platform', 'packagename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_sdk_id_platform_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `discovery_sdk_id_platform_get`")  # noqa: E501
        # verify the required parameter 'platform' is set
        if ('platform' not in params or
                params['platform'] is None):
            raise ValueError("Missing the required parameter `platform` when calling `discovery_sdk_id_platform_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'platform' in params:
            path_params['platform'] = params['platform']  # noqa: E501

        query_params = []
        if 'packagename' in params:
            query_params.append(('packagename', params['packagename']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/sdk/{id}/{platform}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_swagger_api_id_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieves an extended Swagger feed for the specified API.  # noqa: E501

        Retrieves an extended Swagger feed for the specified API. API Administrators will always see the API. Users will only see the API if it is available for their organization.If __filename__ is supplied, the download will use it as the `Content-Disposition` filename attachment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_api_id_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The unique ID of the API to return (required)
        :param str filename: Override the default filename for download
        :param str swagger_version: The Swagger version of the feed, either 1.1 (default) or 2.0.
        :param bool extensions: If true, extensions such as the x-axway object are returned in the Swagger definitions (default=true)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_swagger_api_id_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.discovery_swagger_api_id_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def discovery_swagger_api_id_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves an extended Swagger feed for the specified API.  # noqa: E501

        Retrieves an extended Swagger feed for the specified API. API Administrators will always see the API. Users will only see the API if it is available for their organization.If __filename__ is supplied, the download will use it as the `Content-Disposition` filename attachment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_api_id_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The unique ID of the API to return (required)
        :param str filename: Override the default filename for download
        :param str swagger_version: The Swagger version of the feed, either 1.1 (default) or 2.0.
        :param bool extensions: If true, extensions such as the x-axway object are returned in the Swagger definitions (default=true)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filename', 'swagger_version', 'extensions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_swagger_api_id_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `discovery_swagger_api_id_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'swagger_version' in params:
            query_params.append(('swaggerVersion', params['swagger_version']))  # noqa: E501
        if 'extensions' in params:
            query_params.append(('extensions', params['extensions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/swagger/api/id/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_swagger_api_name_get(self, name, **kwargs):  # noqa: E501
        """Retrieves an extended Swagger feed for the specified API.  # noqa: E501

        Retrieves an extended Swagger feed for the specified API. API Administrators will always see the API. Users will only see the API if it is available for their organization.If __filename__ is supplied, the download will use it as the `Content-Disposition` filename attachment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_api_name_get(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the API to return (required)
        :param str filename: Override the default filename for download
        :param str api_version: The version of the API. Should always be provided if there is more than one version
        :param str swagger_version: The Swagger version of the feed, either 1.1 (default) or 2.0.
        :param bool extensions: If true, extensions such as the x-axway object are returned in the Swagger definitions (default=true)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_swagger_api_name_get_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.discovery_swagger_api_name_get_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def discovery_swagger_api_name_get_with_http_info(self, name, **kwargs):  # noqa: E501
        """Retrieves an extended Swagger feed for the specified API.  # noqa: E501

        Retrieves an extended Swagger feed for the specified API. API Administrators will always see the API. Users will only see the API if it is available for their organization.If __filename__ is supplied, the download will use it as the `Content-Disposition` filename attachment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_api_name_get_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the API to return (required)
        :param str filename: Override the default filename for download
        :param str api_version: The version of the API. Should always be provided if there is more than one version
        :param str swagger_version: The Swagger version of the feed, either 1.1 (default) or 2.0.
        :param bool extensions: If true, extensions such as the x-axway object are returned in the Swagger definitions (default=true)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'filename', 'api_version', 'swagger_version', 'extensions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_swagger_api_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `discovery_swagger_api_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501
        if 'swagger_version' in params:
            query_params.append(('swaggerVersion', params['swagger_version']))  # noqa: E501
        if 'extensions' in params:
            query_params.append(('extensions', params['extensions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/swagger/api/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_swagger_apis_get(self, **kwargs):  # noqa: E501
        """Convenience method for retrieving all Swagger feeds for all virtualised services.  # noqa: E501

        Convenience method for retrieving all Swagger feeds for all virtualised services that are visible to the authenticated user.  The list of APIs can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  id :        Matches the API by the specified ID  name :        Matches the API by the specified name  description :        Matches the API by the specified description  summary :        Matches the API by the specified summary  version :        Matches the API by the specified version  type :        Matches the API by the specified type. Type can be 'rest' or 'wsdl'  resourcepath :        Matches the API by the specified inbound path  taggroup :        Matches the API by the specified tag group  tag :        Matches the API by the specified tag value  methodtaggroup :        Matches the API by the specified method tag group, i.e. if the API contains a method that contains a tag group matching that specified  methodtag :        Matches the API by the specified method tag value, i.e. if the API contains a method that contains a tag value matching that specified  The __op__ is an operation and is one of:  eq :    Equal  ne :    Not equal  gt :     Greater than  lt :     Less than  ge :     Greater than or equal  le :     Less than or equal  like :    Like  gele :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_apis_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The Swagger API version
        :param str swagger_version: The Swagger version
        :param bool extensions: If true, extensions such as the x-axway object are returned in the Swagger definitions (default=true)
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_swagger_apis_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.discovery_swagger_apis_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def discovery_swagger_apis_get_with_http_info(self, **kwargs):  # noqa: E501
        """Convenience method for retrieving all Swagger feeds for all virtualised services.  # noqa: E501

        Convenience method for retrieving all Swagger feeds for all virtualised services that are visible to the authenticated user.  The list of APIs can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  id :        Matches the API by the specified ID  name :        Matches the API by the specified name  description :        Matches the API by the specified description  summary :        Matches the API by the specified summary  version :        Matches the API by the specified version  type :        Matches the API by the specified type. Type can be 'rest' or 'wsdl'  resourcepath :        Matches the API by the specified inbound path  taggroup :        Matches the API by the specified tag group  tag :        Matches the API by the specified tag value  methodtaggroup :        Matches the API by the specified method tag group, i.e. if the API contains a method that contains a tag group matching that specified  methodtag :        Matches the API by the specified method tag value, i.e. if the API contains a method that contains a tag value matching that specified  The __op__ is an operation and is one of:  eq :    Equal  ne :    Not equal  gt :     Greater than  lt :     Less than  ge :     Greater than or equal  le :     Less than or equal  like :    Like  gele :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_apis_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The Swagger API version
        :param str swagger_version: The Swagger version
        :param bool extensions: If true, extensions such as the x-axway object are returned in the Swagger definitions (default=true)
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version', 'swagger_version', 'extensions', 'field', 'op', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_swagger_apis_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501
        if 'swagger_version' in params:
            query_params.append(('swaggerVersion', params['swagger_version']))  # noqa: E501
        if 'extensions' in params:
            query_params.append(('extensions', params['extensions']))  # noqa: E501
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
            collection_formats['field'] = 'multi'  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
            collection_formats['op'] = 'multi'  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
            collection_formats['value'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/swagger/apis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_swagger_apis_id_image_get(self, id, **kwargs):  # noqa: E501
        """Retrieves the API image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_apis_id_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_swagger_apis_id_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.discovery_swagger_apis_id_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def discovery_swagger_apis_id_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the API image  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_apis_id_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_swagger_apis_id_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `discovery_swagger_apis_id_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/swagger/apis/{id}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discovery_swagger_apis_id_service_definition_get(self, id, **kwargs):  # noqa: E501
        """Retrieves the service definition of the API.   # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_apis_id_service_definition_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discovery_swagger_apis_id_service_definition_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.discovery_swagger_apis_id_service_definition_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def discovery_swagger_apis_id_service_definition_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the service definition of the API.   # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discovery_swagger_apis_id_service_definition_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discovery_swagger_apis_id_service_definition_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `discovery_swagger_apis_id_service_definition_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/discovery/swagger/apis/{id}/service-definition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
