# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apim_swagger_client.api_client import ApiClient


class UsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def users_forgotpassword_post(self, email, **kwargs):  # noqa: E501
        """Allows a user to reset their password.  # noqa: E501

        When this method is invoked, an email is sent to the owner of _email_ to verify that they wish for their password to be reset. The owner of _email_ must click on a link to reset the password. The link should direct the user to [/resetpassword](#APIUsersresetForgottenPassword) with appropriate query paremeters. Redirect URLs may be specified for success and failure conditions. If redirect URLs are specified, they must be a known Static File listener configured in the gateway or the request will be rejected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_forgotpassword_post(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address of the user. (required)
        :param str success: The redirect success location (e.g. /request-forgotten-pw-success)
        :param str failure: The redirect failure location (e.g. /request-forgotten-pw-failed)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_forgotpassword_post_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.users_forgotpassword_post_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def users_forgotpassword_post_with_http_info(self, email, **kwargs):  # noqa: E501
        """Allows a user to reset their password.  # noqa: E501

        When this method is invoked, an email is sent to the owner of _email_ to verify that they wish for their password to be reset. The owner of _email_ must click on a link to reset the password. The link should direct the user to [/resetpassword](#APIUsersresetForgottenPassword) with appropriate query paremeters. Redirect URLs may be specified for success and failure conditions. If redirect URLs are specified, they must be a known Static File listener configured in the gateway or the request will be rejected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_forgotpassword_post_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address of the user. (required)
        :param str success: The redirect success location (e.g. /request-forgotten-pw-success)
        :param str failure: The redirect failure location (e.g. /request-forgotten-pw-failed)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'success', 'failure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_forgotpassword_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `users_forgotpassword_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'success' in params:
            form_params.append(('success', params['success']))  # noqa: E501
        if 'failure' in params:
            form_params.append(('failure', params['failure']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/forgotpassword', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_get(self, **kwargs):  # noqa: E501
        """Obtains a list of users  # noqa: E501

        Returns a list of users that are visible to the authenticated user.  The list of users can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  apiid :      Matches the user if the user has explicit access to application(s) that are using the API, specified by ID  appid :      Matches the user if the user has explicit access to the application, specified by ID  description :      The user's description  email :      The user's email address  enabled :      The enabled state of the user, one of: enabled, disabled  createdOn :      The date the user was created on, time in ms, e.g.: 1372755998542  mobile :      The user's mobile phone  name :      The name of the user  loginName :  The login name of the user  orgid :      Matches the user if the user is a member of the organization, specified by ID  phone :      The user's phone  role :      The user's role, one of: user or oadmin  state :      The user's current state, one of: approved, pending  surname :      The surname of the user  The __op__ is an operation and is one of:  eq :      Equal  ne :      Not equal  gt :      Greater than  lt :      Less than  ge :      Greater than or equal  le :      Less than or equal  like :      Like  gele :      Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_get_with_http_info(self, **kwargs):  # noqa: E501
        """Obtains a list of users  # noqa: E501

        Returns a list of users that are visible to the authenticated user.  The list of users can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  apiid :      Matches the user if the user has explicit access to application(s) that are using the API, specified by ID  appid :      Matches the user if the user has explicit access to the application, specified by ID  description :      The user's description  email :      The user's email address  enabled :      The enabled state of the user, one of: enabled, disabled  createdOn :      The date the user was created on, time in ms, e.g.: 1372755998542  mobile :      The user's mobile phone  name :      The name of the user  loginName :  The login name of the user  orgid :      Matches the user if the user is a member of the organization, specified by ID  phone :      The user's phone  role :      The user's role, one of: user or oadmin  state :      The user's current state, one of: approved, pending  surname :      The surname of the user  The __op__ is an operation and is one of:  eq :      Equal  ne :      Not equal  gt :      Greater than  lt :      Less than  ge :      Greater than or equal  le :      Less than or equal  like :      Like  gele :      Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'op', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
            collection_formats['field'] = 'multi'  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
            collection_formats['op'] = 'multi'  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
            collection_formats['value'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_approve_post(self, id, **kwargs):  # noqa: E501
        """Grants approval to a request to create a new user on the system.  # noqa: E501

        Approving user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to approve new user requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_approve_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user to be approved. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_approve_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_approve_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_id_approve_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Grants approval to a request to create a new user on the system.  # noqa: E501

        Approving user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to approve new user requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_approve_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user to be approved. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_approve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_id_approve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_changepassword_post(self, id, new_password, **kwargs):  # noqa: E501
        """Updates the password for a given user.  # noqa: E501

        The authenticated user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to invoke this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_changepassword_post(id, new_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user being updated. (required)
        :param str new_password: The new password of the user being updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_changepassword_post_with_http_info(id, new_password, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_changepassword_post_with_http_info(id, new_password, **kwargs)  # noqa: E501
            return data

    def users_id_changepassword_post_with_http_info(self, id, new_password, **kwargs):  # noqa: E501
        """Updates the password for a given user.  # noqa: E501

        The authenticated user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to invoke this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_changepassword_post_with_http_info(id, new_password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user being updated. (required)
        :param str new_password: The new password of the user being updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'new_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_changepassword_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_id_changepassword_post`")  # noqa: E501
        # verify the required parameter 'new_password' is set
        if ('new_password' not in params or
                params['new_password'] is None):
            raise ValueError("Missing the required parameter `new_password` when calling `users_id_changepassword_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'new_password' in params:
            form_params.append(('newPassword', params['new_password']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/changepassword', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_delete(self, id, **kwargs):  # noqa: E501
        """Deletes a user.  # noqa: E501

        Deletes a user with the given user ID.  All the applications and keys associated with the deleted user remain in the organization and can be managed by the Organization Administrator or the API Administrator.  The API Administrator can delete any user.  The Organization Administrators can only delete users belonging to their organizations..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The user ID to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes a user.  # noqa: E501

        Deletes a user with the given user ID.  All the applications and keys associated with the deleted user remain in the organization and can be managed by the Organization Administrator or the API Administrator.  The API Administrator can delete any user.  The Organization Administrators can only delete users belonging to their organizations..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The user ID to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_get(self, id, **kwargs):  # noqa: E501
        """Retrieves the details for a given user.  # noqa: E501

        Retrieves user details, given a user ID.  The API Manager Administrator may access all users, otherwise, the user ID must be a member of the authenticated user's own organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user to be retreived. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the details for a given user.  # noqa: E501

        Retrieves user details, given a user ID.  The API Manager Administrator may access all users, otherwise, the user ID must be a member of the authenticated user's own organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user to be retreived. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_image_get(self, id, **kwargs):  # noqa: E501
        """Get the image for a user  # noqa: E501

        Returns the jpeg image associated with an user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The user ID whos image is to be returned (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_id_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the image for a user  # noqa: E501

        Returns the jpeg image associated with an user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The user ID whos image is to be returned (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_id_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_image_post(self, id, file, type, **kwargs):  # noqa: E501
        """Set the image for a user  # noqa: E501

        Set the jpeg image to be associated with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_image_post(id, file, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The user ID for which an image is to be updated (required)
        :param file file: The file input data (required)
        :param str type: This value should be unset (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_image_post_with_http_info(id, file, type, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_image_post_with_http_info(id, file, type, **kwargs)  # noqa: E501
            return data

    def users_id_image_post_with_http_info(self, id, file, type, **kwargs):  # noqa: E501
        """Set the image for a user  # noqa: E501

        Set the jpeg image to be associated with a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_image_post_with_http_info(id, file, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The user ID for which an image is to be updated (required)
        :param file file: The file input data (required)
        :param str type: This value should be unset (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_image_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_id_image_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `users_id_image_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `users_id_image_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_put(self, id, **kwargs):  # noqa: E501
        """Updates the details for a given user.  # noqa: E501

        Updates user details, given a user ID.  The API Manager Administrator may update all users, otherwise, the user ID must be a member of the authenticated user's own organization and the authenticated user must be an Organization Administrator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user being updated. (required)
        :param User body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates the details for a given user.  # noqa: E501

        Updates user details, given a user ID.  The API Manager Administrator may update all users, otherwise, the user ID must be a member of the authenticated user's own organization and the authenticated user must be an Organization Administrator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user being updated. (required)
        :param User body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_id_resetpassword_put(self, id, **kwargs):  # noqa: E501
        """Admin level function to reset the password for a given user.  # noqa: E501

        The authenticated user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to invoke this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_resetpassword_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user having password reset administratively. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_id_resetpassword_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.users_id_resetpassword_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def users_id_resetpassword_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Admin level function to reset the password for a given user.  # noqa: E501

        The authenticated user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to invoke this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_id_resetpassword_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the user having password reset administratively. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_id_resetpassword_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `users_id_resetpassword_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/resetpassword', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_post(self, **kwargs):  # noqa: E501
        """Admin function to create a new user on the system  # noqa: E501

        Creates a new user on the system.  Only Organization Administrators and API Manager Administrators may create users. Data posted in this request may include custom properties defined in app.config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_post_with_http_info(self, **kwargs):  # noqa: E501
        """Admin function to create a new user on the system  # noqa: E501

        Creates a new user on the system.  Only Organization Administrators and API Manager Administrators may create users. Data posted in this request may include custom properties defined in app.config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_register_post(self, name, email, password, **kwargs):  # noqa: E501
        """Register a new user.  # noqa: E501

        Allows a user to register for an account on the system. A validation email request is sent to the provided email address to confirm ownership. The email should contain a link to [/validateuser](#APIUsersvalidateUser) with appropriate parameters. User properties (including custom properties) may be supplied as form parameters. The method will return JSON, but optionally, redirect URLs may be specified for success and failure conditions. If redirect URLs are specified, they must be a known Static File listener configured in the gateway or the request will be rejected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_register_post(name, email, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the user to register. (required)
        :param str email: The unique email address of the user to register. (required)
        :param str password: The password of the user to register. (required)
        :param str token: The registration token to use.
        :param str success: The redirect success location (e.g. '/registration-success')
        :param str failure: The redirect failure location (e.g. '/registration-failed')
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_register_post_with_http_info(name, email, password, **kwargs)  # noqa: E501
        else:
            (data) = self.users_register_post_with_http_info(name, email, password, **kwargs)  # noqa: E501
            return data

    def users_register_post_with_http_info(self, name, email, password, **kwargs):  # noqa: E501
        """Register a new user.  # noqa: E501

        Allows a user to register for an account on the system. A validation email request is sent to the provided email address to confirm ownership. The email should contain a link to [/validateuser](#APIUsersvalidateUser) with appropriate parameters. User properties (including custom properties) may be supplied as form parameters. The method will return JSON, but optionally, redirect URLs may be specified for success and failure conditions. If redirect URLs are specified, they must be a known Static File listener configured in the gateway or the request will be rejected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_register_post_with_http_info(name, email, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the user to register. (required)
        :param str email: The unique email address of the user to register. (required)
        :param str password: The password of the user to register. (required)
        :param str token: The registration token to use.
        :param str success: The redirect success location (e.g. '/registration-success')
        :param str failure: The redirect failure location (e.g. '/registration-failed')
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'email', 'password', 'token', 'success', 'failure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_register_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `users_register_post`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `users_register_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `users_register_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'token' in params:
            form_params.append(('token', params['token']))  # noqa: E501
        if 'success' in params:
            form_params.append(('success', params['success']))  # noqa: E501
        if 'failure' in params:
            form_params.append(('failure', params['failure']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_resetpassword_get(self, email, validator, **kwargs):  # noqa: E501
        """Validates the user [/forgotpassword](#APIUsersforgotUserPassword) password request.  # noqa: E501

        User validation code and email address are expected as query string parameters.  When invoked, an email will be sent to the user with their new password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_resetpassword_get(email, validator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address of the user being validated. (required)
        :param str validator: Validation string for the user entry. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_resetpassword_get_with_http_info(email, validator, **kwargs)  # noqa: E501
        else:
            (data) = self.users_resetpassword_get_with_http_info(email, validator, **kwargs)  # noqa: E501
            return data

    def users_resetpassword_get_with_http_info(self, email, validator, **kwargs):  # noqa: E501
        """Validates the user [/forgotpassword](#APIUsersforgotUserPassword) password request.  # noqa: E501

        User validation code and email address are expected as query string parameters.  When invoked, an email will be sent to the user with their new password.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_resetpassword_get_with_http_info(email, validator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address of the user being validated. (required)
        :param str validator: Validation string for the user entry. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'validator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_resetpassword_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `users_resetpassword_get`")  # noqa: E501
        # verify the required parameter 'validator' is set
        if ('validator' not in params or
                params['validator'] is None):
            raise ValueError("Missing the required parameter `validator` when calling `users_resetpassword_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'validator' in params:
            query_params.append(('validator', params['validator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/resetpassword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_validateuser_get(self, email, validator, **kwargs):  # noqa: E501
        """Validates the user [/register](#APIUsersregisterUser) request.  # noqa: E501

        User validation code and email address are expected as query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_validateuser_get(email, validator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address of the user being validated. (required)
        :param str validator: Validation string for the user entry. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_validateuser_get_with_http_info(email, validator, **kwargs)  # noqa: E501
        else:
            (data) = self.users_validateuser_get_with_http_info(email, validator, **kwargs)  # noqa: E501
            return data

    def users_validateuser_get_with_http_info(self, email, validator, **kwargs):  # noqa: E501
        """Validates the user [/register](#APIUsersregisterUser) request.  # noqa: E501

        User validation code and email address are expected as query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_validateuser_get_with_http_info(email, validator, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address of the user being validated. (required)
        :param str validator: Validation string for the user entry. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'validator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_validateuser_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `users_validateuser_get`")  # noqa: E501
        # verify the required parameter 'validator' is set
        if ('validator' not in params or
                params['validator'] is None):
            raise ValueError("Missing the required parameter `validator` when calling `users_validateuser_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'validator' in params:
            query_params.append(('validator', params['validator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/validateuser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
