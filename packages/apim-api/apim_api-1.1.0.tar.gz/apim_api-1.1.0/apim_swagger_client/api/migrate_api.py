# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apim_swagger_client.api_client import ApiClient


class MigrateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def migrate_applications_export_create_post(self, body, **kwargs):  # noqa: E501
        """Creates a set of export options associated with the current http session  # noqa: E501

        Creates a set of export options associated with the current http session. Options include the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data can be retrieved subsequently with a GET request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_export_create_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportOptions body: The options for creating an application export file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_applications_export_create_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.migrate_applications_export_create_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def migrate_applications_export_create_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a set of export options associated with the current http session  # noqa: E501

        Creates a set of export options associated with the current http session. Options include the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data can be retrieved subsequently with a GET request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_export_create_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportOptions body: The options for creating an application export file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_applications_export_create_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `migrate_applications_export_create_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/migrate/applications/export/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migrate_applications_export_download_get(self, **kwargs):  # noqa: E501
        """Exports Application data for migration to other API Gateways  # noqa: E501

        Retrieves the export options associated with the current user HTTP session and creates a stream or returns the exported data in response body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_export_download_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filename: Optional. If present this method will return an octet stream with an file attachment of the same name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_applications_export_download_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.migrate_applications_export_download_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def migrate_applications_export_download_get_with_http_info(self, **kwargs):  # noqa: E501
        """Exports Application data for migration to other API Gateways  # noqa: E501

        Retrieves the export options associated with the current user HTTP session and creates a stream or returns the exported data in response body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_export_download_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filename: Optional. If present this method will return an octet stream with an file attachment of the same name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_applications_export_download_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/migrate/applications/export/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migrate_applications_export_json_post(self, body, **kwargs):  # noqa: E501
        """Creates an export of applications based on the export options posted as a JSON object  # noqa: E501

        Creates an export file based on options including the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data is returned as part of the response body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_export_json_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportOptions body: Export options (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_applications_export_json_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.migrate_applications_export_json_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def migrate_applications_export_json_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates an export of applications based on the export options posted as a JSON object  # noqa: E501

        Creates an export file based on options including the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data is returned as part of the response body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_export_json_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportOptions body: Export options (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_applications_export_json_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `migrate_applications_export_json_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/migrate/applications/export/json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migrate_applications_export_post(self, apikeys, oauth, quota, **kwargs):  # noqa: E501
        """Creates an export of applications based on the export options posted in a form data  # noqa: E501

        Creates an export file based on options including the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data is returned as part of the response body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_export_post(apikeys, oauth, quota, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apikeys: True/False. Include/Exclude api keys (required)
        :param str oauth: True/False. Include/Exclude oauth credentials (required)
        :param str quota: True/False. Include/Exclude quotas, if available (required)
        :param str filename: The name of the export file
        :param str password: The password used to encrypt the exported file
        :param list[str] app_ids: The list of identifiers for the applications to be exported
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_applications_export_post_with_http_info(apikeys, oauth, quota, **kwargs)  # noqa: E501
        else:
            (data) = self.migrate_applications_export_post_with_http_info(apikeys, oauth, quota, **kwargs)  # noqa: E501
            return data

    def migrate_applications_export_post_with_http_info(self, apikeys, oauth, quota, **kwargs):  # noqa: E501
        """Creates an export of applications based on the export options posted in a form data  # noqa: E501

        Creates an export file based on options including the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data is returned as part of the response body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_export_post_with_http_info(apikeys, oauth, quota, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str apikeys: True/False. Include/Exclude api keys (required)
        :param str oauth: True/False. Include/Exclude oauth credentials (required)
        :param str quota: True/False. Include/Exclude quotas, if available (required)
        :param str filename: The name of the export file
        :param str password: The password used to encrypt the exported file
        :param list[str] app_ids: The list of identifiers for the applications to be exported
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['apikeys', 'oauth', 'quota', 'filename', 'password', 'app_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_applications_export_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'apikeys' is set
        if ('apikeys' not in params or
                params['apikeys'] is None):
            raise ValueError("Missing the required parameter `apikeys` when calling `migrate_applications_export_post`")  # noqa: E501
        # verify the required parameter 'oauth' is set
        if ('oauth' not in params or
                params['oauth'] is None):
            raise ValueError("Missing the required parameter `oauth` when calling `migrate_applications_export_post`")  # noqa: E501
        # verify the required parameter 'quota' is set
        if ('quota' not in params or
                params['quota'] is None):
            raise ValueError("Missing the required parameter `quota` when calling `migrate_applications_export_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'apikeys' in params:
            form_params.append(('apikeys', params['apikeys']))  # noqa: E501
        if 'oauth' in params:
            form_params.append(('oauth', params['oauth']))  # noqa: E501
        if 'quota' in params:
            form_params.append(('quota', params['quota']))  # noqa: E501
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'app_ids' in params:
            form_params.append(('appIds', params['app_ids']))  # noqa: E501
            collection_formats['appIds'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/migrate/applications/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migrate_applications_import_post(self, file, organization_id, user_id, type, **kwargs):  # noqa: E501
        """Imports applications to the API Gateway  # noqa: E501

        Imports a set of applications and assocated API Keys and OAuth credentials, encrypted files require a decryption password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_import_post(file, organization_id, user_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: The file containing application data to be imported (required)
        :param str organization_id: The Organization to associate the imported applications with. If applicable, for Core OAuth this parameter will be ignored (required)
        :param str user_id: The user to associate the applications with. Default is the API Admin (required)
        :param str type: This value should be unset (required)
        :param str password: Password to be used for decryption
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_applications_import_post_with_http_info(file, organization_id, user_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.migrate_applications_import_post_with_http_info(file, organization_id, user_id, type, **kwargs)  # noqa: E501
            return data

    def migrate_applications_import_post_with_http_info(self, file, organization_id, user_id, type, **kwargs):  # noqa: E501
        """Imports applications to the API Gateway  # noqa: E501

        Imports a set of applications and assocated API Keys and OAuth credentials, encrypted files require a decryption password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_applications_import_post_with_http_info(file, organization_id, user_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: The file containing application data to be imported (required)
        :param str organization_id: The Organization to associate the imported applications with. If applicable, for Core OAuth this parameter will be ignored (required)
        :param str user_id: The user to associate the applications with. Default is the API Admin (required)
        :param str type: This value should be unset (required)
        :param str password: Password to be used for decryption
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'organization_id', 'user_id', 'type', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_applications_import_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `migrate_applications_import_post`")  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `migrate_applications_import_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `migrate_applications_import_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `migrate_applications_import_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'organization_id' in params:
            form_params.append(('organizationId', params['organization_id']))  # noqa: E501
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/migrate/applications/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
