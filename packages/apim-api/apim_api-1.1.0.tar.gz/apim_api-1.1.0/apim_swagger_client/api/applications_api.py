# coding: utf-8

"""
    API Manager API v1.3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: support@axway.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apim_swagger_client.api_client import ApiClient


class ApplicationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def applications_get(self, **kwargs):  # noqa: E501
        """Get the list of applications  # noqa: E501

        Get the list of applications that are visible to the authenticated user.  The list of applications can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  apiid : Matches the application if the application is using the API, specified by ID  userid : Matches the application if the user has explicit access to the application, specified by ID  description : The application's description  email : The application's contact email address  enabled :  The enabled state of the application, one of: enabled, disabled  createdOn : The date the application was created on, time in ms, e.g.: 1372755998542  name : The name of the application  orgid : Matches the application if the application is part of the organization, specified by ID  phone : The application's contact phone  state : The application's current state, one of: approved, pending  The __op__ is an operation and is one of:  eq : Equal  ne : Not equal  gt :  Greater than  lt :  Less than  ge :  Greater than or equal  le :  Less than or equal  like : Like  gele :  Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[Application]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.applications_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def applications_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of applications  # noqa: E501

        Get the list of applications that are visible to the authenticated user.  The list of applications can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:  apiid : Matches the application if the application is using the API, specified by ID  userid : Matches the application if the user has explicit access to the application, specified by ID  description : The application's description  email : The application's contact email address  enabled :  The enabled state of the application, one of: enabled, disabled  createdOn : The date the application was created on, time in ms, e.g.: 1372755998542  name : The name of the application  orgid : Matches the application if the application is part of the organization, specified by ID  phone : The application's contact phone  state : The application's current state, one of: approved, pending  The __op__ is an operation and is one of:  eq : Equal  ne : Not equal  gt :  Greater than  lt :  Less than  ge :  Greater than or equal  le :  Less than or equal  like : Like  gele :  Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10  The __value__ will be compared against the __field__, according to the supplied __op__.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] field: Filter field name.
        :param list[str] op: Filter operation.
        :param list[str] value: Filter value
        :return: list[Application]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'op', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
            collection_formats['field'] = 'multi'  # noqa: E501
        if 'op' in params:
            query_params.append(('op', params['op']))  # noqa: E501
            collection_formats['op'] = 'multi'  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
            collection_formats['value'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Application]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apikeys_apikeyid_put(self, id, apikeyid, **kwargs):  # noqa: E501
        """Updates an API Key  # noqa: E501

        Updates the secret, enabled and Cors origin field.  The fields __id__, __createdBy__, __createdOn__ are read only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apikeys_apikeyid_put(id, apikeyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose API Key is to be updated. (required)
        :param str apikeyid: The ID of the API Key to be updated. (required)
        :param APIKey body:
        :return: APIKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apikeys_apikeyid_put_with_http_info(id, apikeyid, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apikeys_apikeyid_put_with_http_info(id, apikeyid, **kwargs)  # noqa: E501
            return data

    def applications_id_apikeys_apikeyid_put_with_http_info(self, id, apikeyid, **kwargs):  # noqa: E501
        """Updates an API Key  # noqa: E501

        Updates the secret, enabled and Cors origin field.  The fields __id__, __createdBy__, __createdOn__ are read only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apikeys_apikeyid_put_with_http_info(id, apikeyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose API Key is to be updated. (required)
        :param str apikeyid: The ID of the API Key to be updated. (required)
        :param APIKey body:
        :return: APIKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'apikeyid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apikeys_apikeyid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apikeys_apikeyid_put`")  # noqa: E501
        # verify the required parameter 'apikeyid' is set
        if ('apikeyid' not in params or
                params['apikeyid'] is None):
            raise ValueError("Missing the required parameter `apikeyid` when calling `applications_id_apikeys_apikeyid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'apikeyid' in params:
            path_params['apikeyid'] = params['apikeyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apikeys/{apikeyid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apikeys_get(self, id, **kwargs):  # noqa: E501
        """Returns the API Keys associated with an application  # noqa: E501

        Returns the API Keys associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apikeys_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose API Keys are to be returned. (required)
        :return: list[APIKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apikeys_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apikeys_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_apikeys_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the API Keys associated with an application  # noqa: E501

        Returns the API Keys associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apikeys_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose API Keys are to be returned. (required)
        :return: list[APIKey]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apikeys_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apikeys_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apikeys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIKey]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apikeys_key_id_delete(self, id, key_id, **kwargs):  # noqa: E501
        """Delete an API Key  # noqa: E501

        Deletes an API Key. Deleting an API key means that it will no longer be accepted for application authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apikeys_key_id_delete(id, key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API Key ID to be deleted. (required)
        :param str key_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apikeys_key_id_delete_with_http_info(id, key_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apikeys_key_id_delete_with_http_info(id, key_id, **kwargs)  # noqa: E501
            return data

    def applications_id_apikeys_key_id_delete_with_http_info(self, id, key_id, **kwargs):  # noqa: E501
        """Delete an API Key  # noqa: E501

        Deletes an API Key. Deleting an API key means that it will no longer be accepted for application authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apikeys_key_id_delete_with_http_info(id, key_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The API Key ID to be deleted. (required)
        :param str key_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'key_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apikeys_key_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apikeys_key_id_delete`")  # noqa: E501
        # verify the required parameter 'key_id' is set
        if ('key_id' not in params or
                params['key_id'] is None):
            raise ValueError("Missing the required parameter `key_id` when calling `applications_id_apikeys_key_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'key_id' in params:
            path_params['keyId'] = params['key_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apikeys/{keyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apikeys_post(self, id, **kwargs):  # noqa: E501
        """Creates a new API Key and secret for the application  # noqa: E501

        Creates a new API Key and secret for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apikeys_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an API Key. (required)
        :param APIKey api_key: The APIKey to create
        :return: APIKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apikeys_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apikeys_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_apikeys_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Creates a new API Key and secret for the application  # noqa: E501

        Creates a new API Key and secret for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apikeys_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an API Key. (required)
        :param APIKey api_key: The APIKey to create
        :return: APIKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apikeys_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apikeys_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'api_key' in params:
            body_params = params['api_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apikeys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIKey',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apis_api_access_id_approve_post(self, id, api_access_id, **kwargs):  # noqa: E501
        """Creates an API access request to an API for an application.  # noqa: E501

        Approving user must be API Manager Administrator or an Organization Administrator of the application's organization with the correct privileges to approve API access requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_api_access_id_approve_post(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str api_access_id: The API access ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apis_api_access_id_approve_post_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apis_api_access_id_approve_post_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
            return data

    def applications_id_apis_api_access_id_approve_post_with_http_info(self, id, api_access_id, **kwargs):  # noqa: E501
        """Creates an API access request to an API for an application.  # noqa: E501

        Approving user must be API Manager Administrator or an Organization Administrator of the application's organization with the correct privileges to approve API access requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_api_access_id_approve_post_with_http_info(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str api_access_id: The API access ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_access_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apis_api_access_id_approve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apis_api_access_id_approve_post`")  # noqa: E501
        # verify the required parameter 'api_access_id' is set
        if ('api_access_id' not in params or
                params['api_access_id'] is None):
            raise ValueError("Missing the required parameter `api_access_id` when calling `applications_id_apis_api_access_id_approve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'api_access_id' in params:
            path_params['apiAccessId'] = params['api_access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apis/{apiAccessId}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apis_api_access_id_delete(self, id, api_access_id, **kwargs):  # noqa: E501
        """Deletes access to an API for an application  # noqa: E501

        Permanently deletes access to an API for an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_api_access_id_delete(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str api_access_id: The API access ID. (required)
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apis_api_access_id_delete_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apis_api_access_id_delete_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
            return data

    def applications_id_apis_api_access_id_delete_with_http_info(self, id, api_access_id, **kwargs):  # noqa: E501
        """Deletes access to an API for an application  # noqa: E501

        Permanently deletes access to an API for an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_api_access_id_delete_with_http_info(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str api_access_id: The API access ID. (required)
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_access_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apis_api_access_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apis_api_access_id_delete`")  # noqa: E501
        # verify the required parameter 'api_access_id' is set
        if ('api_access_id' not in params or
                params['api_access_id'] is None):
            raise ValueError("Missing the required parameter `api_access_id` when calling `applications_id_apis_api_access_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'api_access_id' in params:
            path_params['apiAccessId'] = params['api_access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apis/{apiAccessId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIAccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apis_api_access_id_put(self, id, api_access_id, **kwargs):  # noqa: E501
        """Updates access to an API for an application  # noqa: E501

        Updates access to an API for an application.  Only __enabled__ may be modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_api_access_id_put(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str api_access_id: The API access ID. (required)
        :param APIAccess body:
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apis_api_access_id_put_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apis_api_access_id_put_with_http_info(id, api_access_id, **kwargs)  # noqa: E501
            return data

    def applications_id_apis_api_access_id_put_with_http_info(self, id, api_access_id, **kwargs):  # noqa: E501
        """Updates access to an API for an application  # noqa: E501

        Updates access to an API for an application.  Only __enabled__ may be modified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_api_access_id_put_with_http_info(id, api_access_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str api_access_id: The API access ID. (required)
        :param APIAccess body:
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_access_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apis_api_access_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apis_api_access_id_put`")  # noqa: E501
        # verify the required parameter 'api_access_id' is set
        if ('api_access_id' not in params or
                params['api_access_id'] is None):
            raise ValueError("Missing the required parameter `api_access_id` when calling `applications_id_apis_api_access_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'api_access_id' in params:
            path_params['apiAccessId'] = params['api_access_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apis/{apiAccessId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIAccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apis_get(self, id, **kwargs):  # noqa: E501
        """Get the list of APIs that the application can access  # noqa: E501

        Get the list of APIs that the application can access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :return: list[APIAccess]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apis_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apis_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_apis_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list of APIs that the application can access  # noqa: E501

        Get the list of APIs that the application can access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :return: list[APIAccess]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apis_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apis_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[APIAccess]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_apis_post(self, id, **kwargs):  # noqa: E501
        """Create a request for an application to access an API.  # noqa: E501

        Only API Manager Administrator, or an Organization Administrator of the application's organization with the correct privileges, or the application manager may create API access requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param APIAccess body:
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_apis_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_apis_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_apis_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a request for an application to access an API.  # noqa: E501

        Only API Manager Administrator, or an Organization Administrator of the application's organization with the correct privileges, or the application manager may create API access requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_apis_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param APIAccess body:
        :return: APIAccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_apis_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_apis_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/apis', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIAccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_approve_post(self, id, **kwargs):  # noqa: E501
        """Approves a pending application request  # noqa: E501

        Approving user must be API Manager Administrator or an Organization Administrator of the application's organization with the correct privileges to approve new application requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_approve_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application request ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_approve_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_approve_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_approve_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Approves a pending application request  # noqa: E501

        Approving user must be API Manager Administrator or an Organization Administrator of the application's organization with the correct privileges to approve new application requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_approve_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application request ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_approve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_approve_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_availablescopes_get(self, id, **kwargs):  # noqa: E501
        """Returns the scopes available to an application  # noqa: E501

        Returns the OAuth scopes available to  an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_availablescopes_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth scopes are to be returned. (required)
        :param bool api_scope:
        :return: list[list[object]]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_availablescopes_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_availablescopes_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_availablescopes_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the scopes available to an application  # noqa: E501

        Returns the OAuth scopes available to  an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_availablescopes_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth scopes are to be returned. (required)
        :param bool api_scope:
        :return: list[list[object]]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_availablescopes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_availablescopes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_scope' in params:
            query_params.append(('apiScope', params['api_scope']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/availablescopes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[list[object]]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete an application  # noqa: E501

        Only managers of the application, API Manager Administrators, or Organization Administrators with enabled delegated application management privileges, may delete applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an application  # noqa: E501

        Only managers of the application, API Manager Administrators, or Organization Administrators with enabled delegated application management privileges, may delete applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_extclients_get(self, id, **kwargs):  # noqa: E501
        """Returns the external clients associated with an application  # noqa: E501

        Returns the external clients associated with an application. External clients are used when authenticating the application through a 3rd party OAuth service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_extclients_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose external clients are to be returned. (required)
        :return: list[ExternalClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_extclients_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_extclients_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_extclients_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the external clients associated with an application  # noqa: E501

        Returns the external clients associated with an application. External clients are used when authenticating the application through a 3rd party OAuth service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_extclients_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose external clients are to be returned. (required)
        :return: list[ExternalClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_extclients_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_extclients_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/extclients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExternalClient]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_extclients_object_id_delete(self, id, object_id, **kwargs):  # noqa: E501
        """Delete an external client  # noqa: E501

        Deletes an external client. Deleting a mapping means that it will no longer be accepted for application authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_extclients_object_id_delete(id, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose external client is to be deleted. (required)
        :param str object_id: The ID of the external client entry to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_extclients_object_id_delete_with_http_info(id, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_extclients_object_id_delete_with_http_info(id, object_id, **kwargs)  # noqa: E501
            return data

    def applications_id_extclients_object_id_delete_with_http_info(self, id, object_id, **kwargs):  # noqa: E501
        """Delete an external client  # noqa: E501

        Deletes an external client. Deleting a mapping means that it will no longer be accepted for application authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_extclients_object_id_delete_with_http_info(id, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose external client is to be deleted. (required)
        :param str object_id: The ID of the external client entry to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_extclients_object_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_extclients_object_id_delete`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `applications_id_extclients_object_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/extclients/{objectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_extclients_object_id_put(self, id, object_id, **kwargs):  # noqa: E501
        """Updates an external client for the application  # noqa: E501

        Updates an external client for the application. External clients are used when authenticating the application through a 3rd party OAuth service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_extclients_object_id_put(id, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose external client is to be updated. (required)
        :param str object_id: The external client entry to be updated. (required)
        :param ExternalClient body:
        :return: ExternalClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_extclients_object_id_put_with_http_info(id, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_extclients_object_id_put_with_http_info(id, object_id, **kwargs)  # noqa: E501
            return data

    def applications_id_extclients_object_id_put_with_http_info(self, id, object_id, **kwargs):  # noqa: E501
        """Updates an external client for the application  # noqa: E501

        Updates an external client for the application. External clients are used when authenticating the application through a 3rd party OAuth service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_extclients_object_id_put_with_http_info(id, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose external client is to be updated. (required)
        :param str object_id: The external client entry to be updated. (required)
        :param ExternalClient body:
        :return: ExternalClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'object_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_extclients_object_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_extclients_object_id_put`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `applications_id_extclients_object_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/extclients/{objectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExternalClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_extclients_post(self, id, **kwargs):  # noqa: E501
        """Maps a new external client to the application  # noqa: E501

        Maps a new external client to the application. External clients are used when authenticating the application through a 3rd party OAuth service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_extclients_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application to map to an external client. (required)
        :param ExternalClient body:
        :return: ExternalClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_extclients_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_extclients_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_extclients_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Maps a new external client to the application  # noqa: E501

        Maps a new external client to the application. External clients are used when authenticating the application through a 3rd party OAuth service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_extclients_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application to map to an external client. (required)
        :param ExternalClient body:
        :return: ExternalClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_extclients_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_extclients_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/extclients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExternalClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_get(self, id, **kwargs):  # noqa: E501
        """Get an application  # noqa: E501

        Retrieves the details of an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the application to be returned. (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an application  # noqa: E501

        Retrieves the details of an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the application to be returned. (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_image_get(self, id, **kwargs):  # noqa: E501
        """Get the image for an application  # noqa: E501

        Get the JPEG image associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the application whose image is to be return (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the image for an application  # noqa: E501

        Get the JPEG image associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the application whose image is to be return (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_image_post(self, id, file, **kwargs):  # noqa: E501
        """Adds a JPEG image to an application  # noqa: E501

        Adds a JPEG image to an application with a MultiPart POST  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_image_post(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the application whose image is being added (required)
        :param file file: The file uploaded in the POST body as an element in a multipart post (required)
        :param str type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_image_post_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_image_post_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def applications_id_image_post_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Adds a JPEG image to an application  # noqa: E501

        Adds a JPEG image to an application with a MultiPart POST  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_image_post_with_http_info(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the application whose image is being added (required)
        :param file file: The file uploaded in the POST body as an element in a multipart post (required)
        :param str type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_image_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_image_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `applications_id_image_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauth_client_id_put(self, id, client_id, **kwargs):  # noqa: E501
        """Updates an OAuth Credential for the application  # noqa: E501

        Updates an OAuth Credential for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_client_id_put(id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth credential is to be updated. (required)
        :param str client_id: The OAuth Credential ID to be updated. (required)
        :param OAuthClient body:
        :return: OAuthClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauth_client_id_put_with_http_info(id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauth_client_id_put_with_http_info(id, client_id, **kwargs)  # noqa: E501
            return data

    def applications_id_oauth_client_id_put_with_http_info(self, id, client_id, **kwargs):  # noqa: E501
        """Updates an OAuth Credential for the application  # noqa: E501

        Updates an OAuth Credential for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_client_id_put_with_http_info(id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth credential is to be updated. (required)
        :param str client_id: The OAuth Credential ID to be updated. (required)
        :param OAuthClient body:
        :return: OAuthClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'client_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauth_client_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauth_client_id_put`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `applications_id_oauth_client_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauth/{clientId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauth_clientid_newsecret_put(self, id, clientid, **kwargs):  # noqa: E501
        """Updates an OAuth Credential for an application by generating a new secret  # noqa: E501

        Updates an OAuth Credential for an application by generating a new client secret.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_clientid_newsecret_put(id, clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth credential is to be updated with a new secret (required)
        :param str clientid: The OAuth Credential ID to be updated with a new secret (required)
        :return: OAuthClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauth_clientid_newsecret_put_with_http_info(id, clientid, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauth_clientid_newsecret_put_with_http_info(id, clientid, **kwargs)  # noqa: E501
            return data

    def applications_id_oauth_clientid_newsecret_put_with_http_info(self, id, clientid, **kwargs):  # noqa: E501
        """Updates an OAuth Credential for an application by generating a new secret  # noqa: E501

        Updates an OAuth Credential for an application by generating a new client secret.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_clientid_newsecret_put_with_http_info(id, clientid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth credential is to be updated with a new secret (required)
        :param str clientid: The OAuth Credential ID to be updated with a new secret (required)
        :return: OAuthClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'clientid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauth_clientid_newsecret_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauth_clientid_newsecret_put`")  # noqa: E501
        # verify the required parameter 'clientid' is set
        if ('clientid' not in params or
                params['clientid'] is None):
            raise ValueError("Missing the required parameter `clientid` when calling `applications_id_oauth_clientid_newsecret_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'clientid' in params:
            path_params['clientid'] = params['clientid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauth/{clientid}/newsecret', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauth_get(self, id, **kwargs):  # noqa: E501
        """Returns the OAuth Credentials associated with an application  # noqa: E501

        Returns the OAuth Credentials associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth Credentials are to be returned. (required)
        :return: list[OAuthClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauth_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauth_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_oauth_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the OAuth Credentials associated with an application  # noqa: E501

        Returns the OAuth Credentials associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth Credentials are to be returned. (required)
        :return: list[OAuthClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauth_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauth_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OAuthClient]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauth_oauth_id_delete(self, id, oauth_id, **kwargs):  # noqa: E501
        """Delete an OAuth client ID and secret  # noqa: E501

        Deletes an OAuth client ID and secret. Deleting an OAuth client ID and secret means that it will no longer be accepted for OAuth application authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_oauth_id_delete(id, oauth_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth Credential is to be deleted. (required)
        :param str oauth_id: The OAuth Client ID to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauth_oauth_id_delete_with_http_info(id, oauth_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauth_oauth_id_delete_with_http_info(id, oauth_id, **kwargs)  # noqa: E501
            return data

    def applications_id_oauth_oauth_id_delete_with_http_info(self, id, oauth_id, **kwargs):  # noqa: E501
        """Delete an OAuth client ID and secret  # noqa: E501

        Deletes an OAuth client ID and secret. Deleting an OAuth client ID and secret means that it will no longer be accepted for OAuth application authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_oauth_id_delete_with_http_info(id, oauth_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth Credential is to be deleted. (required)
        :param str oauth_id: The OAuth Client ID to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'oauth_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauth_oauth_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauth_oauth_id_delete`")  # noqa: E501
        # verify the required parameter 'oauth_id' is set
        if ('oauth_id' not in params or
                params['oauth_id'] is None):
            raise ValueError("Missing the required parameter `oauth_id` when calling `applications_id_oauth_oauth_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'oauth_id' in params:
            path_params['oauthId'] = params['oauth_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauth/{oauthId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauth_post(self, id, body, **kwargs):  # noqa: E501
        """Creates a new OAuth client ID and secret for the application  # noqa: E501

        Creates a new OAuth client ID and secret for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an OAuth client ID and secret. (required)
        :param OAuthClient body: The OAuth credential to create (required)
        :return: OAuthClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauth_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauth_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def applications_id_oauth_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Creates a new OAuth client ID and secret for the application  # noqa: E501

        Creates a new OAuth client ID and secret for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauth_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an OAuth client ID and secret. (required)
        :param OAuthClient body: The OAuth credential to create (required)
        :return: OAuthClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauth_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauth_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `applications_id_oauth_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauthresource_get(self, id, **kwargs):  # noqa: E501
        """Returns the OAuth protected resources (scopes) associated with an application  # noqa: E501

        Returns the OAuth protected resources (scopes) associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauthresource_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth protected resources (Scopes) are to be returned. (required)
        :return: list[OAuthResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauthresource_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauthresource_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_oauthresource_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the OAuth protected resources (scopes) associated with an application  # noqa: E501

        Returns the OAuth protected resources (scopes) associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauthresource_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth protected resources (Scopes) are to be returned. (required)
        :return: list[OAuthResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauthresource_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauthresource_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauthresource', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OAuthResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauthresource_post(self, id, body, **kwargs):  # noqa: E501
        """Adds an OAuth protected resource to an application  # noqa: E501

        An application must define which OAuth Protected resources it wants to access. These resources will define the scope of the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauthresource_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an OAuth protected resource. (required)
        :param OAuthResource body: The OAuth protected resource to add to the application (required)
        :return: OAuthResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauthresource_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauthresource_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def applications_id_oauthresource_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Adds an OAuth protected resource to an application  # noqa: E501

        An application must define which OAuth Protected resources it wants to access. These resources will define the scope of the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauthresource_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an OAuth protected resource. (required)
        :param OAuthResource body: The OAuth protected resource to add to the application (required)
        :return: OAuthResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauthresource_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauthresource_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `applications_id_oauthresource_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauthresource', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauthresource_resource_id_delete(self, id, resource_id, **kwargs):  # noqa: E501
        """Remove an OAuth protected resource from an application  # noqa: E501

        Removes the association between an application and an OAuth protected resource on the API Server. The application will no longer have the scope associated with the resource. Tokens issued prior to the removal will still be scoped for the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauthresource_resource_id_delete(id, resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose protected resource is to be removed. (required)
        :param str resource_id: The uri of the OAuth protected resource to be disassociated from the application. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauthresource_resource_id_delete_with_http_info(id, resource_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauthresource_resource_id_delete_with_http_info(id, resource_id, **kwargs)  # noqa: E501
            return data

    def applications_id_oauthresource_resource_id_delete_with_http_info(self, id, resource_id, **kwargs):  # noqa: E501
        """Remove an OAuth protected resource from an application  # noqa: E501

        Removes the association between an application and an OAuth protected resource on the API Server. The application will no longer have the scope associated with the resource. Tokens issued prior to the removal will still be scoped for the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauthresource_resource_id_delete_with_http_info(id, resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose protected resource is to be removed. (required)
        :param str resource_id: The uri of the OAuth protected resource to be disassociated from the application. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resource_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauthresource_resource_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauthresource_resource_id_delete`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `applications_id_oauthresource_resource_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauthresource/{resourceId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_oauthresource_resource_id_put(self, id, resource_id, body, **kwargs):  # noqa: E501
        """Updates a protected resource associate with an application, sets enabled to true/false  # noqa: E501

        An OAuth Protected resource associated with an application can be enabled or disabled with this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauthresource_resource_id_put(id, resource_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an updated OAuth protected resource. (required)
        :param str resource_id: The ID of the OAuth protected resource to update (required)
        :param OAuthResource body: The updated OAuth protected resource (required)
        :return: OAuthResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_oauthresource_resource_id_put_with_http_info(id, resource_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_oauthresource_resource_id_put_with_http_info(id, resource_id, body, **kwargs)  # noqa: E501
            return data

    def applications_id_oauthresource_resource_id_put_with_http_info(self, id, resource_id, body, **kwargs):  # noqa: E501
        """Updates a protected resource associate with an application, sets enabled to true/false  # noqa: E501

        An OAuth Protected resource associated with an application can be enabled or disabled with this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_oauthresource_resource_id_put_with_http_info(id, resource_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an updated OAuth protected resource. (required)
        :param str resource_id: The ID of the OAuth protected resource to update (required)
        :param OAuthResource body: The updated OAuth protected resource (required)
        :return: OAuthResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'resource_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_oauthresource_resource_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_oauthresource_resource_id_put`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `applications_id_oauthresource_resource_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `applications_id_oauthresource_resource_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/oauthresource/{resourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_permissions_get(self, id, **kwargs):  # noqa: E501
        """Get the list of permissions.  # noqa: E501

        Get the access-control list (ACL) for the application. Callers with view-only privilege can only access their own permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_permissions_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :return: list[PermissionDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_permissions_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_permissions_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_permissions_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list of permissions.  # noqa: E501

        Get the access-control list (ACL) for the application. Callers with view-only privilege can only access their own permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_permissions_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :return: list[PermissionDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_permissions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_permissions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PermissionDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_permissions_perm_id_delete(self, id, perm_id, **kwargs):  # noqa: E501
        """Remove a permission  # noqa: E501

        Remove an existing access-control entry from the application's ACL. Management privilege required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_permissions_perm_id_delete(id, perm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str perm_id: The permission ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_permissions_perm_id_delete_with_http_info(id, perm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_permissions_perm_id_delete_with_http_info(id, perm_id, **kwargs)  # noqa: E501
            return data

    def applications_id_permissions_perm_id_delete_with_http_info(self, id, perm_id, **kwargs):  # noqa: E501
        """Remove a permission  # noqa: E501

        Remove an existing access-control entry from the application's ACL. Management privilege required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_permissions_perm_id_delete_with_http_info(id, perm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str perm_id: The permission ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'perm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_permissions_perm_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_permissions_perm_id_delete`")  # noqa: E501
        # verify the required parameter 'perm_id' is set
        if ('perm_id' not in params or
                params['perm_id'] is None):
            raise ValueError("Missing the required parameter `perm_id` when calling `applications_id_permissions_perm_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'perm_id' in params:
            path_params['permId'] = params['perm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/permissions/{permId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_permissions_perm_id_put(self, id, perm_id, **kwargs):  # noqa: E501
        """Modify a permission  # noqa: E501

        Modify an existing access-control entry from the application's ACL. Management privilege required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_permissions_perm_id_put(id, perm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str perm_id: The permission ID. (required)
        :param PermissionDTO body:
        :return: PermissionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_permissions_perm_id_put_with_http_info(id, perm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_permissions_perm_id_put_with_http_info(id, perm_id, **kwargs)  # noqa: E501
            return data

    def applications_id_permissions_perm_id_put_with_http_info(self, id, perm_id, **kwargs):  # noqa: E501
        """Modify a permission  # noqa: E501

        Modify an existing access-control entry from the application's ACL. Management privilege required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_permissions_perm_id_put_with_http_info(id, perm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param str perm_id: The permission ID. (required)
        :param PermissionDTO body:
        :return: PermissionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'perm_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_permissions_perm_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_permissions_perm_id_put`")  # noqa: E501
        # verify the required parameter 'perm_id' is set
        if ('perm_id' not in params or
                params['perm_id'] is None):
            raise ValueError("Missing the required parameter `perm_id` when calling `applications_id_permissions_perm_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'perm_id' in params:
            path_params['permId'] = params['perm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/permissions/{permId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PermissionDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_permissions_post(self, id, **kwargs):  # noqa: E501
        """Create a new permission.  # noqa: E501

        Add a new access-control entry to the application's ACL. Management privilege required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_permissions_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param PermissionDTO body:
        :return: PermissionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_permissions_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_permissions_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_permissions_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a new permission.  # noqa: E501

        Add a new access-control entry to the application's ACL. Management privilege required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_permissions_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The application ID. (required)
        :param PermissionDTO body:
        :return: PermissionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_permissions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_permissions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PermissionDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_put(self, id, **kwargs):  # noqa: E501
        """Update an application  # noqa: E501

        Only managers of the application, API Manager Administrators, or Organization Administrators with enabled delegated application management privileges, may update an application. Note, if a field is omitted from the payload, or its value is set to null, the existing value for this field will be retained.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the application to be updated (required)
        :param Application body:
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an application  # noqa: E501

        Only managers of the application, API Manager Administrators, or Organization Administrators with enabled delegated application management privileges, may update an application. Note, if a field is omitted from the payload, or its value is set to null, the existing value for this field will be retained.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the application to be updated (required)
        :param Application body:
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_quota_delete(self, id, **kwargs):  # noqa: E501
        """Deletes a quota from an application  # noqa: E501

        Deletes a quota from an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_quota_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application who's quota constraint is to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_quota_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_quota_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_quota_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes a quota from an application  # noqa: E501

        Deletes a quota from an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_quota_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application who's quota constraint is to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_quota_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_quota_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/quota', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_quota_get(self, id, **kwargs):  # noqa: E501
        """Returns the quota associated with an application.  # noqa: E501

        Returns the quota associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_quota_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application who's quota constraints are to be returned. (required)
        :return: QuotaDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_quota_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_quota_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_quota_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the quota associated with an application.  # noqa: E501

        Returns the quota associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_quota_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application who's quota constraints are to be returned. (required)
        :return: QuotaDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_quota_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_quota_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/quota', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuotaDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_quota_post(self, id, **kwargs):  # noqa: E501
        """Creates a new quota constraint for the application  # noqa: E501

        Creates a new quota constraint for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_quota_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application for the quota contraint. (required)
        :param QuotaDTO body:
        :return: QuotaDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_quota_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_quota_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_quota_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Creates a new quota constraint for the application  # noqa: E501

        Creates a new quota constraint for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_quota_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application for the quota contraint. (required)
        :param QuotaDTO body:
        :return: QuotaDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_quota_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_quota_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/quota', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuotaDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_quota_put(self, id, **kwargs):  # noqa: E501
        """Updates a quota contraint for an application  # noqa: E501

        Updates a quota contraint for the given application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_quota_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application who's quota is to be updated. (required)
        :param QuotaDTO body:
        :return: QuotaDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_quota_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_quota_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_quota_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates a quota contraint for an application  # noqa: E501

        Updates a quota contraint for the given application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_quota_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application who's quota is to be updated. (required)
        :param QuotaDTO body:
        :return: QuotaDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_quota_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_quota_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/quota', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuotaDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_scope_get(self, id, **kwargs):  # noqa: E501
        """Returns the scopes associated with an application  # noqa: E501

        Returns the OAuth scopes associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_scope_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth protected resources (Scopes) are to be returned. (required)
        :return: list[list[object]]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_scope_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_scope_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_scope_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the scopes associated with an application  # noqa: E501

        Returns the OAuth scopes associated with an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_scope_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose OAuth protected resources (Scopes) are to be returned. (required)
        :return: list[list[object]]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_scope_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_scope_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/scope', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[list[object]]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_scope_post(self, id, body, **kwargs):  # noqa: E501
        """Adds an OAuth protected resource to an application  # noqa: E501

        An application must define which scopes it wants to access. These define the scope of the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_scope_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an OAuth scope. (required)
        :param OAuthAppScope body: The OAuth Scope to add to the application (required)
        :return: OAuthAppScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_scope_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_scope_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def applications_id_scope_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Adds an OAuth protected resource to an application  # noqa: E501

        An application must define which scopes it wants to access. These define the scope of the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_scope_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an OAuth scope. (required)
        :param OAuthAppScope body: The OAuth Scope to add to the application (required)
        :return: OAuthAppScope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_scope_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_scope_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `applications_id_scope_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/scope', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthAppScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_scope_scope_id_delete(self, id, scope_id, **kwargs):  # noqa: E501
        """Remove an OAuth protected resource from an application  # noqa: E501

        Removes the association between an application and an OAuth protected resource on the API Server. The application will no longer have the scope associated with the resource. Tokens issued prior to the removal will still be scoped for the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_scope_scope_id_delete(id, scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose protected resource is to be removed. (required)
        :param str scope_id: The id of the Scope to be disassociated from the application. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_scope_scope_id_delete_with_http_info(id, scope_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_scope_scope_id_delete_with_http_info(id, scope_id, **kwargs)  # noqa: E501
            return data

    def applications_id_scope_scope_id_delete_with_http_info(self, id, scope_id, **kwargs):  # noqa: E501
        """Remove an OAuth protected resource from an application  # noqa: E501

        Removes the association between an application and an OAuth protected resource on the API Server. The application will no longer have the scope associated with the resource. Tokens issued prior to the removal will still be scoped for the resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_scope_scope_id_delete_with_http_info(id, scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application whose protected resource is to be removed. (required)
        :param str scope_id: The id of the Scope to be disassociated from the application. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'scope_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_scope_scope_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_scope_scope_id_delete`")  # noqa: E501
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `applications_id_scope_scope_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/scope/{scopeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_scope_scope_id_put(self, id, scope_id, body, **kwargs):  # noqa: E501
        """Updates a scope associated with an application, sets default to true/false  # noqa: E501

        An OAuth Scope associated with an application can be set or unset as a default scope with this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_scope_scope_id_put(id, scope_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an updated OAuth protected resource. (required)
        :param str scope_id: The ID of the Application Scope to update (required)
        :param OAuthAppScope body: The updated OAuth protected resource (required)
        :return: OAuthAppScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_scope_scope_id_put_with_http_info(id, scope_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_scope_scope_id_put_with_http_info(id, scope_id, body, **kwargs)  # noqa: E501
            return data

    def applications_id_scope_scope_id_put_with_http_info(self, id, scope_id, body, **kwargs):  # noqa: E501
        """Updates a scope associated with an application, sets default to true/false  # noqa: E501

        An OAuth Scope associated with an application can be set or unset as a default scope with this method.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_scope_scope_id_put_with_http_info(id, scope_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of application requiring an updated OAuth protected resource. (required)
        :param str scope_id: The ID of the Application Scope to update (required)
        :param OAuthAppScope body: The updated OAuth protected resource (required)
        :return: OAuthAppScope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'scope_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_scope_scope_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `applications_id_scope_scope_id_put`")  # noqa: E501
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `applications_id_scope_scope_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `applications_id_scope_scope_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/scope/{scopeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthAppScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_oauthclient_client_id_get(self, client_id, **kwargs):  # noqa: E501
        """Get an application associated with an OAuth Client ID  # noqa: E501

        Retrieves the application associated with an OAuth Client ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_oauthclient_client_id_get(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth Client ID associated with the Application. (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_oauthclient_client_id_get_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_oauthclient_client_id_get_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def applications_oauthclient_client_id_get_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Get an application associated with an OAuth Client ID  # noqa: E501

        Retrieves the application associated with an OAuth Client ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_oauthclient_client_id_get_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth Client ID associated with the Application. (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_oauthclient_client_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `applications_oauthclient_client_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications/oauthclient/{clientId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_post(self, **kwargs):  # noqa: E501
        """Creates a new application.  # noqa: E501

        Creates a new application.  New applications may need to be approved using [/approve](#APIApplicationsapproveApp). Data posted in this request may include custom properties defined in app.config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationRequest body:
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.applications_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def applications_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new application.  # noqa: E501

        Creates a new application.  New applications may need to be approved using [/approve](#APIApplicationsapproveApp). Data posted in this request may include custom properties defined in app.config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationRequest body:
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
