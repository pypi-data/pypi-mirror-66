# ----
# This file is generated by mini_lambda_methods_generation.py - do not modify it !
# ----
from __future__ import print_function
from mini_lambda.main import C, make_lambda_friendly_class, make_lambda_friendly_method
# from warnings import warn


__all__ = [
    'Abs',
    'All',
    'Any',
    'Bin',
    'Bool',
    'Bytearray',
    'Bytes',
    'Callable',
    'Chr',
    'Classmethod',
    'Compile',
    'Complex',
    'Delattr',
    'Dict',
    'Dir',
    'Divmod',
    'Enumerate',
    'Eval',
    'Filter',
    'Float',
    'Format',
    'Frozenset',
    'Getattr',
    'Globals',
    'Hasattr',
    'Hash',
    'Hex',
    'Id',
    'Input',
    'Int',
    'Isinstance',
    'Issubclass',
    'Iter',
    'Len',
    'List',
    'Locals',
    'Map',
    'Max',
    'Memoryview',
    'Min',
    'Next',
    'Object',
    'Oct',
    'Open',
    'Ord',
    'Pow',
    'Print',
    'Property',
    'Range',
    'Repr',
    'Reversed',
    'Round',
    'Set',
    'Setattr',
    'Slice',
    'Sorted',
    'Staticmethod',
    'Str',
    'Sum',
    'Super',
    'Tuple',
    'Type',
    'Vars',
    'Zip',
]

Abs = make_lambda_friendly_method(abs, 'abs')


All = make_lambda_friendly_method(all, 'all')


Any = make_lambda_friendly_method(any, 'any')


Bin = make_lambda_friendly_method(bin, 'bin')


Bool = make_lambda_friendly_class(bool)


Bytearray = make_lambda_friendly_class(bytearray)


Bytes = make_lambda_friendly_class(bytes)


Callable = make_lambda_friendly_method(callable, 'callable')


Chr = make_lambda_friendly_method(chr, 'chr')


Classmethod = make_lambda_friendly_class(classmethod)


Compile = make_lambda_friendly_method(compile, 'compile')


Complex = make_lambda_friendly_class(complex)


Delattr = make_lambda_friendly_method(delattr, 'delattr')


Dict = make_lambda_friendly_class(dict)


Dir = make_lambda_friendly_method(dir, 'dir')


Divmod = make_lambda_friendly_method(divmod, 'divmod')


Enumerate = make_lambda_friendly_class(enumerate)


Eval = make_lambda_friendly_method(eval, 'eval')


Filter = make_lambda_friendly_class(filter)


Float = make_lambda_friendly_class(float)


Format = make_lambda_friendly_method(format, 'format')


Frozenset = make_lambda_friendly_class(frozenset)


Getattr = make_lambda_friendly_method(getattr, 'getattr')


Globals = make_lambda_friendly_method(globals, 'globals')


Hasattr = make_lambda_friendly_method(hasattr, 'hasattr')


Hash = make_lambda_friendly_method(hash, 'hash')


Hex = make_lambda_friendly_method(hex, 'hex')


Id = make_lambda_friendly_method(id, 'id')


Input = make_lambda_friendly_method(input, 'input')


Int = make_lambda_friendly_class(int)


Isinstance = make_lambda_friendly_method(isinstance, 'isinstance')


Issubclass = make_lambda_friendly_method(issubclass, 'issubclass')


Iter = make_lambda_friendly_method(iter, 'iter')


Len = make_lambda_friendly_method(len, 'len')


List = make_lambda_friendly_class(list)


Locals = make_lambda_friendly_method(locals, 'locals')


Map = make_lambda_friendly_class(map)


Max = make_lambda_friendly_method(max, 'max')


Memoryview = make_lambda_friendly_class(memoryview)


Min = make_lambda_friendly_method(min, 'min')


Next = make_lambda_friendly_method(next, 'next')


Object = make_lambda_friendly_class(object)


Oct = make_lambda_friendly_method(oct, 'oct')


Open = make_lambda_friendly_method(open, 'open')


Ord = make_lambda_friendly_method(ord, 'ord')


Pow = make_lambda_friendly_method(pow, 'pow')


Print = make_lambda_friendly_method(print, 'print')


Property = make_lambda_friendly_class(property)


Range = make_lambda_friendly_class(range)


Repr = make_lambda_friendly_method(repr, 'repr')


Reversed = make_lambda_friendly_class(reversed)


Round = make_lambda_friendly_method(round, 'round')


Set = make_lambda_friendly_class(set)


Setattr = make_lambda_friendly_method(setattr, 'setattr')


Slice = make_lambda_friendly_class(slice)


Sorted = make_lambda_friendly_method(sorted, 'sorted')


Staticmethod = make_lambda_friendly_class(staticmethod)


Str = make_lambda_friendly_class(str)


Sum = make_lambda_friendly_method(sum, 'sum')


Super = make_lambda_friendly_class(super)


Tuple = make_lambda_friendly_class(tuple)


Type = make_lambda_friendly_class(type)


Vars = make_lambda_friendly_method(vars, 'vars')


Zip = make_lambda_friendly_class(zip)


