# ----
# This file is generated by mini_lambda_methods_generation.py - do not modify it !
# ----
from __future__ import print_function
from mini_lambda.main import C, make_lambda_friendly_class, make_lambda_friendly_method
# from warnings import warn



try:
    from math import acos
    Acos = make_lambda_friendly_method(acos, 'acos')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import acos': " + str(e))
    pass


try:
    from math import acosh
    Acosh = make_lambda_friendly_method(acosh, 'acosh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import acosh': " + str(e))
    pass


try:
    from math import asin
    Asin = make_lambda_friendly_method(asin, 'asin')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import asin': " + str(e))
    pass


try:
    from math import asinh
    Asinh = make_lambda_friendly_method(asinh, 'asinh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import asinh': " + str(e))
    pass


try:
    from math import atan
    Atan = make_lambda_friendly_method(atan, 'atan')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import atan': " + str(e))
    pass


try:
    from math import atan2
    Atan2 = make_lambda_friendly_method(atan2, 'atan2')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import atan2': " + str(e))
    pass


try:
    from math import atanh
    Atanh = make_lambda_friendly_method(atanh, 'atanh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import atanh': " + str(e))
    pass


try:
    from math import ceil
    Ceil = make_lambda_friendly_method(ceil, 'ceil')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import ceil': " + str(e))
    pass


try:
    from math import copysign
    Copysign = make_lambda_friendly_method(copysign, 'copysign')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import copysign': " + str(e))
    pass


try:
    from math import cos
    Cos = make_lambda_friendly_method(cos, 'cos')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import cos': " + str(e))
    pass


try:
    from math import cosh
    Cosh = make_lambda_friendly_method(cosh, 'cosh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import cosh': " + str(e))
    pass


try:
    from math import degrees
    Degrees = make_lambda_friendly_method(degrees, 'degrees')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import degrees': " + str(e))
    pass


try:
    from math import e
    E = C(e, 'e')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import e': " + str(e))
    pass


try:
    from math import erf
    Erf = make_lambda_friendly_method(erf, 'erf')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import erf': " + str(e))
    pass


try:
    from math import erfc
    Erfc = make_lambda_friendly_method(erfc, 'erfc')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import erfc': " + str(e))
    pass


try:
    from math import exp
    Exp = make_lambda_friendly_method(exp, 'exp')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import exp': " + str(e))
    pass


try:
    from math import expm1
    Expm1 = make_lambda_friendly_method(expm1, 'expm1')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import expm1': " + str(e))
    pass


try:
    from math import fabs
    Fabs = make_lambda_friendly_method(fabs, 'fabs')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import fabs': " + str(e))
    pass


try:
    from math import factorial
    Factorial = make_lambda_friendly_method(factorial, 'factorial')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import factorial': " + str(e))
    pass


try:
    from math import floor
    Floor = make_lambda_friendly_method(floor, 'floor')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import floor': " + str(e))
    pass


try:
    from math import fmod
    Fmod = make_lambda_friendly_method(fmod, 'fmod')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import fmod': " + str(e))
    pass


try:
    from math import frexp
    Frexp = make_lambda_friendly_method(frexp, 'frexp')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import frexp': " + str(e))
    pass


try:
    from math import fsum
    Fsum = make_lambda_friendly_method(fsum, 'fsum')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import fsum': " + str(e))
    pass


try:
    from math import gamma
    Gamma = make_lambda_friendly_method(gamma, 'gamma')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import gamma': " + str(e))
    pass


try:
    from math import gcd
    Gcd = make_lambda_friendly_method(gcd, 'gcd')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import gcd': " + str(e))
    pass


try:
    from math import hypot
    Hypot = make_lambda_friendly_method(hypot, 'hypot')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import hypot': " + str(e))
    pass


try:
    from math import inf
    Inf = C(inf, 'inf')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import inf': " + str(e))
    pass


try:
    from math import isclose
    Isclose = make_lambda_friendly_method(isclose, 'isclose')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import isclose': " + str(e))
    pass


try:
    from math import isfinite
    Isfinite = make_lambda_friendly_method(isfinite, 'isfinite')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import isfinite': " + str(e))
    pass


try:
    from math import isinf
    Isinf = make_lambda_friendly_method(isinf, 'isinf')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import isinf': " + str(e))
    pass


try:
    from math import isnan
    Isnan = make_lambda_friendly_method(isnan, 'isnan')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import isnan': " + str(e))
    pass


try:
    from math import ldexp
    Ldexp = make_lambda_friendly_method(ldexp, 'ldexp')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import ldexp': " + str(e))
    pass


try:
    from math import lgamma
    Lgamma = make_lambda_friendly_method(lgamma, 'lgamma')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import lgamma': " + str(e))
    pass


try:
    from math import log
    Log = make_lambda_friendly_method(log, 'log')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import log': " + str(e))
    pass


try:
    from math import log10
    Log10 = make_lambda_friendly_method(log10, 'log10')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import log10': " + str(e))
    pass


try:
    from math import log1p
    Log1p = make_lambda_friendly_method(log1p, 'log1p')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import log1p': " + str(e))
    pass


try:
    from math import log2
    Log2 = make_lambda_friendly_method(log2, 'log2')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import log2': " + str(e))
    pass


try:
    from math import modf
    Modf = make_lambda_friendly_method(modf, 'modf')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import modf': " + str(e))
    pass


try:
    from math import nan
    Nan = C(nan, 'nan')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import nan': " + str(e))
    pass


try:
    from math import pi
    Pi = C(pi, 'pi')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import pi': " + str(e))
    pass


try:
    from math import pow
    Pow = make_lambda_friendly_method(pow, 'pow')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import pow': " + str(e))
    pass


try:
    from math import radians
    Radians = make_lambda_friendly_method(radians, 'radians')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import radians': " + str(e))
    pass


try:
    from math import sin
    Sin = make_lambda_friendly_method(sin, 'sin')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import sin': " + str(e))
    pass


try:
    from math import sinh
    Sinh = make_lambda_friendly_method(sinh, 'sinh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import sinh': " + str(e))
    pass


try:
    from math import sqrt
    Sqrt = make_lambda_friendly_method(sqrt, 'sqrt')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import sqrt': " + str(e))
    pass


try:
    from math import tan
    Tan = make_lambda_friendly_method(tan, 'tan')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import tan': " + str(e))
    pass


try:
    from math import tanh
    Tanh = make_lambda_friendly_method(tanh, 'tanh')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import tanh': " + str(e))
    pass


try:
    from math import tau
    Tau = C(tau, 'tau')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import tau': " + str(e))
    pass


try:
    from math import trunc
    Trunc = make_lambda_friendly_method(trunc, 'trunc')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from math import trunc': " + str(e))
    pass


