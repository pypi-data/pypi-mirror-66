# ----
# This file is generated by mini_lambda_methods_generation.py - do not modify it !
# ----
from __future__ import print_function
from mini_lambda.main import C, make_lambda_friendly_class, make_lambda_friendly_method
# from warnings import warn



try:
    from decimal import BasicContext
    Basiccontext = C(BasicContext, 'BasicContext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import BasicContext': " + str(e))
    pass


try:
    from decimal import Clamped
    CClamped = make_lambda_friendly_class(Clamped)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Clamped': " + str(e))
    pass


try:
    from decimal import Context
    CContext = make_lambda_friendly_class(Context)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Context': " + str(e))
    pass


try:
    from decimal import ConversionSyntax
    CConversionSyntax = make_lambda_friendly_class(ConversionSyntax)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ConversionSyntax': " + str(e))
    pass


try:
    from decimal import Decimal
    DDecimal = make_lambda_friendly_class(Decimal)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Decimal': " + str(e))
    pass


try:
    from decimal import DecimalException
    DDecimalException = make_lambda_friendly_class(DecimalException)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DecimalException': " + str(e))
    pass


try:
    from decimal import DecimalTuple
    DDecimalTuple = make_lambda_friendly_class(DecimalTuple)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DecimalTuple': " + str(e))
    pass


try:
    from decimal import DefaultContext
    Defaultcontext = C(DefaultContext, 'DefaultContext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DefaultContext': " + str(e))
    pass


try:
    from decimal import DivisionByZero
    DDivisionByZero = make_lambda_friendly_class(DivisionByZero)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DivisionByZero': " + str(e))
    pass


try:
    from decimal import DivisionImpossible
    DDivisionImpossible = make_lambda_friendly_class(DivisionImpossible)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DivisionImpossible': " + str(e))
    pass


try:
    from decimal import DivisionUndefined
    DDivisionUndefined = make_lambda_friendly_class(DivisionUndefined)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import DivisionUndefined': " + str(e))
    pass


try:
    from decimal import ExtendedContext
    Extendedcontext = C(ExtendedContext, 'ExtendedContext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ExtendedContext': " + str(e))
    pass


try:
    from decimal import FloatOperation
    FFloatOperation = make_lambda_friendly_class(FloatOperation)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import FloatOperation': " + str(e))
    pass


try:
    from decimal import HAVE_THREADS
    Have_threads = C(HAVE_THREADS, 'HAVE_THREADS')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import HAVE_THREADS': " + str(e))
    pass


try:
    from decimal import Inexact
    IInexact = make_lambda_friendly_class(Inexact)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Inexact': " + str(e))
    pass


try:
    from decimal import InvalidContext
    IInvalidContext = make_lambda_friendly_class(InvalidContext)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import InvalidContext': " + str(e))
    pass


try:
    from decimal import InvalidOperation
    IInvalidOperation = make_lambda_friendly_class(InvalidOperation)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import InvalidOperation': " + str(e))
    pass


try:
    from decimal import MAX_EMAX
    Max_emax = C(MAX_EMAX, 'MAX_EMAX')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import MAX_EMAX': " + str(e))
    pass


try:
    from decimal import MAX_PREC
    Max_prec = C(MAX_PREC, 'MAX_PREC')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import MAX_PREC': " + str(e))
    pass


try:
    from decimal import MIN_EMIN
    Min_emin = C(MIN_EMIN, 'MIN_EMIN')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import MIN_EMIN': " + str(e))
    pass


try:
    from decimal import MIN_ETINY
    Min_etiny = C(MIN_ETINY, 'MIN_ETINY')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import MIN_ETINY': " + str(e))
    pass


try:
    from decimal import Overflow
    OOverflow = make_lambda_friendly_class(Overflow)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Overflow': " + str(e))
    pass


try:
    from decimal import ROUND_05UP
    Round_05up = C(ROUND_05UP, 'ROUND_05UP')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_05UP': " + str(e))
    pass


try:
    from decimal import ROUND_CEILING
    Round_ceiling = C(ROUND_CEILING, 'ROUND_CEILING')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_CEILING': " + str(e))
    pass


try:
    from decimal import ROUND_DOWN
    Round_down = C(ROUND_DOWN, 'ROUND_DOWN')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_DOWN': " + str(e))
    pass


try:
    from decimal import ROUND_FLOOR
    Round_floor = C(ROUND_FLOOR, 'ROUND_FLOOR')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_FLOOR': " + str(e))
    pass


try:
    from decimal import ROUND_HALF_DOWN
    Round_half_down = C(ROUND_HALF_DOWN, 'ROUND_HALF_DOWN')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_HALF_DOWN': " + str(e))
    pass


try:
    from decimal import ROUND_HALF_EVEN
    Round_half_even = C(ROUND_HALF_EVEN, 'ROUND_HALF_EVEN')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_HALF_EVEN': " + str(e))
    pass


try:
    from decimal import ROUND_HALF_UP
    Round_half_up = C(ROUND_HALF_UP, 'ROUND_HALF_UP')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_HALF_UP': " + str(e))
    pass


try:
    from decimal import ROUND_UP
    Round_up = C(ROUND_UP, 'ROUND_UP')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import ROUND_UP': " + str(e))
    pass


try:
    from decimal import Rounded
    RRounded = make_lambda_friendly_class(Rounded)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Rounded': " + str(e))
    pass


try:
    from decimal import Subnormal
    SSubnormal = make_lambda_friendly_class(Subnormal)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Subnormal': " + str(e))
    pass


try:
    from decimal import Underflow
    UUnderflow = make_lambda_friendly_class(Underflow)
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import Underflow': " + str(e))
    pass


try:
    from decimal import getcontext
    Getcontext = make_lambda_friendly_method(getcontext, 'getcontext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import getcontext': " + str(e))
    pass


try:
    from decimal import localcontext
    Localcontext = make_lambda_friendly_method(localcontext, 'localcontext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import localcontext': " + str(e))
    pass


try:
    from decimal import setcontext
    Setcontext = make_lambda_friendly_method(setcontext, 'setcontext')
except ImportError as e:
    # new: silently escape, as this is annoying
    # warn("Error performing 'from decimal import setcontext': " + str(e))
    pass


