import unittest
import in3


class EthereumTest(unittest.TestCase):

    def setUp(self):
        conf = in3.model.ClientConfig(signatureCount=1, chainId=str(in3.Chain.MAINNET))
        self.client = in3.Client(in3_config=conf)

    def test_ethereum_sha3(self):
        digest = self.client.eth.keccak256('0x68656c6c6f20776f726c64')
        self.assertEqual(digest, '0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad')

    def test_eth_gasPrice(self):
        self.assertGreater(self.client.eth.gas_price(), 1000000)

    def test_block_number(self):
        result = self.client.eth.block_number()
        self.assertGreater(result, 15344774)

    def test_get_balance(self):
        result = self.client.eth.get_balance("0x16d4aBf4F640CBA3768A3B75F1bB060B0cC77194")
        self.assertGreaterEqual(result, 0)
        result = self.client.eth.get_balance("0x16d4aBf4F640CBA3768A3B75F1bB060B0cC77194", 15344774)
        self.assertGreaterEqual(result, 0)
        result = self.client.eth.get_balance("0x16d4aBf4F640CBA3768A3B75F1bB060B0cC77194", 'earliest')
        self.assertGreaterEqual(result, 0)

    def test_get_storage_at(self):
        rpc = self.client.eth.get_storage_at(
            address=in3.eth.Address("0xaF91fF3c7E46D40684703F514783FA8880FF8C57", skip_validation=True), position=0,
            at_block=in3.BlockStatus.LATEST)
        self.assertEqual(rpc, '0x000000000000000000000000b31097ef4bd61b6aa1135c27cd475635298ac8ec')

    def test_get_transaction_count(self):
        address = in3.eth.Address("0x9E52Ee6Acd6E7F55e860844d487556f8Cbe2BAEE")
        rpc = self.client.eth.get_transaction_count(address=address, at_block=in3.BlockStatus.LATEST)
        self.assertGreater(rpc, 60)

    # TODO: Fix Error
    # in3.model.exception.In3RequestException: {'code': -4, 'message': '[0x1]:The Method cannot be verified with eth_nano!'}
    # this means C in3 is configured as nano...
    def test_get_block_transaction_count_by_hash(self):
        hash_obj = in3.eth.Hash("0x97786c76ed653d36bb8a0d10563fe5814febbdff946316d4f4e8f6f3bb0f77e8")
        rpc = self.client.eth.get_block_transaction_count_by_hash(block_hash=hash_obj)
        self.assertGreaterEqual(rpc, 0)

    # TODO: STOPPED HERE
    # TODO: ERROR
    # in3.model.exception.In3RequestException: {'code': -4, 'message': '[0x1]:The Method cannot be verified with eth_nano!'}
    def test_get_block_transaction_count_by_number(self):
        number = int("0xd12321", 16)
        rpc = self.client.eth.get_block_transaction_count_by_number(number=number)
        self.assertGreaterEqual(rpc, 0)

    # removed
    # def test_get_uncle_count_by_block_hash(self):
    #     hash_obj = in3.eth.Hash("0x97786c76ed653d36bb8a0d10563fe5814febbdff946316d4f4e8f6f3bb0f77e8")
    #     rpc = self.client.eth.get_uncle_count_by_block_hash(block_hash=hash_obj)
    #     self.assertGreaterEqual(rpc, 0)

    # removed
    # def test_get_uncle_count_by_block_number(self):
    #     number = 14891999
    #     rpc = self.client.eth.get_uncle_count_by_block_number(number=number)
    #     self.assertGreaterEqual(rpc, 0)

    def test_get_code(self):
        address = in3.eth.Address("0xe323f6a06AbFe88B82f8a1cc8B0b9d55D253cCBf")
        result = self.client.eth.get_code(address=address, at_block=in3.BlockStatus.LATEST)
        self.assertEqual(result,
                         "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638c65c81f116100f9578063c05aff5c11610097578063d924393e11610071578063d924393e14610536578063dfefddde1461053e578063f14fcbc814610546578063f897a22b14610563576101a9565b8063c05aff5c146104eb578063c2ca0ac514610511578063c8bc58d91461052e576101a9565b806392166aa4116100d357806392166aa41461047b57806399cdfd4d14610483578063a35bb3a91461048b578063a426e4c814610493576101a9565b80638c65c81f146103f95780638cd221c91461046b5780638da5cb5b14610473576101a9565b80635b28af6d116101665780636d0bf58d116101405780636d0bf58d1461036f578063745921eb14610377578063765339461461039b57806389fb2682146103cd576101a9565b80635b28af6d146102ef5780635b410881146102f75780635eac6239146102ff576101a9565b8063200d2ed2146101ab57806322508e5d146101d75780633501f777146101f45780633b0c3a7c1461020e578063429b62e5146102875780634b0bddd2146102c1575b005b6101b361056b565b604051808260028111156101c357fe5b60ff16815260200191505060405180910390f35b6101a9600480360360208110156101ed57600080fd5b503561057b565b6101fc610b69565b60408051918252519081900360200190f35b6101a96004803603604081101561022457600080fd5b81019060208101813564010000000081111561023f57600080fd5b82018360208201111561025157600080fd5b8035906020019184602083028401116401000000008311171561027357600080fd5b9193509150356001600160a01b0316610b6f565b6102ad6004803603602081101561029d57600080fd5b50356001600160a01b0316610e43565b604080519115158252519081900360200190f35b6101a9600480360360408110156102d757600080fd5b506001600160a01b0381351690602001351515610e58565b6101fc610ed4565b6102ad610eda565b6101a96004803603602081101561031557600080fd5b81019060208101813564010000000081111561033057600080fd5b82018360208201111561034257600080fd5b8035906020019184602083028401116401000000008311171561036457600080fd5b509092509050610eea565b6101fc611502565b61037f611508565b604080516001600160a01b039092168252519081900360200190f35b6101a9600480360360608110156103b157600080fd5b50803590602081013590604001356001600160a01b0316611517565b6101fc600480360360408110156103e357600080fd5b50803590602001356001600160a01b0316611a84565b6104166004803603602081101561040f57600080fd5b5035611ab1565b6040805198895260208901979097528787019590955260608701939093526001600160801b0391821660808701521660a085015266ffffffffffffff1660c0840152151560e083015251908190036101000190f35b6101fc611b10565b61037f611b16565b6101a9611b25565b6101fc611c10565b6101a9611c94565b6104b6600480360360408110156104a957600080fd5b5080359060200135611db0565b6040805195151586526001600160a01b0390941660208601528484019290925260608401526080830152519081900360a00190f35b6101a96004803603602081101561050157600080fd5b50356001600160a01b0316611e81565b6101a96004803603602081101561052757600080fd5b5035611fc2565b6101a96123bd565b6101a96124b9565b6101fc612702565b6101a96004803603602081101561055c57600080fd5b5035612708565b61037f61284a565b601154600160a01b900460ff1681565b6002601154600160a01b900460ff16600281111561059557fe5b146105de5760408051600160e51b62461bcd02815260206004820152600e6024820152600160901b6d696e76616c69642073746174757302604482015290519081900360640190fd5b600b54600019016105ed6135f4565b506000818152600a6020908152604091829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546001600160801b0380821660808401819052600160801b9092041660a083015260059092015466ffffffffffffff811660c0830152600160381b900460ff16151560e0820152906106e65760118054600160a01b60ff0219169055610e104201600f5560c08101516040805184815266ffffffffffffff909216602083015280517f34fa627446f032cedc60a5521c4a8fbdd28f3ce106d8c6f6c17322ada873cebb9281900390910190a15050610b66565b60a081015160808201516001600160801b0391821685019116811115610716575060808101516001600160801b03165b61071e613656565b61072b8360600151612859565b9050610735613675565b61074b8460c0015166ffffffffffffff16612906565b60a08501519091506000906001016001600160801b03165b848111610913576000878152600a60209081526040808320848452600701909152902054600160a81b900466ffffffffffffff168061087b576107a4613656565b6000898152600a60209081526040808320868452600801909152902080546001909101546107d391908761296a565b905060005b600a8110156108745760008282600a81106107ef57fe5b60200201519050801561086b57808883600a811061080957fe5b602002018051909101905260019550600282101561086b57604080518c81526020810187905260018401818301526060810183905290517fed3e993150009d92ad8e13c907a93c9cee21fa0f33be6bb017ef7d0b54eb44b99181900360800190a15b506001016107d8565b505061090a565b60006108908266ffffffffffffff1686612af9565b90508015610908578560018203600a81106108a757fe5b60200201805160019081019091529350600381101561090857604080518a8152602081018590528082018390526001606082015290517fed3e993150009d92ad8e13c907a93c9cee21fa0f33be6bb017ef7d0b54eb44b99181900360800190a15b505b50600101610763565b506001600160801b0380851660a0870181905260808701519091161415610b0e576000805b6008811015610972576002816008811061094e57fe5b01548582600201600a811061095f57fe5b6020020151029190910190600101610938565b508061097c611c10565b10156109ca5760408051600160e51b62461bcd0281526020600482015260126024820152600160701b71696e73756666696369656e74206d6f6e657902604482015290519081900360640190fd5b600c54818110156109dc5760006109e0565b8181035b855160208701519192506127106114dc84028190049261029485029190910491908115610a1657818481610a1057fe5b04610a19565b60005b60208c01528015610a3357808381610a2d57fe5b04610a36565b60005b60408c0181905260208c015183029082028701018015610a5957600d8054820190555b60208c015115610a7d576020808d015160008f8152600a9092526040909120600101555b60408c015115610aa0576040808d015160008f8152600a60205291909120600201555b60118054600160a01b60ff0219169055610e10420163ffffffff16600f5560c08c0151604080518f815266ffffffffffffff909216602083015280517f34fa627446f032cedc60a5521c4a8fbdd28f3ce106d8c6f6c17322ada873cebb9281900390910190a1505050505050505b8015610b3057610b1d83612cb4565b6000878152600a60205260409020600301555b5050505060a001516000918252600a602052604090912060040180546001600160801b03928316600160801b0292169190911790555b50565b600e5481565b60115460408051600160e01b6323b872dd028152336004820152306024820152622dc6c0850260448201819052915185936001600160a01b0316916323b872dd9160648083019260209291908290030181600087803b158015610bd157600080fd5b505af1158015610be5573d6000803e3d6000fd5b505050506040513d6020811015610bfb57600080fd5b5051610c3b57604051600160e51b62461bcd02815260040180806020018281038252602281526020018061372a6022913960400191505060405180910390fd5b60006001600160a01b0384163314610c535783610c56565b60005b600b546000818152600a602052604081206004015492935090916001600160801b0316905b85811015610d8c576000898983818110610c9157fe5b905060200201359050610ca381612d38565b6040805160608082018352600080835233602080850182815266ffffffffffffff8881168789019081528c8652600a845288862060019c909c016001600160801b0381168088526007909d01855295899020975188549351915160ff1990941690151517610100600160a81b0319166101006001600160a01b039283160217600160a81b600160e01b031916600160a81b93909216929092021790955585518a815290810198909852928916878501529251929591927ff152feb5fe7641aae5c7f8e8187c26eef1a9d970f7c3794ac442f0842282d93f9281900390910190a250600101610c7b565b506000828152600a6020526040902060040180546001600160801b0319166001600160801b0383161790556010546001600160a01b03166360b0b0f0612710610bb8870204856040518363ffffffff1660e01b815260040180838152602001826001600160a01b03166001600160a01b0316815260200192505050600060405180830381600087803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b505050505050505050505050565b60016020526000908152604090205460ff1681565b6000546001600160a01b03163314610ea95760408051600160e51b62461bcd0281526020600482015260096024820152600160b91b683737ba1037bbb732b902604482015290519081900360640190fd5b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b600f5481565b601154600160a81b900460ff1681565b60028106158015610efc575060028110155b610f505760408051600160e51b62461bcd02815260206004820152600e60248201527f696e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b600082826000818110610f5f57fe5b602090810292909201356000818152600a90935260409092206004015491925050600160801b81046001600160801b03908116911614610fdd5760408051600160e51b62461bcd02815260206004820152600e6024820152600160901b6d696e76616c69642073746174757302604482015290519081900360640190fd5b6000818152600a6020526040812081906007018186866001818110610ffe57fe5b90506020020135815260200190815260200160002060000160019054906101000a90046001600160a01b03169050611034613675565b6000848152600a60205260409020600501546110589066ffffffffffffff16612906565b905060005b858110156113d35786868281811061107157fe5b90506020020135851461112f5786868281811061108a57fe5b602090810292909201356000818152600a90935260409092206004015491965050600160801b81046001600160801b039081169116146111085760408051600160e51b62461bcd02815260206004820152600e6024820152600160901b6d696e76616c69642073746174757302604482015290519081900360640190fd5b6000858152600a602052604090206005015461112c9066ffffffffffffff16612906565b91505b600087878360010181811061114057fe5b9050602002013590506111516136b2565b506000868152600a602090815260408083208484526007018252918290208251606081018452905460ff8116151580835261010082046001600160a01b031693830193909352600160a81b900466ffffffffffffff1692810192909252806111c4575060208101516001600160a01b0316155b806111e5575080602001516001600160a01b0316856001600160a01b031614155b156111f15750506113cb565b6000816040015166ffffffffffffff16600014156112e057611211613656565b6000898152600a602090815260408083208784526008019091529020805460019091015461124091908861296a565b905060015b600a81116112d95760008260018303600a811061125e57fe5b6020020151905080156112d05781600114156112905760008b8152600a602052604090206001015493909301926112d0565b81600214156112b75760008b8152600a6020526040902060020154810293909301926112d0565b80600260038403600881106112c857fe5b015402840193505b50600101611245565b505061135c565b60006112f9836040015166ffffffffffffff1687612af9565b9050806001141561131d576000898152600a6020526040902060010154915061135a565b806002141561133f576000898152600a6020526040902060020154915061135a565b801561135a576002600382036008811061135557fe5b015491505b505b80156113c7576000888152600a60209081526040808320868452600701825291829020805460ff1916600117905581518a81529081018590528151988301987f179780be10c742bdbc92cd0af59e83edeb067cd1954ef4d647827d8504c7c2ca929181900390910190a15b5050505b60020161105d565b506000831161141a5760408051600160e51b62461bcd0281526020600482015260086024820152600160c01b676e6f207072697a6502604482015290519081900360640190fd5b82600d54101561146c5760408051600160e51b62461bcd0281526020600482015260126024820152600160701b71696e73756666696369656e74206d6f6e657902604482015290519081900360640190fd5b600d8054849003905560115460408051600160e01b63a9059cbb0281526001600160a01b038581166004830152602482018790529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156114ce57600080fd5b505af11580156114e2573d6000803e3d6000fd5b505050506040513d60208110156114f857600080fd5b5050505050505050565b600d5481565b6010546001600160a01b031681565b60f883901c60ff60f085901c1660068210801590611536575060268211155b61158a5760408051600160e51b62461bcd02815260206004820152601260248201527f696e76616c6964207a6f6e6531436f756e740000000000000000000000000000604482015290519081900360640190fd5b6001811015801561159c575060088111155b6115f05760408051600160e51b62461bcd02815260206004820152601260248201527f696e76616c6964207a6f6e6532436f756e740000000000000000000000000000604482015290519081900360640190fd5b6000816115fe846006612fa7565b60115460408051600160e01b6323b872dd02815233600482015230602482015292909302622dc6c081026044840181905293519094506001600160a01b03909116916323b872dd9160648083019260209291908290030181600087803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b505050506040513d602081101561169157600080fd5b50516116d157604051600160e51b62461bcd02815260040180806020018281038252602281526020018061372a6022913960400191505060405180910390fd5b60ff60e888901c1660018110156117205760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b6002840160031b611734898360188461303f565b9150600882111561177d5760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b8060f80389901c60ff16915060018210156117d05760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b600385601e0387116117e7578587016002016117ea565b60205b901b90506118018983600388600301901b8461303f565b915084601e0386111561183057600385601e880301901b905061182d8883600388600301901b8461303f565b91505b60268211156118775760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b60006001600160a01b038816331461188f5787611892565b60005b600b546000818152600a60209081526040808320600481015482516060810184528581523381860190815281850187815260016001600160801b03948516019384168852600785018752858820925183549251915160ff1990931690151517610100600160a81b0319166101006001600160a01b039092169190910217600160a81b600160e01b031916600160a81b66ffffffffffffff9092169190910217905560089091019092529091208d9055919250908a15611977576000828152600a602090815260408083206001600160801b038516845260080190915290206001018b90555b604080518381526001600160801b03831660208201526001600160a01b03851681830152905133917ff152feb5fe7641aae5c7f8e8187c26eef1a9d970f7c3794ac442f0842282d93f919081900360600190a26000828152600a6020526040902060040180546001600160801b0319166001600160801b0383161790556010546001600160a01b03166360b0b0f0612710610bb8890204856040518363ffffffff1660e01b815260040180838152602001826001600160a01b03166001600160a01b0316815260200192505050600060405180830381600087803b158015611a5e57600080fd5b505af1158015611a72573d6000803e3d6000fd5b50505050505050505050505050505050565b6000828152600a602090815260408083206001600160a01b03851684526006019091529020545b92915050565b600a6020526000908152604090208054600182015460028301546003840154600485015460059095015493949293919290916001600160801b0380831692600160801b9004169066ffffffffffffff811690600160381b900460ff1688565b600b5481565b6000546001600160a01b031681565b6010546001600160a01b0316611b855760408051600160e51b62461bcd02815260206004820152601260248201527f66756e646572506f6f6c206e6f74207365740000000000000000000000000000604482015290519081900360640190fd5b60115460105460408051600160e01b63095ea7b30281526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015611be257600080fd5b505af1158015611bf6573d6000803e3d6000fd5b505050506040513d6020811015611c0c57600080fd5b5050565b600d5460115460408051600160e01b6370a082310281523060048201529051600093926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611c6257600080fd5b505afa158015611c76573d6000803e3d6000fd5b505050506040513d6020811015611c8c57600080fd5b505103905090565b601154600090600160a81b900460ff16611cb457600e54611c5c01611cbb565b603c600e54015b9050804211611d065760408051600160e51b62461bcd02815260206004820152600c6024820152600160a01b6b696e76616c69642074696d6502604482015290519081900360640190fd5b600b54600019016000908152600a6020526040902054611d25906130b0565b601154600160a81b900460ff16610b665760118054600160a81b60ff021916600160a81b17905560105460408051600160e11b63419ab82902815290516001600160a01b039092169163833570529160048082019260009290919082900301818387803b158015611d9557600080fd5b505af1158015611da9573d6000803e3d6000fd5b5050505050565b6000806000806000611dc06136b2565b506000878152600a602090815260408083208984526007018252918290208251606081018452905460ff81161515825261010081046001600160a01b031692820192909252600160a81b90910466ffffffffffffff1691810191909152611e256136d2565b506000978852600a60209081526040808a20988a526008909801815297879020875180890189528154808252600190920154908a0181905282519983015192909801519899919866ffffffffffffff1697909650945092505050565b6000546001600160a01b03163314611ed25760408051600160e51b62461bcd0281526020600482015260096024820152600160b91b683737ba1037bbb732b902604482015290519081900360640190fd5b6010546001600160a01b031615611f245760408051600160e51b62461bcd02815260206004820152600b6024820152600160aa1b6a185b1c9958591e481cd95d02604482015290519081900360640190fd5b601080546001600160a01b0319166001600160a01b0383811691821790925560115460408051600160e01b63095ea7b3028152600481019390935260001960248401525192169163095ea7b3916044808201926020929091908290030181600087803b158015611f9357600080fd5b505af1158015611fa7573d6000803e3d6000fd5b505050506040513d6020811015611fbd57600080fd5b505050565b6001601154600160a01b900460ff166002811115611fdc57fe5b146120255760408051600160e51b62461bcd02815260206004820152600e6024820152600160901b6d696e76616c69642073746174757302604482015290519081900360640190fd5b600b54600019016120353361318b565b801561204b5750601154600160a81b900460ff16155b1561219157603c600e5401421161209e5760408051600160e51b62461bcd02815260206004820152600c6024820152600160a01b6b696e76616c69642074696d6502604482015290519081900360640190fd5b6000818152600a602090815260408083208380526006019091529020546120c4836131c2565b1461210d5760408051600160e51b62461bcd02815260206004820152600e6024820152600160921b6d1a5b9d985b1a59081cd958dc995d02604482015290519081900360640190fd5b6000818152600a60208181526040808420848052600681018352908420849055928490525254820161213e816130b0565b6000828152600a6020908152604080832084905580518581529182019290925281517f18e3a2a1539c4d2325524f2c652bd26fea78b54a5861212876952caf2e00582b929181900390910190a1506122b4565b600e544211156121dd5760408051600160e51b62461bcd02815260206004820152600c6024820152600160a01b6b696e76616c69642074696d6502604482015290519081900360640190fd5b6000818152600a60209081526040808320338452600601909152902054612203836131c2565b1461224c5760408051600160e51b62461bcd02815260206004820152600e6024820152600160921b6d1a5b9d985b1a59081cd958dc995d02604482015290519081900360640190fd5b6000818152600a6020818152604080842033808652600682018452828620869055948690529282528254860190925581518481529081019290925280517f18e3a2a1539c4d2325524f2c652bd26fea78b54a5861212876952caf2e00582b9281900390910190a15b6000818152600a6020526040902060050154600160381b900460ff16611c0c576000818152600a60209081526040808320600501805467ff000000000000001916600160381b1790556011548151600160e01b63a9059cbb0281523360048201526305f5e100602482015291516001600160a01b039091169363a9059cbb93604480850194919392918390030190829087803b15801561235357600080fd5b505af1158015612367573d6000803e3d6000fd5b505050506040513d602081101561237d57600080fd5b50506040805182815233602082015281517fc7ad212fc37b0fda8af53154f4fc8674770b9d813b1863178c39c4ed2128edc1929181900390910190a15050565b601154600160a81b900460ff166123da57611c20600f54016123de565b600f545b42116124265760408051600160e51b62461bcd02815260206004820152600c6024820152600160a01b6b696e76616c69642074696d6502604482015290519081900360640190fd5b61242e6131e6565b601154600160a81b900460ff166124b75760118054600160a81b60ff021916600160a81b17905560105460408051600160e11b63419ab82902815290516001600160a01b039092169163833570529160048082019260009290919082900301818387803b15801561249e57600080fd5b505af11580156124b2573d6000803e3d6000fd5b505050505b565b6124c23361318b565b6125055760408051600160e51b62461bcd0281526020600482015260096024820152600160b91b683737ba1030b236b4b702604482015290519081900360640190fd5b601154600160a81b900460ff16156125675760408051600160e51b62461bcd02815260206004820152600f60248201527f6d6574686f642064697361626c65640000000000000000000000000000000000604482015290519081900360640190fd5b6001601154600160a01b900460ff16600281111561258157fe5b146125ca5760408051600160e51b62461bcd02815260206004820152600e6024820152600160901b6d696e76616c69642073746174757302604482015290519081900360640190fd5b60115460408051600160e01b6323b872dd0281523360048201523060248201526402540be400604482015290516001600160a01b03909216916323b872dd916064818101926020929091908290030181600087803b15801561262b57600080fd5b505af115801561263f573d6000803e3d6000fd5b505050506040513d602081101561265557600080fd5b505161269557604051600160e51b62461bcd02815260040180806020018281038252602281526020018061372a6022913960400191505060405180910390fd5b60118054600160a01b60ff0219169055600b80546000190190819055610e10420163ffffffff16600f556000818152600a6020526040902060050154600160381b900460ff1615610b66576000908152600a60205260409020600501805467ff0000000000000019169055565b600c5481565b6127113361318b565b80156127275750601154600160a81b900460ff16155b156127e557600f5442116127775760408051600160e51b62461bcd02815260206004820152600c6024820152600160a01b6b696e76616c69642074696d6502604482015290519081900360640190fd5b61277f6131e6565b600b80546000199081016000908152600a602090815260408083208380526006018252808320869055935484519301835282015281517f775cbcccd7fe28145ecb9139488663063065c5a215ba96419500f1bb1217661e929181900390910190a1610b66565b600b80546000908152600a60209081526040808320338085526006909101835292819020859055925483519081529081019190915281517f775cbcccd7fe28145ecb9139488663063065c5a215ba96419500f1bb1217661e929181900390910190a150565b6011546001600160a01b031681565b612861613656565b60405180610140016040528060f084901c61ffff16815260200160e084901c61ffff16815260200160d084901c61ffff16815260200160c084901c61ffff16815260200160a084901c63ffffffff168152602001608084901c63ffffffff168152602001606084901c63ffffffff168152602001604084901c63ffffffff168152602001602084901c63ffffffff1681526020018363ffffffff168152509050919050565b61290e613675565b612916613675565b60ff80841660c0830152600884901c811660a0830152601084901c81166080830152601884901c81166060830152602084811c82166040840152602885901c821690830152603084901c1681529050919050565b612972613656565b61297a613656565b60c083015160f886901c9060ff60f088901c16906002820160031b600060105b828110156129c85760ff60f88290038c901c16848114156129bf5760019250506129c8565b5060080161299a565b5060006129d886868d8d8d6132f6565b90508015612aea578185036001831415612a02576129f98288036005612fa7565b82026101208901525b6001821115612ae8578260011415612a3357612a218288036004612fa7565b612a2c836002612fa7565b0260e08901525b6002821115612ae8576000612a4b8389036003612fa7565b612a56846003612fa7565b0284810260c08b01528281026101008b015290506003831115612ae657612a808389036002612fa7565b612a8b846004612fa7565b0284810260808b015282810260a08b015290506004831115612ae657612ab48389036001612fa7565b612abf846005612fa7565b0284810260408b015282810260608b015290506005831115612ae657838952602089018290525b505b505b50949998505050505050505050565b8051602082015160408301516060840151608085015160a08601516000958695909490939092909160085b60308111612b8e5760ff8b821c1684811015612b625787811480612b4757508681145b80612b5157508581145b15612b5d578860010198505b612b85565b84811480612b6f57508381145b80612b7957508281145b15612b85578860010198505b50600801612b24565b5086612ba4576000975050505050505050611aab565b8860c001518a60ff161415612c40578660011415612bcc57600a975050505050505050611aab565b8660021415612be5576008975050505050505050611aab565b8660031415612bfe576007975050505050505050611aab565b8660041415612c17576005975050505050505050611aab565b8660051415612c30576003975050505050505050611aab565b6001975050505050505050611aab565b6003871015612c59576000975050505050505050611aab565b8660031415612c72576009975050505050505050611aab565b8660041415612c8b576006975050505050505050611aab565b8660051415612ca4576004975050505050505050611aab565b6002975050505050505050611aab565b61012081015160009060208360086020020151901b60408460076020020151901b60608560066020020151901b60808660056020020151901b60a08760046020020151901b60c08860036020020151901b60d08960026020020151901b60e08a60016020020151901b60f08b60006020020151901b17171717171717171792915050565b60ff603082901c811690602883901c811690602084901c811690601885901c811690601086901c811690600887901c811690871660018110801590612d7e575060088111155b612dc05760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b6026821115612e075760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b828211612e4c5760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b838311612e915760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b848411612ed65760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b858511612f1b5760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b868611612f605760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b60018710156114f85760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b600081831015612fb957506000611aab565b81831415612fc957506001611aab565b60008284038310612fdc57828403612fde565b825b90508060011415612ff25783915050611aab565b80840360018101906002015b8581116130115790810290600101612ffe565b50600160025b83811161302a5790810290600101613017565b5080828161303457fe5b049350505050611aab565b600083835b838110156130a65760ff60f882900388901c1682811161309c5760408051600160e51b62461bcd02815260206004820152600e602482015260008051602061374c833981519152604482015290519081900360640190fd5b9150600801613044565b5095945050505050565b60118054600160a01b60ff021916600160a11b1790556130ce6136ec565b6130d782613452565b905060006130e98360060160086135d9565b60010190508060088360056020020151901b60108460046020020151901b60188560036020020151901b60208660026006811061312257fe5b6020020151901b60288760016020020151901b60308860006020020151901b171717171717600a60006001600b5403815260200190815260200160002060050160006101000a81548166ffffffffffffff021916908366ffffffffffffff160217905550505050565b6001600160a01b03811660009081526001602052604081205460ff1680611aab5750506000546001600160a01b0390811691161490565b60408051602080820193909352815180820384018152908201909152805191012090565b6000601154600160a01b900460ff16600281111561320057fe5b146132495760408051600160e51b62461bcd02815260206004820152600e6024820152600160901b6d696e76616c69642073746174757302604482015290519081900360640190fd5b6000613253611c10565b90506305f5e1008110156132a95760408051600160e51b62461bcd0281526020600482015260126024820152600160701b71696e73756666696369656e74206d6f6e657902604482015290519081900360640190fd5b600b80546000908152600a6020526040902080546000194301400190558054600101905560118054600160a01b60ff021916600160a01b1790554260f001600e556305f5e0ff1901600c55565b8051602082015160408301516060840151608085015160a086015160009586959094909390929091866003601e8e90038f11613337578d8f0160020161333a565b60205b901b905060028d0160031b5b818110156133b55760ff60f88290038e901c1685811015613389578881148061336e57508781145b8061337857508681145b15613384578960010199505b6133ac565b8581148061339657508481145b806133a057508381145b156133ac578960010199505b50600801613346565b508c601e038e1115613440575060088d8d01601d19010260005b8181101561343e5760ff60f88290038d901c168581101561341257888114806133f757508781145b8061340157508681145b1561340d578960010199505b613435565b8581148061341f57508481145b8061342957508381145b15613435578960010199505b506008016133cf565b505b50959c9b505050505050505050505050565b61345a6136ec565b6134626136ec565b61346a61370a565b60005b600681101561350457600081613488838801846026036135d9565b019050600083836026811061349957fe5b6020020151905060008483602681106134ae57fe5b6020020151905081156134c157816134c6565b836001015b8584602681106134d257fe5b602002015280156134e357806134e8565b826001015b8585602681106134f457fe5b602002015250505060010161346d565b5060005b600681101561353b5781816026811061351d57fe5b602002015183826006811061352e57fe5b6020020152600101613508565b5060015b60068110156135d057600083826006811061355657fe5b60200201519050815b60008111801561358157508185600183036006811061357a57fe5b6020020151115b156135b45784600182036006811061359557fe5b60200201518582600681106135a657fe5b60200201526000190161355f565b818582600681106135c157fe5b6020020152505060010161353f565b50909392505050565b6000816135e5846131c2565b816135ec57fe5b069392505050565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160006001600160801b0316815260200160006001600160801b03168152602001600066ffffffffffffff1681526020016000151581525090565b604051806101400160405280600a906020820280388339509192915050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b604051806040016040528060008152602001600081525090565b6040518060c001604052806006906020820280388339509192915050565b604051806104c00160405280602690602082028038833950919291505056fe696e73756666696369656e74206d6f6e6579206f72206e6f7420617070726f766564696e76616c6964206e756d626572000000000000000000000000000000000000a165627a7a72305820b1048538cbbafc97df106db92d6a5ebccd84e57642875c04cd1d4acf5a6046100029")

    # TODO: TEST signature later
    def test_get_sign(self):
        address = in3.eth.Address("0x9E52Ee6Acd6E7F55e860844d487556f8Cbe2BAEE")
        message = "0x000000000"
        rpc = in3.eth.account.sign(address=address, data=message)
        print(rpc)

    # TODO: test it later
    def test_send_transaction(self):
        _from = in3.eth.Address("0x9E52Ee6Acd6E7F55e860844d487556f8Cbe2BAEE")
        transaction = in3.eth.Transaction(_from=_from)
        rpc = in3.client.send_transaction(transaction=transaction)
        print(rpc)

    def test_send_raw_transaction(self):
        # it will fail if we didn't update the nonce
        data = "0xf8674184ee6b2800831e848094a87bfff94092281a435c243e6e10f9a7fc594d26830f42408078a06f7d65ea8a4d69c41f8c824afb2b2e6d2bc2622d9d906b0ea8d45b39f4853931a062ad406c693c629d8a4a1af29d21e672d11c577a5a220267562bb10612c8eab7"
        rpc = self.client.eth.send_raw_transaction(data=data)
        print(rpc)

    def test_call(self):
        # _from = in3.eth.Address("0x132D2A325b8d588cFB9C1188daDdD4d00193E028")
        to = in3.eth.Address("0x7ceabea4AA352b10fBCa48e6E8015bC73687ABD4")
        transaction = in3.eth.Transaction(to=to)
        transaction.data = "0xa9c70686"
        rpc = self.client.eth.call(transaction=transaction, block_number=in3.BlockStatus.LATEST)
        print(rpc)

    def test_estimate_gas(self):
        _from = in3.eth.Address("0x132D2A325b8d588cFB9C1188daDdD4d00193E028")
        to = in3.eth.Address("0xF5FEb05CA1b451d60b343f5Ee12df2Cc4ce2691B")
        transaction = in3.eth.Transaction(_from=_from, to=to)

        transaction.data = "0x9a5c90aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000015094fc63f03e46fa211eb5708088dda62782dc4000000000000000000000000000000000000000000000004563918244f400000"
        rpc = self.client.eth.estimate_gas(transaction=transaction)
        self.assertIsNotNone(rpc)

    def test_get_block_by_hash(self):
        hash_obj = in3.eth.Hash("0x85cf1fedb76d721bddb4197735e77b31d40e8b4f2e4e30b44fa993141b0a85d6")
        rpc = self.client.eth.get_block_by_hash(hash_obj=hash_obj, get_full_block=False)

        self.assertIsNotNone(rpc.transactions)
        isEql = in3.eth.Hash("0x4d162e12901d1a0a0236793cc578db3b16117b276740e777c0e449478ce1239c").__eq__(rpc.transactions[0])
        self.assertTrue(isEql)
        self.assertEqual(rpc.number, 16089542)

    def test_get_block_by_hash_and_return_all_transactions_data(self):
        hash_obj = in3.eth.Hash("0x85cf1fedb76d721bddb4197735e77b31d40e8b4f2e4e30b44fa993141b0a85d6")
        rpc = self.client.eth.get_block_by_hash(hash_obj=hash_obj, get_full_block=True)

        self.assertIsNotNone(rpc.transactions)
        self.assertEqual(rpc.number, 16089542)
        self.assertIsNotNone(rpc.transactions[0].From)

    def test_get_block_by_number(self):
        number = 16027463
        rpc = self.client.eth.get_block_by_number(block_number=number)
        self.assertEqual(rpc.number, 16027463)

    def test_get_transaction_by_hash(self):
        hash_obj = in3.eth.Hash("0x5774bfec01b1fbc44d7b828bb77b789f7f2779b59e47b3c9f167a6e9946db2f1")
        rpc = self.client.eth.get_transaction_by_hash(tx_hash=hash_obj)
        self.assertEqual(rpc.From, "0x10f7fc1f91ba351f9c629c5947ad69bd03c05b96")

    def test_get_transaction_by_block_hash_and_index(self):
        hash_obj = in3.eth.Hash("0xc45d36c9ef34bdb174c065463aeb9775f729db63577add69e5f629917d77e646")
        index = 0
        result = self.client.eth.get_transaction_by_block_hash_and_index(block_hash=hash_obj, index=index)
        self.assertIsNotNone(result.blockHash)

    def test_get_transaction_by_block_number_and_index(self):
        block_number = 15385949
        index = 0
        result = self.client.eth.get_transaction_by_block_number_and_index(number=block_number, index=index)
        self.assertIsNotNone(result.blockHash)

    def test_get_transaction_receipt(self):
        hash_obj = in3.eth.Hash("0x5774bfec01b1fbc44d7b828bb77b789f7f2779b59e47b3c9f167a6e9946db2f1")
        result = self.client.eth.get_transaction_receipt(tx_hash=hash_obj)
        self.assertIsNotNone(result.blockHash)

    # removed
    # in3.model.exception.In3RequestException: {'code': -32600, 'message': 'method eth_pendingTransactions is not supported or unknown'}
    # def test_pending_transactions(self):
    #     result = self.client.eth.pending_transactions()
    #     print(result)

    # removed
    # in3.model.exception.In3RequestException: {'code': -4, 'message': '[0x1]:The Method cannot be verified with eth_nano!'}
    # def test_get_uncle_by_block_hash_and_index(self):
    #     #  check later for the  uncle by block
    #     hash_obj = in3.eth.Hash("0xa2163d7d18578e0995b1304003b857337eaa4534cbe64905c7bd45a744932f1f")
    #     index = 0
    #     result = self.client.eth.get_uncle_by_block_hash_and_index(block_hash=hash_obj, index=index)
    #     print(result)

    # removed
    # in3.model.exception.In3RequestException: {'code': -4, 'message': '[0x1]:The Method cannot be verified with eth_nano!'}
    # def test_get_uncle_by_block_number_and_index(self):
    #     #  check later for the  uncle by block
    #     block_number = 5066978
    #     index = 0
    #     result = self.client.eth.get_uncle_by_block_number_and_index(number=block_number, index=index)
    #     print(result)

    def test_new_filter(self):
        filter_obj = in3.eth.Filter(fromBlock=16095289)
        response = self.client.eth.new_filter(filter=filter_obj)
        self.assertEqual(response, "0x1")
        import time

        time.sleep(1)
        changes = self.client.eth.get_filter_logs(filter_id=response)
        print(changes)


    def test_new_block_filter(self):
        filter_obj = self.client.eth.new_block_filter()
        import time
        time.sleep(10)
        changes = self.client.eth.get_filter_changes(filter_id=filter_obj)
        for c in changes:
            block = self.client.eth.get_block_by_hash(c,False)
            self.assertIsNotNone(block.hash)
        self.assertTrue(len(changes)>0)
        self.assertEqual(filter_obj, "0x1")

    # removed
    # {'code': -3, 'message': 'The request could not be handled pending filter not supported'}
    # def test_new_pending_transaction_filter(self):
    #     filter_obj = self.client.eth.new_pending_transaction_filter()
    #     print(filter_obj)

    def test_uninstall_filter(self):
        filter_obj = in3.eth.Filter(fromBlock=in3.BlockStatus.LATEST, toBlock=in3.BlockStatus.EARLIEST,
                                    address=in3.eth.Address("0x9E52Ee6Acd6E7F55e860844d487556f8Cbe2BAEE"))
        response = self.client.eth.new_filter(filter=filter_obj)
        filter_id = int(response, 16)
        result = self.client.eth.uninstall_filter(filter_id=filter_id)
        self.assertTrue(result)

    # in3.model.exception.In3RequestException: {'code': -9, 'message': 'The request could not be handled failed to get filter changes internal error, call to eth_getLogs failed E'}
    def test_get_filter_changes(self):
        filter_obj = in3.eth.Filter(fromBlock=in3.BlockStatus.LATEST, toBlock=in3.BlockStatus.EARLIEST,
                                    address=in3.eth.Address("0x9E52Ee6Acd6E7F55e860844d487556f8Cbe2BAEE"))
        response = self.client.eth.new_filter(filter=filter_obj)
        filter_id = int(response, 16)
        filter = self.client.eth.get_filter_changes(filter_id=filter_id)
        print(filter)

    # removed
    # in3.model.exception.In3RequestException: {'code': -32600, 'message': 'method eth_getFilterLogs is not supported or unknown'}
    # def test_get_filter_logs(self):
    #     filter_obj = in3.eth.Filter(fromBlock=in3.BlockStatus.LATEST, toBlock=in3.BlockStatus.EARLIEST,
    #                                 address=in3.eth.Address("0x9E52Ee6Acd6E7F55e860844d487556f8Cbe2BAEE"))
    #     response = self.client.eth.new_filter(filter=filter_obj)
    #     filter_id = int(response, 16)
    #     result = self.client.eth.get_filter_logs(filter_id=filter_id)
    #     print(result)

    # TODO: Fix
    # in3.model.exception.In3RequestException: {'code': -32600, 'message': 'eth_getLogs : params[0].fromBlock (a quantity hex number) should match pattern "^0x(0|[a-fA-F1-9]+[a-fA-F0-9]*)$"'}
    def test_get_logs(self):
        filter_obj = in3.eth.Filter(fromBlock=16095389, toBlock=in3.BlockStatus.LATEST)
        logs = self.client.eth.get_logs(from_filter=filter_obj)
        self.assertTrue(logs)


    def test_prepare_transaction(self):

        aux = {
            'to': '0xA87BFff94092281a435c243e6e10F9a7Fc594d26',
            'value': 1000000,
            'gas': 2000000,
            'nonce': 78,
            'gasPrice': 5000000000,
            'chainId': hex(42)
        }

        to = Address("0xA87BFff94092281a435c243e6e10F9a7Fc594d26")
        transaction = Transaction(to=to, value=1000000, gasPrice=5000000000, gas=2000000, nonce=78)

        transaction_str = in3.client.prepare_transaction(transaction)
        print(transaction_str)


    def test_signature(self):
        size = "0xf868"
        transaction_signature ="4e85012a05f200831e848094a87bfff94092281a435c243e6e10f9a7fc594d26830f424080"
        appended = "77a00e812f21c773ffd8e39da74371dfd5d1f0b626af1fd4d493880e6face4acd094a025ad6e719ba2b51b3407ef6dc71e2f9dbe81ab37986c04d270c7330b715027d1"

        in3.client.send_transaction(size + transaction_signature + appended)

if __name__ == '__main__':
    unittest.main()
