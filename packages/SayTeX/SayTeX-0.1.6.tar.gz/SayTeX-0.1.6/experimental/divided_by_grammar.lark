?start: expression

?expression: fraction (" " expression)?
            | ignore (" " expression)?

?ignore: /[^ ]/+ -> ignorethis

?fraction: numerator " " over " " denominator

?over: "over" | "divided by"

?numerator: atom

?denominator: atom

?sum: product
    | sum " plus " product   -> add
    | sum " minus " product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div

?implicit_product: (variable_name " ")+ variable_name

?atom: NUMBER           
        | variable_name             -> var
        | "left parenthesis" " " parenthetically_valid " " "right parenthesis"
        | function_name " " "left parenthesis" " " parenthetically_valid " " "right parenthesis" -> function
        | implicit_product

?variable_name: /[^ ]/

?function_name: /[^ ]/+

?parenthetically_valid: no_parenthesis " "? ("left parenthesis " parenthetically_valid " right parenthesis")? " "? no_parenthesis

// disallow the word parenthesis, which can be done using the following ugly thing
//?no_parenthesis: (/([^p ][^ ]* | p[^a ][^ ]* | pa[^r ][^ ]* | par[^e ][^ ]*)/)? (" " /([^p ][^ ]* | p[^a ][^ ]* | pa[^r ][^ ]* | par[^e ][^ ]*)/)*
?no_parenthesis: "x"


%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS_INLINE

//%ignore WS_INLINE