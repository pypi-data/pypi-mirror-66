# coding: utf-8

"""
    ARLAS CITY API

    Upload GTFS data

    OpenAPI spec version: 0.0.2
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UploadReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job': 'Job',
        'agencies': 'list[str]',
        'statistics': 'FeedStatistics',
        'validation': 'ValidationResults'
    }

    attribute_map = {
        'job': 'job',
        'agencies': 'agencies',
        'statistics': 'statistics',
        'validation': 'validation'
    }

    def __init__(self, job=None, agencies=None, statistics=None, validation=None):
        """
        UploadReport - a model defined in Swagger
        """

        self._job = None
        self._agencies = None
        self._statistics = None
        self._validation = None

        if job is not None:
          self.job = job
        if agencies is not None:
          self.agencies = agencies
        if statistics is not None:
          self.statistics = statistics
        if validation is not None:
          self.validation = validation

    @property
    def job(self):
        """
        Gets the job of this UploadReport.

        :return: The job of this UploadReport.
        :rtype: Job
        """
        return self._job

    @job.setter
    def job(self, job):
        """
        Sets the job of this UploadReport.

        :param job: The job of this UploadReport.
        :type: Job
        """

        self._job = job

    @property
    def agencies(self):
        """
        Gets the agencies of this UploadReport.

        :return: The agencies of this UploadReport.
        :rtype: list[str]
        """
        return self._agencies

    @agencies.setter
    def agencies(self, agencies):
        """
        Sets the agencies of this UploadReport.

        :param agencies: The agencies of this UploadReport.
        :type: list[str]
        """

        self._agencies = agencies

    @property
    def statistics(self):
        """
        Gets the statistics of this UploadReport.

        :return: The statistics of this UploadReport.
        :rtype: FeedStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """
        Sets the statistics of this UploadReport.

        :param statistics: The statistics of this UploadReport.
        :type: FeedStatistics
        """

        self._statistics = statistics

    @property
    def validation(self):
        """
        Gets the validation of this UploadReport.

        :return: The validation of this UploadReport.
        :rtype: ValidationResults
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """
        Sets the validation of this UploadReport.

        :param validation: The validation of this UploadReport.
        :type: ValidationResults
        """

        self._validation = validation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UploadReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
