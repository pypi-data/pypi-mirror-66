# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetBaremetalOfferBetaResult:
    """
    A collection of values returned by getBaremetalOfferBeta.
    """
    def __init__(__self__, bandwidth=None, commercial_range=None, cpu=None, disks=None, id=None, include_disabled=None, memories=None, name=None, offer_id=None, stock=None, zone=None):
        if bandwidth and not isinstance(bandwidth, float):
            raise TypeError("Expected argument 'bandwidth' to be a float")
        __self__.bandwidth = bandwidth
        if commercial_range and not isinstance(commercial_range, str):
            raise TypeError("Expected argument 'commercial_range' to be a str")
        __self__.commercial_range = commercial_range
        if cpu and not isinstance(cpu, dict):
            raise TypeError("Expected argument 'cpu' to be a dict")
        __self__.cpu = cpu
        if disks and not isinstance(disks, list):
            raise TypeError("Expected argument 'disks' to be a list")
        __self__.disks = disks
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if include_disabled and not isinstance(include_disabled, bool):
            raise TypeError("Expected argument 'include_disabled' to be a bool")
        __self__.include_disabled = include_disabled
        if memories and not isinstance(memories, list):
            raise TypeError("Expected argument 'memories' to be a list")
        __self__.memories = memories
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if offer_id and not isinstance(offer_id, str):
            raise TypeError("Expected argument 'offer_id' to be a str")
        __self__.offer_id = offer_id
        if stock and not isinstance(stock, str):
            raise TypeError("Expected argument 'stock' to be a str")
        __self__.stock = stock
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetBaremetalOfferBetaResult(GetBaremetalOfferBetaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBaremetalOfferBetaResult(
            bandwidth=self.bandwidth,
            commercial_range=self.commercial_range,
            cpu=self.cpu,
            disks=self.disks,
            id=self.id,
            include_disabled=self.include_disabled,
            memories=self.memories,
            name=self.name,
            offer_id=self.offer_id,
            stock=self.stock,
            zone=self.zone)

def get_baremetal_offer_beta(include_disabled=None,name=None,offer_id=None,zone=None,opts=None):
    """
    Gets information about a baremetal offer. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).
    """
    __args__ = dict()


    __args__['includeDisabled'] = include_disabled
    __args__['name'] = name
    __args__['offerId'] = offer_id
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('scaleway:index/getBaremetalOfferBeta:getBaremetalOfferBeta', __args__, opts=opts).value

    return AwaitableGetBaremetalOfferBetaResult(
        bandwidth=__ret__.get('bandwidth'),
        commercial_range=__ret__.get('commercialRange'),
        cpu=__ret__.get('cpu'),
        disks=__ret__.get('disks'),
        id=__ret__.get('id'),
        include_disabled=__ret__.get('includeDisabled'),
        memories=__ret__.get('memories'),
        name=__ret__.get('name'),
        offer_id=__ret__.get('offerId'),
        stock=__ret__.get('stock'),
        zone=__ret__.get('zone'))
