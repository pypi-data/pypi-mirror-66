#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import CatalogObjects.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TGetCatalogDeltaRequest:
  """
  Attributes:
   - from_version
   - native_catalog_server_ptr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'from_version', None, None, ), # 1
    (2, TType.I64, 'native_catalog_server_ptr', None, None, ), # 2
  )

  def __init__(self, from_version=None, native_catalog_server_ptr=None,):
    self.from_version = from_version
    self.native_catalog_server_ptr = native_catalog_server_ptr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.from_version = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.native_catalog_server_ptr = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TGetCatalogDeltaRequest')
    if self.from_version is not None:
      oprot.writeFieldBegin('from_version', TType.I64, 1)
      oprot.writeI64(self.from_version)
      oprot.writeFieldEnd()
    if self.native_catalog_server_ptr is not None:
      oprot.writeFieldBegin('native_catalog_server_ptr', TType.I64, 2)
      oprot.writeI64(self.native_catalog_server_ptr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.from_version is None:
      raise TProtocol.TProtocolException(message='Required field from_version is unset!')
    if self.native_catalog_server_ptr is None:
      raise TProtocol.TProtocolException(message='Required field native_catalog_server_ptr is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.from_version)
    value = (value * 31) ^ hash(self.native_catalog_server_ptr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TGetCatalogDeltaResponse:
  """
  Attributes:
   - max_catalog_version
   - updated_objects_deprecated
   - deleted_objects_deprecated
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'max_catalog_version', None, None, ), # 1
    (2, TType.LIST, 'updated_objects_deprecated', (TType.STRUCT,(CatalogObjects.ttypes.TCatalogObject, CatalogObjects.ttypes.TCatalogObject.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'deleted_objects_deprecated', (TType.STRUCT,(CatalogObjects.ttypes.TCatalogObject, CatalogObjects.ttypes.TCatalogObject.thrift_spec)), None, ), # 3
  )

  def __init__(self, max_catalog_version=None, updated_objects_deprecated=None, deleted_objects_deprecated=None,):
    self.max_catalog_version = max_catalog_version
    self.updated_objects_deprecated = updated_objects_deprecated
    self.deleted_objects_deprecated = deleted_objects_deprecated

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.max_catalog_version = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.updated_objects_deprecated = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = CatalogObjects.ttypes.TCatalogObject()
            _elem5.read(iprot)
            self.updated_objects_deprecated.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.deleted_objects_deprecated = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = CatalogObjects.ttypes.TCatalogObject()
            _elem11.read(iprot)
            self.deleted_objects_deprecated.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TGetCatalogDeltaResponse')
    if self.max_catalog_version is not None:
      oprot.writeFieldBegin('max_catalog_version', TType.I64, 1)
      oprot.writeI64(self.max_catalog_version)
      oprot.writeFieldEnd()
    if self.updated_objects_deprecated is not None:
      oprot.writeFieldBegin('updated_objects_deprecated', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.updated_objects_deprecated))
      for iter12 in self.updated_objects_deprecated:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.deleted_objects_deprecated is not None:
      oprot.writeFieldBegin('deleted_objects_deprecated', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.deleted_objects_deprecated))
      for iter13 in self.deleted_objects_deprecated:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.max_catalog_version is None:
      raise TProtocol.TProtocolException(message='Required field max_catalog_version is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.max_catalog_version)
    value = (value * 31) ^ hash(self.updated_objects_deprecated)
    value = (value * 31) ^ hash(self.deleted_objects_deprecated)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
