#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TExtractFromZipParams:
  """
  Attributes:
   - archive_file
   - destination_dir
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'archive_file', None, None, ), # 1
    (2, TType.STRING, 'destination_dir', None, None, ), # 2
  )

  def __init__(self, archive_file=None, destination_dir=None,):
    self.archive_file = archive_file
    self.destination_dir = destination_dir

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.archive_file = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.destination_dir = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TExtractFromZipParams')
    if self.archive_file is not None:
      oprot.writeFieldBegin('archive_file', TType.STRING, 1)
      oprot.writeString(self.archive_file)
      oprot.writeFieldEnd()
    if self.destination_dir is not None:
      oprot.writeFieldBegin('destination_dir', TType.STRING, 2)
      oprot.writeString(self.destination_dir)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.archive_file is None:
      raise TProtocol.TProtocolException(message='Required field archive_file is unset!')
    if self.destination_dir is None:
      raise TProtocol.TProtocolException(message='Required field destination_dir is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.archive_file)
    value = (value * 31) ^ hash(self.destination_dir)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
