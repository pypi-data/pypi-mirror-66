# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _opendbpy
else:
    import _opendbpy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _opendbpy.delete_SwigPyIterator

    def value(self):
        return _opendbpy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _opendbpy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _opendbpy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _opendbpy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _opendbpy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _opendbpy.SwigPyIterator_copy(self)

    def next(self):
        return _opendbpy.SwigPyIterator_next(self)

    def __next__(self):
        return _opendbpy.SwigPyIterator___next__(self)

    def previous(self):
        return _opendbpy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _opendbpy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _opendbpy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _opendbpy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _opendbpy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _opendbpy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _opendbpy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _opendbpy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _opendbpy:
_opendbpy.SwigPyIterator_swigregister(SwigPyIterator)

class vector_str(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _opendbpy.vector_str_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _opendbpy.vector_str___nonzero__(self)

    def __bool__(self):
        return _opendbpy.vector_str___bool__(self)

    def __len__(self):
        return _opendbpy.vector_str___len__(self)

    def __getslice__(self, i, j):
        return _opendbpy.vector_str___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _opendbpy.vector_str___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _opendbpy.vector_str___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _opendbpy.vector_str___delitem__(self, *args)

    def __getitem__(self, *args):
        return _opendbpy.vector_str___getitem__(self, *args)

    def __setitem__(self, *args):
        return _opendbpy.vector_str___setitem__(self, *args)

    def pop(self):
        return _opendbpy.vector_str_pop(self)

    def append(self, x):
        return _opendbpy.vector_str_append(self, x)

    def empty(self):
        return _opendbpy.vector_str_empty(self)

    def size(self):
        return _opendbpy.vector_str_size(self)

    def swap(self, v):
        return _opendbpy.vector_str_swap(self, v)

    def begin(self):
        return _opendbpy.vector_str_begin(self)

    def end(self):
        return _opendbpy.vector_str_end(self)

    def rbegin(self):
        return _opendbpy.vector_str_rbegin(self)

    def rend(self):
        return _opendbpy.vector_str_rend(self)

    def clear(self):
        return _opendbpy.vector_str_clear(self)

    def get_allocator(self):
        return _opendbpy.vector_str_get_allocator(self)

    def pop_back(self):
        return _opendbpy.vector_str_pop_back(self)

    def erase(self, *args):
        return _opendbpy.vector_str_erase(self, *args)

    def __init__(self, *args):
        _opendbpy.vector_str_swiginit(self, _opendbpy.new_vector_str(*args))

    def push_back(self, x):
        return _opendbpy.vector_str_push_back(self, x)

    def front(self):
        return _opendbpy.vector_str_front(self)

    def back(self):
        return _opendbpy.vector_str_back(self)

    def assign(self, n, x):
        return _opendbpy.vector_str_assign(self, n, x)

    def resize(self, *args):
        return _opendbpy.vector_str_resize(self, *args)

    def insert(self, *args):
        return _opendbpy.vector_str_insert(self, *args)

    def reserve(self, n):
        return _opendbpy.vector_str_reserve(self, n)

    def capacity(self):
        return _opendbpy.vector_str_capacity(self)
    __swig_destroy__ = _opendbpy.delete_vector_str

# Register vector_str in _opendbpy:
_opendbpy.vector_str_swigregister(vector_str)

class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opendbpy.Point_swiginit(self, _opendbpy.new_Point(*args))

    def __eq__(self, p):
        return _opendbpy.Point___eq__(self, p)

    def __ne__(self, p):
        return _opendbpy.Point___ne__(self, p)

    def __lt__(self, p):
        return _opendbpy.Point___lt__(self, p)

    def getX(self):
        return _opendbpy.Point_getX(self)

    def getY(self):
        return _opendbpy.Point_getY(self)

    def setX(self, x):
        return _opendbpy.Point_setX(self, x)

    def setY(self, y):
        return _opendbpy.Point_setY(self, y)

    def rotate90(self):
        return _opendbpy.Point_rotate90(self)

    def rotate180(self):
        return _opendbpy.Point_rotate180(self)

    def rotate270(self):
        return _opendbpy.Point_rotate270(self)

    def x(self, *args):
        return _opendbpy.Point_x(self, *args)

    def y(self, *args):
        return _opendbpy.Point_y(self, *args)

    @staticmethod
    def crossProduct(p0, p1, p2):
        return _opendbpy.Point_crossProduct(p0, p1, p2)
    COLINEAR = _opendbpy.Point_COLINEAR
    CW = _opendbpy.Point_CW
    CCW = _opendbpy.Point_CCW

    @staticmethod
    def rotation(p0, p1, p2):
        return _opendbpy.Point_rotation(p0, p1, p2)

    @staticmethod
    def squaredDistance(p0, p1):
        return _opendbpy.Point_squaredDistance(p0, p1)

    @staticmethod
    def manhattanDistance(p0, p1):
        return _opendbpy.Point_manhattanDistance(p0, p1)
    __swig_destroy__ = _opendbpy.delete_Point

# Register Point in _opendbpy:
_opendbpy.Point_swigregister(Point)

def Point_crossProduct(p0, p1, p2):
    return _opendbpy.Point_crossProduct(p0, p1, p2)

def Point_rotation(p0, p1, p2):
    return _opendbpy.Point_rotation(p0, p1, p2)

def Point_squaredDistance(p0, p1):
    return _opendbpy.Point_squaredDistance(p0, p1)

def Point_manhattanDistance(p0, p1):
    return _opendbpy.Point_manhattanDistance(p0, p1)

class Rect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opendbpy.Rect_swiginit(self, _opendbpy.new_Rect(*args))

    def __eq__(self):
        return _opendbpy.Rect___eq__(self)

    def __ne__(self):
        return _opendbpy.Rect___ne__(self)

    def __lt__(self):
        return _opendbpy.Rect___lt__(self)

    def init(self, x1, y1, x2, y2):
        return _opendbpy.Rect_init(self, x1, y1, x2, y2)

    def reset(self, x1, y1, x2, y2):
        return _opendbpy.Rect_reset(self, x1, y1, x2, y2)

    def moveTo(self, x, y):
        return _opendbpy.Rect_moveTo(self, x, y)

    def moveDelta(self, dx, dy):
        return _opendbpy.Rect_moveDelta(self, dx, dy)

    def mergeInit(self):
        return _opendbpy.Rect_mergeInit(self)

    def minDXDY(self):
        return _opendbpy.Rect_minDXDY(self)

    def maxDXDY(self):
        return _opendbpy.Rect_maxDXDY(self)

    def getDir(self):
        return _opendbpy.Rect_getDir(self)

    def set_xlo(self, x1):
        return _opendbpy.Rect_set_xlo(self, x1)

    def set_xhi(self, x1):
        return _opendbpy.Rect_set_xhi(self, x1)

    def set_ylo(self, x1):
        return _opendbpy.Rect_set_ylo(self, x1)

    def set_yhi(self, x1):
        return _opendbpy.Rect_set_yhi(self, x1)

    def xMin(self):
        return _opendbpy.Rect_xMin(self)

    def yMin(self):
        return _opendbpy.Rect_yMin(self)

    def xMax(self):
        return _opendbpy.Rect_xMax(self)

    def yMax(self):
        return _opendbpy.Rect_yMax(self)

    def dx(self):
        return _opendbpy.Rect_dx(self)

    def dy(self):
        return _opendbpy.Rect_dy(self)

    def ll(self):
        return _opendbpy.Rect_ll(self)

    def ul(self):
        return _opendbpy.Rect_ul(self)

    def ur(self):
        return _opendbpy.Rect_ur(self)

    def lr(self):
        return _opendbpy.Rect_lr(self)

    def low(self):
        return _opendbpy.Rect_low(self)

    def high(self):
        return _opendbpy.Rect_high(self)

    def intersects(self, *args):
        return _opendbpy.Rect_intersects(self, *args)

    def overlaps(self, *args):
        return _opendbpy.Rect_overlaps(self, *args)

    def contains(self):
        return _opendbpy.Rect_contains(self)

    def inside(self):
        return _opendbpy.Rect_inside(self)

    def merge(self, *args):
        return _opendbpy.Rect_merge(self, *args)

    def intersection(self, result):
        return _opendbpy.Rect_intersection(self, result)

    def intersect(self):
        return _opendbpy.Rect_intersect(self)

    def area(self):
        return _opendbpy.Rect_area(self)

    def margin(self):
        return _opendbpy.Rect_margin(self)

    def notice(self, *args):
        return _opendbpy.Rect_notice(self, *args)

    def printf(self, *args):
        return _opendbpy.Rect_printf(self, *args)

    def _print(self, *args):
        return _opendbpy.Rect__print(self, *args)
    __swig_destroy__ = _opendbpy.delete_Rect

# Register Rect in _opendbpy:
_opendbpy.Rect_swigregister(Rect)

ADS_MAX_CORNER = _opendbpy.ADS_MAX_CORNER
class dbProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STRING_PROP = _opendbpy.dbProperty_STRING_PROP
    BOOL_PROP = _opendbpy.dbProperty_BOOL_PROP
    INT_PROP = _opendbpy.dbProperty_INT_PROP
    DOUBLE_PROP = _opendbpy.dbProperty_DOUBLE_PROP

    def getType(self):
        return _opendbpy.dbProperty_getType(self)

    def getName(self):
        return _opendbpy.dbProperty_getName(self)

    def getPropOwner(self):
        return _opendbpy.dbProperty_getPropOwner(self)

    @staticmethod
    def find(*args):
        return _opendbpy.dbProperty_find(*args)

    @staticmethod
    def destroyProperties(obj):
        return _opendbpy.dbProperty_destroyProperties(obj)

    @staticmethod
    def getProperties(object):
        return _opendbpy.dbProperty_getProperties(object)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbProperty_destroy(*args)

    @staticmethod
    def writeProperties(object, out):
        return _opendbpy.dbProperty_writeProperties(object, out)

    @staticmethod
    def writePropValue(prop, out):
        return _opendbpy.dbProperty_writePropValue(prop, out)

    def __init__(self):
        _opendbpy.dbProperty_swiginit(self, _opendbpy.new_dbProperty())
    __swig_destroy__ = _opendbpy.delete_dbProperty

# Register dbProperty in _opendbpy:
_opendbpy.dbProperty_swigregister(dbProperty)

def dbProperty_find(*args):
    return _opendbpy.dbProperty_find(*args)

def dbProperty_destroyProperties(obj):
    return _opendbpy.dbProperty_destroyProperties(obj)

def dbProperty_getProperties(object):
    return _opendbpy.dbProperty_getProperties(object)

def dbProperty_destroy(*args):
    return _opendbpy.dbProperty_destroy(*args)

def dbProperty_writeProperties(object, out):
    return _opendbpy.dbProperty_writeProperties(object, out)

def dbProperty_writePropValue(prop, out):
    return _opendbpy.dbProperty_writePropValue(prop, out)

class dbBoolProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _opendbpy.dbBoolProperty_getValue(self)

    def setValue(self, value):
        return _opendbpy.dbBoolProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _opendbpy.dbBoolProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _opendbpy.dbBoolProperty_find(object, name)

    def __init__(self):
        _opendbpy.dbBoolProperty_swiginit(self, _opendbpy.new_dbBoolProperty())
    __swig_destroy__ = _opendbpy.delete_dbBoolProperty

# Register dbBoolProperty in _opendbpy:
_opendbpy.dbBoolProperty_swigregister(dbBoolProperty)

def dbBoolProperty_create(object, name, value):
    return _opendbpy.dbBoolProperty_create(object, name, value)

def dbBoolProperty_find(object, name):
    return _opendbpy.dbBoolProperty_find(object, name)

class dbStringProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _opendbpy.dbStringProperty_getValue(self)

    def setValue(self, value):
        return _opendbpy.dbStringProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _opendbpy.dbStringProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _opendbpy.dbStringProperty_find(object, name)

    def __init__(self):
        _opendbpy.dbStringProperty_swiginit(self, _opendbpy.new_dbStringProperty())
    __swig_destroy__ = _opendbpy.delete_dbStringProperty

# Register dbStringProperty in _opendbpy:
_opendbpy.dbStringProperty_swigregister(dbStringProperty)

def dbStringProperty_create(object, name, value):
    return _opendbpy.dbStringProperty_create(object, name, value)

def dbStringProperty_find(object, name):
    return _opendbpy.dbStringProperty_find(object, name)

class dbIntProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _opendbpy.dbIntProperty_getValue(self)

    def setValue(self, value):
        return _opendbpy.dbIntProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _opendbpy.dbIntProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _opendbpy.dbIntProperty_find(object, name)

    def __init__(self):
        _opendbpy.dbIntProperty_swiginit(self, _opendbpy.new_dbIntProperty())
    __swig_destroy__ = _opendbpy.delete_dbIntProperty

# Register dbIntProperty in _opendbpy:
_opendbpy.dbIntProperty_swigregister(dbIntProperty)

def dbIntProperty_create(object, name, value):
    return _opendbpy.dbIntProperty_create(object, name, value)

def dbIntProperty_find(object, name):
    return _opendbpy.dbIntProperty_find(object, name)

class dbDoubleProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _opendbpy.dbDoubleProperty_getValue(self)

    def setValue(self, value):
        return _opendbpy.dbDoubleProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _opendbpy.dbDoubleProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _opendbpy.dbDoubleProperty_find(object, name)

    def __init__(self):
        _opendbpy.dbDoubleProperty_swiginit(self, _opendbpy.new_dbDoubleProperty())
    __swig_destroy__ = _opendbpy.delete_dbDoubleProperty

# Register dbDoubleProperty in _opendbpy:
_opendbpy.dbDoubleProperty_swigregister(dbDoubleProperty)

def dbDoubleProperty_create(object, name, value):
    return _opendbpy.dbDoubleProperty_create(object, name, value)

def dbDoubleProperty_find(object, name):
    return _opendbpy.dbDoubleProperty_find(object, name)

class dbDatabase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLibs(self):
        return _opendbpy.dbDatabase_getLibs(self)

    def findLib(self, name):
        return _opendbpy.dbDatabase_findLib(self, name)

    def findMaster(self, name):
        return _opendbpy.dbDatabase_findMaster(self, name)

    def getChip(self):
        return _opendbpy.dbDatabase_getChip(self)

    def getTech(self):
        return _opendbpy.dbDatabase_getTech(self)

    def getChips(self):
        return _opendbpy.dbDatabase_getChips(self)

    def getNumberOfMasters(self):
        return _opendbpy.dbDatabase_getNumberOfMasters(self)

    def read(self, file):
        return _opendbpy.dbDatabase_read(self, file)

    def write(self, file):
        return _opendbpy.dbDatabase_write(self, file)

    def writeTech(self, file):
        return _opendbpy.dbDatabase_writeTech(self, file)

    def writeLib(self, file, lib):
        return _opendbpy.dbDatabase_writeLib(self, file, lib)

    def writeLibs(self, file):
        return _opendbpy.dbDatabase_writeLibs(self, file)

    def writeBlock(self, file, block):
        return _opendbpy.dbDatabase_writeBlock(self, file, block)

    def writeChip(self, file):
        return _opendbpy.dbDatabase_writeChip(self, file)

    def writeWires(self, file, block):
        return _opendbpy.dbDatabase_writeWires(self, file, block)

    def writeNets(self, file, block):
        return _opendbpy.dbDatabase_writeNets(self, file, block)

    def writeParasitics(self, file, block):
        return _opendbpy.dbDatabase_writeParasitics(self, file, block)

    def readTech(self, file):
        return _opendbpy.dbDatabase_readTech(self, file)

    def readLib(self, file, arg3):
        return _opendbpy.dbDatabase_readLib(self, file, arg3)

    def readLibs(self, file):
        return _opendbpy.dbDatabase_readLibs(self, file)

    def readBlock(self, file, block):
        return _opendbpy.dbDatabase_readBlock(self, file, block)

    def readWires(self, file, block):
        return _opendbpy.dbDatabase_readWires(self, file, block)

    def readNets(self, file, block):
        return _opendbpy.dbDatabase_readNets(self, file, block)

    def readParasitics(self, file, block):
        return _opendbpy.dbDatabase_readParasitics(self, file, block)

    def readChip(self, file):
        return _opendbpy.dbDatabase_readChip(self, file)

    @staticmethod
    def beginEco(block):
        return _opendbpy.dbDatabase_beginEco(block)

    @staticmethod
    def endEco(block):
        return _opendbpy.dbDatabase_endEco(block)

    @staticmethod
    def ecoEmpty(block):
        return _opendbpy.dbDatabase_ecoEmpty(block)

    @staticmethod
    def readEco(block, stream):
        return _opendbpy.dbDatabase_readEco(block, stream)

    @staticmethod
    def writeEco(block, stream):
        return _opendbpy.dbDatabase_writeEco(block, stream)

    @staticmethod
    def checkEco(block):
        return _opendbpy.dbDatabase_checkEco(block)

    @staticmethod
    def commitEco(block):
        return _opendbpy.dbDatabase_commitEco(block)

    def clear(self):
        return _opendbpy.dbDatabase_clear(self)

    @staticmethod
    def create():
        return _opendbpy.dbDatabase_create()

    @staticmethod
    def destroy(db):
        return _opendbpy.dbDatabase_destroy(db)

    @staticmethod
    def duplicate(db):
        return _opendbpy.dbDatabase_duplicate(db)

    @staticmethod
    def diff(db0, db1, file, indent_per_level):
        return _opendbpy.dbDatabase_diff(db0, db1, file, indent_per_level)

    @staticmethod
    def getDatabase(oid):
        return _opendbpy.dbDatabase_getDatabase(oid)

    def __init__(self):
        _opendbpy.dbDatabase_swiginit(self, _opendbpy.new_dbDatabase())
    __swig_destroy__ = _opendbpy.delete_dbDatabase

# Register dbDatabase in _opendbpy:
_opendbpy.dbDatabase_swigregister(dbDatabase)

def dbDatabase_beginEco(block):
    return _opendbpy.dbDatabase_beginEco(block)

def dbDatabase_endEco(block):
    return _opendbpy.dbDatabase_endEco(block)

def dbDatabase_ecoEmpty(block):
    return _opendbpy.dbDatabase_ecoEmpty(block)

def dbDatabase_readEco(block, stream):
    return _opendbpy.dbDatabase_readEco(block, stream)

def dbDatabase_writeEco(block, stream):
    return _opendbpy.dbDatabase_writeEco(block, stream)

def dbDatabase_checkEco(block):
    return _opendbpy.dbDatabase_checkEco(block)

def dbDatabase_commitEco(block):
    return _opendbpy.dbDatabase_commitEco(block)

def dbDatabase_create():
    return _opendbpy.dbDatabase_create()

def dbDatabase_destroy(db):
    return _opendbpy.dbDatabase_destroy(db)

def dbDatabase_duplicate(db):
    return _opendbpy.dbDatabase_duplicate(db)

def dbDatabase_diff(db0, db1, file, indent_per_level):
    return _opendbpy.dbDatabase_diff(db0, db1, file, indent_per_level)

def dbDatabase_getDatabase(oid):
    return _opendbpy.dbDatabase_getDatabase(oid)

class dbBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def xMin(self):
        return _opendbpy.dbBox_xMin(self)

    def yMin(self):
        return _opendbpy.dbBox_yMin(self)

    def xMax(self):
        return _opendbpy.dbBox_xMax(self)

    def yMax(self):
        return _opendbpy.dbBox_yMax(self)

    def isVia(self):
        return _opendbpy.dbBox_isVia(self)

    def getTechVia(self):
        return _opendbpy.dbBox_getTechVia(self)

    def getBlockVia(self):
        return _opendbpy.dbBox_getBlockVia(self)

    def getViaXY(self):
        return _opendbpy.dbBox_getViaXY(self)

    def getViaBoxes(self, boxes):
        return _opendbpy.dbBox_getViaBoxes(self, boxes)

    def getDir(self):
        return _opendbpy.dbBox_getDir(self)

    def getDX(self):
        return _opendbpy.dbBox_getDX(self)

    def getDY(self):
        return _opendbpy.dbBox_getDY(self)

    def getWidth(self, dir=1):
        return _opendbpy.dbBox_getWidth(self, dir)

    def getLength(self, dir=1):
        return _opendbpy.dbBox_getLength(self, dir)

    def setVisited(self, value):
        return _opendbpy.dbBox_setVisited(self, value)

    def isVisited(self):
        return _opendbpy.dbBox_isVisited(self)

    def setMarked(self, value):
        return _opendbpy.dbBox_setMarked(self, value)

    def isMarked(self):
        return _opendbpy.dbBox_isMarked(self)

    def getBoxOwner(self):
        return _opendbpy.dbBox_getBoxOwner(self)

    def getOwnerType(self):
        return _opendbpy.dbBox_getOwnerType(self)

    def getTechLayer(self):
        return _opendbpy.dbBox_getTechLayer(self)

    @staticmethod
    def create(*args):
        return _opendbpy.dbBox_create(*args)

    @staticmethod
    def getBox(*args):
        return _opendbpy.dbBox_getBox(*args)

    def __init__(self):
        _opendbpy.dbBox_swiginit(self, _opendbpy.new_dbBox())
    __swig_destroy__ = _opendbpy.delete_dbBox

# Register dbBox in _opendbpy:
_opendbpy.dbBox_swigregister(dbBox)

def dbBox_create(*args):
    return _opendbpy.dbBox_create(*args)

def dbBox_getBox(*args):
    return _opendbpy.dbBox_getBox(*args)

class dbSBox(dbBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNDEFINED = _opendbpy.dbSBox_UNDEFINED
    HORIZONTAL = _opendbpy.dbSBox_HORIZONTAL
    VERTICAL = _opendbpy.dbSBox_VERTICAL

    def getWireShapeType(self):
        return _opendbpy.dbSBox_getWireShapeType(self)

    def getDirection(self):
        return _opendbpy.dbSBox_getDirection(self)

    def getSWire(self):
        return _opendbpy.dbSBox_getSWire(self)

    @staticmethod
    def create(*args):
        return _opendbpy.dbSBox_create(*args)

    @staticmethod
    def getSBox(block, oid):
        return _opendbpy.dbSBox_getSBox(block, oid)

    def __init__(self):
        _opendbpy.dbSBox_swiginit(self, _opendbpy.new_dbSBox())
    __swig_destroy__ = _opendbpy.delete_dbSBox

# Register dbSBox in _opendbpy:
_opendbpy.dbSBox_swigregister(dbSBox)

def dbSBox_create(*args):
    return _opendbpy.dbSBox_create(*args)

def dbSBox_getSBox(block, oid):
    return _opendbpy.dbSBox_getSBox(block, oid)

class dbChip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBlock(self):
        return _opendbpy.dbChip_getBlock(self)

    @staticmethod
    def create(db):
        return _opendbpy.dbChip_create(db)

    @staticmethod
    def getChip(db, oid):
        return _opendbpy.dbChip_getChip(db, oid)

    @staticmethod
    def destroy(chip):
        return _opendbpy.dbChip_destroy(chip)

    def __init__(self):
        _opendbpy.dbChip_swiginit(self, _opendbpy.new_dbChip())
    __swig_destroy__ = _opendbpy.delete_dbChip

# Register dbChip in _opendbpy:
_opendbpy.dbChip_swigregister(dbChip)

def dbChip_create(db):
    return _opendbpy.dbChip_create(db)

def dbChip_getChip(db, oid):
    return _opendbpy.dbChip_getChip(db, oid)

def dbChip_destroy(chip):
    return _opendbpy.dbChip_destroy(chip)

class dbBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbBlock_getName(self)

    def getConstName(self):
        return _opendbpy.dbBlock_getConstName(self)

    def getBBox(self):
        return _opendbpy.dbBlock_getBBox(self)

    def getChip(self):
        return _opendbpy.dbBlock_getChip(self)

    def getDataBase(self):
        return _opendbpy.dbBlock_getDataBase(self)

    def getParent(self):
        return _opendbpy.dbBlock_getParent(self)

    def getParentInst(self):
        return _opendbpy.dbBlock_getParentInst(self)

    def getChildren(self):
        return _opendbpy.dbBlock_getChildren(self)

    def findChild(self, name):
        return _opendbpy.dbBlock_findChild(self, name)

    def getBTerms(self):
        return _opendbpy.dbBlock_getBTerms(self)

    def findBTerm(self, name):
        return _opendbpy.dbBlock_findBTerm(self, name)

    def getITerms(self):
        return _opendbpy.dbBlock_getITerms(self)

    def getInsts(self):
        return _opendbpy.dbBlock_getInsts(self)

    def findInst(self, name):
        return _opendbpy.dbBlock_findInst(self, name)

    def findSomeInst(self, names, insts):
        return _opendbpy.dbBlock_findSomeInst(self, names, insts)

    def findSomeMaster(self, names, masters):
        return _opendbpy.dbBlock_findSomeMaster(self, names, masters)

    def findITerm(self, name):
        return _opendbpy.dbBlock_findITerm(self, name)

    def getObstructions(self):
        return _opendbpy.dbBlock_getObstructions(self)

    def getBlockages(self):
        return _opendbpy.dbBlock_getBlockages(self)

    def getNets(self):
        return _opendbpy.dbBlock_getNets(self)

    def getCapNodes(self):
        return _opendbpy.dbBlock_getCapNodes(self)

    def getRSegs(self):
        return _opendbpy.dbBlock_getRSegs(self)

    def findNet(self, name):
        return _opendbpy.dbBlock_findNet(self, name)

    def findSomeNet(self, names, nets):
        return _opendbpy.dbBlock_findSomeNet(self, names, nets)

    def saveLef(self, filename):
        return _opendbpy.dbBlock_saveLef(self, filename)

    def saveDef(self, filename, nets):
        return _opendbpy.dbBlock_saveDef(self, filename, nets)

    def writeDb(self, filename, allNode=0):
        return _opendbpy.dbBlock_writeDb(self, filename, allNode)

    def findVia(self, name):
        return _opendbpy.dbBlock_findVia(self, name)

    def getVias(self):
        return _opendbpy.dbBlock_getVias(self)

    def getGCellGrid(self):
        return _opendbpy.dbBlock_getGCellGrid(self)

    def getDefUnits(self):
        return _opendbpy.dbBlock_getDefUnits(self)

    def setDefUnits(self, units):
        return _opendbpy.dbBlock_setDefUnits(self, units)

    def getDbUnitsPerMicron(self):
        return _opendbpy.dbBlock_getDbUnitsPerMicron(self)

    def getHierarchyDelimeter(self):
        return _opendbpy.dbBlock_getHierarchyDelimeter(self)

    def setBusDelimeters(self, left, right):
        return _opendbpy.dbBlock_setBusDelimeters(self, left, right)

    def getBusDelimeters(self, left, right):
        return _opendbpy.dbBlock_getBusDelimeters(self, left, right)

    def getExtCount(self, numOfNet, numOfRSeg, numOfCapNode, numOfCCSeg):
        return _opendbpy.dbBlock_getExtCount(self, numOfNet, numOfRSeg, numOfCapNode, numOfCCSeg)

    def copyExtDb(self, fr, to, extDbCnt, resFactor, ccFactor, gndcFactor):
        return _opendbpy.dbBlock_copyExtDb(self, fr, to, extDbCnt, resFactor, ccFactor, gndcFactor)

    def adjustRC(self, resFactor, ccFactor, gndcFactor):
        return _opendbpy.dbBlock_adjustRC(self, resFactor, ccFactor, gndcFactor)

    def groundCC(self, gndFactor):
        return _opendbpy.dbBlock_groundCC(self, gndFactor)

    def adjustCC(self, adjFactor, ccThreshHold, nets, halonets):
        return _opendbpy.dbBlock_adjustCC(self, adjFactor, ccThreshHold, nets, halonets)

    def undoAdjustedCC(self, nets, halonets):
        return _opendbpy.dbBlock_undoAdjustedCC(self, nets, halonets)

    def getCornerCount(self):
        return _opendbpy.dbBlock_getCornerCount(self)

    def extCornersAreIndependent(self):
        return _opendbpy.dbBlock_extCornersAreIndependent(self)

    def getCornersPerBlock(self):
        return _opendbpy.dbBlock_getCornersPerBlock(self)

    def getExtDbCount(self):
        return _opendbpy.dbBlock_getExtDbCount(self)

    def getExtCornerName(self, corner, cName):
        return _opendbpy.dbBlock_getExtCornerName(self, corner, cName)

    def getExtCornerIndex(self, cornerName):
        return _opendbpy.dbBlock_getExtCornerIndex(self, cornerName)

    def setCornerNameList(self, name_list):
        return _opendbpy.dbBlock_setCornerNameList(self, name_list)

    def getCornerNameList(self):
        return _opendbpy.dbBlock_getCornerNameList(self)

    def setCornerCount(self, *args):
        return _opendbpy.dbBlock_setCornerCount(self, *args)

    def setCornersPerBlock(self, cornersPerBlock):
        return _opendbpy.dbBlock_setCornersPerBlock(self, cornersPerBlock)

    def initParasiticsValueTables(self):
        return _opendbpy.dbBlock_initParasiticsValueTables(self)

    def createExtCornerBlock(self, corner):
        return _opendbpy.dbBlock_createExtCornerBlock(self, corner)

    def findExtCornerBlock(self, corner):
        return _opendbpy.dbBlock_findExtCornerBlock(self, corner)

    def getExtCornerBlock(self, corner):
        return _opendbpy.dbBlock_getExtCornerBlock(self, corner)

    def set_skip_hier_stream(self, value):
        return _opendbpy.dbBlock_set_skip_hier_stream(self, value)

    def getTrackGrids(self):
        return _opendbpy.dbBlock_getTrackGrids(self)

    def findTrackGrid(self, layer):
        return _opendbpy.dbBlock_findTrackGrid(self, layer)

    def getRows(self):
        return _opendbpy.dbBlock_getRows(self)

    def getMasters(self, masters):
        return _opendbpy.dbBlock_getMasters(self, masters)

    def setDieArea(self):
        return _opendbpy.dbBlock_setDieArea(self)

    def getDieArea(self):
        return _opendbpy.dbBlock_getDieArea(self)

    def setPrintControl(self, name, netn, instn):
        return _opendbpy.dbBlock_setPrintControl(self, name, netn, instn)

    def getPrintCnt(self, ptype, net):
        return _opendbpy.dbBlock_getPrintCnt(self, ptype, net)

    def setPtFile(self, ptf):
        return _opendbpy.dbBlock_setPtFile(self, ptf)

    def getPtFile(self):
        return _opendbpy.dbBlock_getPtFile(self)

    def setExtmi(self, ext):
        return _opendbpy.dbBlock_setExtmi(self, ext)

    def getExtmi(self):
        return _opendbpy.dbBlock_getExtmi(self)

    def getExtControl(self):
        return _opendbpy.dbBlock_getExtControl(self)

    def getExtCornerNames(self, ecl):
        return _opendbpy.dbBlock_getExtCornerNames(self, ecl)

    def getCCSegs(self):
        return _opendbpy.dbBlock_getCCSegs(self)

    def isBufferAltered(self):
        return _opendbpy.dbBlock_isBufferAltered(self)

    def setBufferAltered(self, value):
        return _opendbpy.dbBlock_setBufferAltered(self, value)

    def getSearchDb(self):
        return _opendbpy.dbBlock_getSearchDb(self)

    def updateNetFlags(self, result):
        return _opendbpy.dbBlock_updateNetFlags(self, result)

    def destroyCCs(self, nets):
        return _opendbpy.dbBlock_destroyCCs(self, nets)

    def destroyRSegs(self, nets):
        return _opendbpy.dbBlock_destroyRSegs(self, nets)

    def destroyCNs(self, nets, cleanExtid):
        return _opendbpy.dbBlock_destroyCNs(self, nets, cleanExtid)

    def destroyParasitics(self, nets):
        return _opendbpy.dbBlock_destroyParasitics(self, nets)

    def destroyCornerParasitics(self, nets):
        return _opendbpy.dbBlock_destroyCornerParasitics(self, nets)

    def getCcHaloNets(self, changedNets, ccHaloNets):
        return _opendbpy.dbBlock_getCcHaloNets(self, changedNets, ccHaloNets)

    def destroyOldParasitics(self, nets, capnn, rsegn):
        return _opendbpy.dbBlock_destroyOldParasitics(self, nets, capnn, rsegn)

    def destroyOldCornerParasitics(self, nets, capnn, rsegn):
        return _opendbpy.dbBlock_destroyOldCornerParasitics(self, nets, capnn, rsegn)

    def restoreOldCornerParasitics(self, pBlock, nets, coupled_rc, ccHaloNets, capnn, rsegn):
        return _opendbpy.dbBlock_restoreOldCornerParasitics(self, pBlock, nets, coupled_rc, ccHaloNets, capnn, rsegn)

    def replaceOldParasitics(self, nets, capnn, rsegn):
        return _opendbpy.dbBlock_replaceOldParasitics(self, nets, capnn, rsegn)

    def restoreOldParasitics(self, *args):
        return _opendbpy.dbBlock_restoreOldParasitics(self, *args)

    def keepOldParasitics(self, nets, coupled_rc, ccHaloNets, capnn, rsegn):
        return _opendbpy.dbBlock_keepOldParasitics(self, nets, coupled_rc, ccHaloNets, capnn, rsegn)

    def keepOldCornerParasitics(self, pBlock, nets, coupled_rc, ccHaloNets, capnn, rsegn):
        return _opendbpy.dbBlock_keepOldCornerParasitics(self, pBlock, nets, coupled_rc, ccHaloNets, capnn, rsegn)

    def preExttreeMergeRC(self, max_cap, corner):
        return _opendbpy.dbBlock_preExttreeMergeRC(self, max_cap, corner)

    def clear(self):
        return _opendbpy.dbBlock_clear(self)

    def getWireUpdatedNets(self, nets, bbox=None):
        return _opendbpy.dbBlock_getWireUpdatedNets(self, nets, bbox)

    def getRegions(self):
        return _opendbpy.dbBlock_getRegions(self)

    def findRegion(self, name):
        return _opendbpy.dbBlock_findRegion(self, name)

    def findNonDefaultRule(self, name):
        return _opendbpy.dbBlock_findNonDefaultRule(self, name)

    def getNonDefaultRules(self):
        return _opendbpy.dbBlock_getNonDefaultRules(self)

    def levelize(self, startingInsts, instsToBeLeveled):
        return _opendbpy.dbBlock_levelize(self, startingInsts, instsToBeLeveled)

    def levelizeFromPrimaryInputs(self):
        return _opendbpy.dbBlock_levelizeFromPrimaryInputs(self)

    def levelizeFromSequential(self):
        return _opendbpy.dbBlock_levelizeFromSequential(self)

    def markBackwardsUser2(self, *args):
        return _opendbpy.dbBlock_markBackwardsUser2(self, *args)

    def markClockIterms(self):
        return _opendbpy.dbBlock_markClockIterms(self)

    def setDrivingItermsforNets(self):
        return _opendbpy.dbBlock_setDrivingItermsforNets(self)

    def clearUserInstFlags(self):
        return _opendbpy.dbBlock_clearUserInstFlags(self)

    @staticmethod
    def copyViaTable(dst, src):
        return _opendbpy.dbBlock_copyViaTable(dst, src)

    @staticmethod
    def create(*args):
        return _opendbpy.dbBlock_create(*args)

    @staticmethod
    def duplicate(block, name=None):
        return _opendbpy.dbBlock_duplicate(block, name)

    @staticmethod
    def getBlock(*args):
        return _opendbpy.dbBlock_getBlock(*args)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbBlock_destroy(*args)

    @staticmethod
    def differences(block1, block2, out, indent_per_level=4):
        return _opendbpy.dbBlock_differences(block1, block2, out, indent_per_level)

    def __init__(self):
        _opendbpy.dbBlock_swiginit(self, _opendbpy.new_dbBlock())
    __swig_destroy__ = _opendbpy.delete_dbBlock

# Register dbBlock in _opendbpy:
_opendbpy.dbBlock_swigregister(dbBlock)

def dbBlock_copyViaTable(dst, src):
    return _opendbpy.dbBlock_copyViaTable(dst, src)

def dbBlock_create(*args):
    return _opendbpy.dbBlock_create(*args)

def dbBlock_duplicate(block, name=None):
    return _opendbpy.dbBlock_duplicate(block, name)

def dbBlock_getBlock(*args):
    return _opendbpy.dbBlock_getBlock(*args)

def dbBlock_destroy(*args):
    return _opendbpy.dbBlock_destroy(*args)

def dbBlock_differences(block1, block2, out, indent_per_level=4):
    return _opendbpy.dbBlock_differences(block1, block2, out, indent_per_level)

class dbMetrics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getWorstSlack(self):
        return _opendbpy.dbMetrics_getWorstSlack(self)

    def setWorstSlack(self, slack):
        return _opendbpy.dbMetrics_setWorstSlack(self, slack)

    def getTotalSlack(self):
        return _opendbpy.dbMetrics_getTotalSlack(self)

    def setTotalSlack(self, slack):
        return _opendbpy.dbMetrics_setTotalSlack(self, slack)

    @staticmethod
    def getMetrics(block, oid):
        return _opendbpy.dbMetrics_getMetrics(block, oid)

    def __init__(self):
        _opendbpy.dbMetrics_swiginit(self, _opendbpy.new_dbMetrics())
    __swig_destroy__ = _opendbpy.delete_dbMetrics

# Register dbMetrics in _opendbpy:
_opendbpy.dbMetrics_swigregister(dbMetrics)

def dbMetrics_getMetrics(block, oid):
    return _opendbpy.dbMetrics_getMetrics(block, oid)

class dbBTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbBTerm_getName(self)

    def getConstName(self):
        return _opendbpy.dbBTerm_getConstName(self)

    def rename(self, name):
        return _opendbpy.dbBTerm_rename(self, name)

    def setSigType(self, type):
        return _opendbpy.dbBTerm_setSigType(self, type)

    def getSigType(self):
        return _opendbpy.dbBTerm_getSigType(self)

    def setIoType(self, type):
        return _opendbpy.dbBTerm_setIoType(self, type)

    def getIoType(self):
        return _opendbpy.dbBTerm_getIoType(self)

    def setSpefMark(self, v):
        return _opendbpy.dbBTerm_setSpefMark(self, v)

    def isSetSpefMark(self):
        return _opendbpy.dbBTerm_isSetSpefMark(self)

    def setMark(self, v):
        return _opendbpy.dbBTerm_setMark(self, v)

    def isSetMark(self):
        return _opendbpy.dbBTerm_isSetMark(self)

    def setExtId(self, v):
        return _opendbpy.dbBTerm_setExtId(self, v)

    def getExtId(self):
        return _opendbpy.dbBTerm_getExtId(self)

    def isSpecial(self):
        return _opendbpy.dbBTerm_isSpecial(self)

    def setSpecial(self):
        return _opendbpy.dbBTerm_setSpecial(self)

    def getNet(self):
        return _opendbpy.dbBTerm_getNet(self)

    def disconnect(self):
        return _opendbpy.dbBTerm_disconnect(self)

    def connect(self, net):
        return _opendbpy.dbBTerm_connect(self, net)

    def getBlock(self):
        return _opendbpy.dbBTerm_getBlock(self)

    def getITerm(self):
        return _opendbpy.dbBTerm_getITerm(self)

    def getBPins(self):
        return _opendbpy.dbBTerm_getBPins(self)

    def getFirstPin(self, shape):
        return _opendbpy.dbBTerm_getFirstPin(self, shape)

    def getFirstPinLocation(self):
        return _opendbpy.dbBTerm_getFirstPinLocation(self)

    def getFirstPinPlacementStatus(self):
        return _opendbpy.dbBTerm_getFirstPinPlacementStatus(self)

    def getGroundPin(self):
        return _opendbpy.dbBTerm_getGroundPin(self)

    def setGroundPin(self, pin):
        return _opendbpy.dbBTerm_setGroundPin(self, pin)

    def getSupplyPin(self):
        return _opendbpy.dbBTerm_getSupplyPin(self)

    def setSupplyPin(self, pin):
        return _opendbpy.dbBTerm_setSupplyPin(self, pin)

    @staticmethod
    def create(net, name):
        return _opendbpy.dbBTerm_create(net, name)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbBTerm_destroy(*args)

    @staticmethod
    def getBTerm(block, oid):
        return _opendbpy.dbBTerm_getBTerm(block, oid)

    def staVertexId(self):
        return _opendbpy.dbBTerm_staVertexId(self)

    def staSetVertexId(self, id):
        return _opendbpy.dbBTerm_staSetVertexId(self, id)

    def __init__(self):
        _opendbpy.dbBTerm_swiginit(self, _opendbpy.new_dbBTerm())
    __swig_destroy__ = _opendbpy.delete_dbBTerm

# Register dbBTerm in _opendbpy:
_opendbpy.dbBTerm_swigregister(dbBTerm)

def dbBTerm_create(net, name):
    return _opendbpy.dbBTerm_create(net, name)

def dbBTerm_destroy(*args):
    return _opendbpy.dbBTerm_destroy(*args)

def dbBTerm_getBTerm(block, oid):
    return _opendbpy.dbBTerm_getBTerm(block, oid)

class dbBPin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getPlacementStatus(self):
        return _opendbpy.dbBPin_getPlacementStatus(self)

    def setPlacementStatus(self, status):
        return _opendbpy.dbBPin_setPlacementStatus(self, status)

    def getBTerm(self):
        return _opendbpy.dbBPin_getBTerm(self)

    def getBox(self):
        return _opendbpy.dbBPin_getBox(self)

    def hasEffectiveWidth(self):
        return _opendbpy.dbBPin_hasEffectiveWidth(self)

    def setEffectiveWidth(self, w):
        return _opendbpy.dbBPin_setEffectiveWidth(self, w)

    def getEffectiveWidth(self):
        return _opendbpy.dbBPin_getEffectiveWidth(self)

    def hasMinSpacing(self):
        return _opendbpy.dbBPin_hasMinSpacing(self)

    def setMinSpacing(self, w):
        return _opendbpy.dbBPin_setMinSpacing(self, w)

    def getMinSpacing(self):
        return _opendbpy.dbBPin_getMinSpacing(self)

    @staticmethod
    def create(bterm):
        return _opendbpy.dbBPin_create(bterm)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbBPin_destroy(*args)

    @staticmethod
    def getBPin(block, oid):
        return _opendbpy.dbBPin_getBPin(block, oid)

    def __init__(self):
        _opendbpy.dbBPin_swiginit(self, _opendbpy.new_dbBPin())
    __swig_destroy__ = _opendbpy.delete_dbBPin

# Register dbBPin in _opendbpy:
_opendbpy.dbBPin_swigregister(dbBPin)

def dbBPin_create(bterm):
    return _opendbpy.dbBPin_create(bterm)

def dbBPin_destroy(*args):
    return _opendbpy.dbBPin_destroy(*args)

def dbBPin_getBPin(block, oid):
    return _opendbpy.dbBPin_getBPin(block, oid)

class dbNet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbNet_getName(self)

    def getConstName(self):
        return _opendbpy.dbNet_getConstName(self)

    def printNetName(self, fp, idFlag=True, newLine=True):
        return _opendbpy.dbNet_printNetName(self, fp, idFlag, newLine)

    def rename(self, name):
        return _opendbpy.dbNet_rename(self, name)

    def isRCDisconnected(self):
        return _opendbpy.dbNet_isRCDisconnected(self)

    def setRCDisconnected(self, value):
        return _opendbpy.dbNet_setRCDisconnected(self, value)

    def getWeight(self):
        return _opendbpy.dbNet_getWeight(self)

    def setWeight(self, weight):
        return _opendbpy.dbNet_setWeight(self, weight)

    def getSourceType(self):
        return _opendbpy.dbNet_getSourceType(self)

    def setSourceType(self, type):
        return _opendbpy.dbNet_setSourceType(self, type)

    def getXTalkClass(self):
        return _opendbpy.dbNet_getXTalkClass(self)

    def setXTalkClass(self, value):
        return _opendbpy.dbNet_setXTalkClass(self, value)

    def setDrivingITerm(self, id):
        return _opendbpy.dbNet_setDrivingITerm(self, id)

    def getDrivingITerm(self):
        return _opendbpy.dbNet_getDrivingITerm(self)

    def hasFixedBump(self):
        return _opendbpy.dbNet_hasFixedBump(self)

    def setFixedBump(self, value):
        return _opendbpy.dbNet_setFixedBump(self, value)

    def getWireType(self):
        return _opendbpy.dbNet_getWireType(self)

    def setWireType(self, wire_type):
        return _opendbpy.dbNet_setWireType(self, wire_type)

    def getSigType(self):
        return _opendbpy.dbNet_getSigType(self)

    def setSigType(self, sig_type):
        return _opendbpy.dbNet_setSigType(self, sig_type)

    def isEnclosed(self, bbox):
        return _opendbpy.dbNet_isEnclosed(self, bbox)

    def isMarked(self):
        return _opendbpy.dbNet_isMarked(self)

    def isMark_1ed(self):
        return _opendbpy.dbNet_isMark_1ed(self)

    def setMark(self, value):
        return _opendbpy.dbNet_setMark(self, value)

    def setMark_1(self, value):
        return _opendbpy.dbNet_setMark_1(self, value)

    def isSelect(self):
        return _opendbpy.dbNet_isSelect(self)

    def setSelect(self, value):
        return _opendbpy.dbNet_setSelect(self, value)

    def wireEqual(self, target):
        return _opendbpy.dbNet_wireEqual(self, target)

    def wireMatch(self, target):
        return _opendbpy.dbNet_wireMatch(self, target)

    def printWire(self, *args):
        return _opendbpy.dbNet_printWire(self, *args)

    def isWireOrdered(self):
        return _opendbpy.dbNet_isWireOrdered(self)

    def setWireOrdered(self, value):
        return _opendbpy.dbNet_setWireOrdered(self, value)

    def isBuffered(self):
        return _opendbpy.dbNet_isBuffered(self)

    def setBuffered(self, value):
        return _opendbpy.dbNet_setBuffered(self, value)

    def isDisconnected(self):
        return _opendbpy.dbNet_isDisconnected(self)

    def setDisconnected(self, value):
        return _opendbpy.dbNet_setDisconnected(self, value)

    def setWireAltered(self, value):
        return _opendbpy.dbNet_setWireAltered(self, value)

    def isWireAltered(self):
        return _opendbpy.dbNet_isWireAltered(self)

    def setRCgraph(self, value):
        return _opendbpy.dbNet_setRCgraph(self, value)

    def isRCgraph(self):
        return _opendbpy.dbNet_isRCgraph(self)

    def setReduced(self, value):
        return _opendbpy.dbNet_setReduced(self, value)

    def isReduced(self):
        return _opendbpy.dbNet_isReduced(self)

    def setExtracted(self, value):
        return _opendbpy.dbNet_setExtracted(self, value)

    def isExtracted(self):
        return _opendbpy.dbNet_isExtracted(self)

    def setSpef(self, value):
        return _opendbpy.dbNet_setSpef(self, value)

    def isSpef(self):
        return _opendbpy.dbNet_isSpef(self)

    def setSizeOnly(self, v):
        return _opendbpy.dbNet_setSizeOnly(self, v)

    def isSizeOnly(self):
        return _opendbpy.dbNet_isSizeOnly(self)

    def setDoNotTouch(self, v):
        return _opendbpy.dbNet_setDoNotTouch(self, v)

    def isDoNotTouch(self):
        return _opendbpy.dbNet_isDoNotTouch(self)

    def getBlock(self):
        return _opendbpy.dbNet_getBlock(self)

    def getITerms(self):
        return _opendbpy.dbNet_getITerms(self)

    def get1stITerm(self):
        return _opendbpy.dbNet_get1stITerm(self)

    def get1stSignalInput(self, io):
        return _opendbpy.dbNet_get1stSignalInput(self, io)

    def getFirstOutput(self):
        return _opendbpy.dbNet_getFirstOutput(self)

    def getBTerms(self):
        return _opendbpy.dbNet_getBTerms(self)

    def get1stBTerm(self):
        return _opendbpy.dbNet_get1stBTerm(self)

    def getSWires(self):
        return _opendbpy.dbNet_getSWires(self)

    def getWire(self):
        return _opendbpy.dbNet_getWire(self)

    def getFirstSWire(self):
        return _opendbpy.dbNet_getFirstSWire(self)

    def donateWire(self, tnet, new_rsegs):
        return _opendbpy.dbNet_donateWire(self, tnet, new_rsegs)

    def getGlobalWire(self):
        return _opendbpy.dbNet_getGlobalWire(self)

    def isSpecial(self):
        return _opendbpy.dbNet_isSpecial(self)

    def setSpecial(self):
        return _opendbpy.dbNet_setSpecial(self)

    def clearSpecial(self):
        return _opendbpy.dbNet_clearSpecial(self)

    def setIOflag(self):
        return _opendbpy.dbNet_setIOflag(self)

    def isIO(self):
        return _opendbpy.dbNet_isIO(self)

    def isWildConnected(self):
        return _opendbpy.dbNet_isWildConnected(self)

    def setWildConnected(self):
        return _opendbpy.dbNet_setWildConnected(self)

    def clearWildConnected(self):
        return _opendbpy.dbNet_clearWildConnected(self)

    def getGndcCalibFactor(self):
        return _opendbpy.dbNet_getGndcCalibFactor(self)

    def setGndcCalibFactor(self, gndcCalib):
        return _opendbpy.dbNet_setGndcCalibFactor(self, gndcCalib)

    def calibrateCapacitance(self):
        return _opendbpy.dbNet_calibrateCapacitance(self)

    def calibrateGndCap(self):
        return _opendbpy.dbNet_calibrateGndCap(self)

    def calibrateCouplingCap(self, *args):
        return _opendbpy.dbNet_calibrateCouplingCap(self, *args)

    def getCcCalibFactor(self):
        return _opendbpy.dbNet_getCcCalibFactor(self)

    def setCcCalibFactor(self, ccCalib):
        return _opendbpy.dbNet_setCcCalibFactor(self, ccCalib)

    def adjustNetRes(self, *args):
        return _opendbpy.dbNet_adjustNetRes(self, *args)

    def adjustNetGndCap(self, *args):
        return _opendbpy.dbNet_adjustNetGndCap(self, *args)

    def getCcAdjustFactor(self):
        return _opendbpy.dbNet_getCcAdjustFactor(self)

    def setCcAdjustFactor(self, factor):
        return _opendbpy.dbNet_setCcAdjustFactor(self, factor)

    def getCcAdjustOrder(self):
        return _opendbpy.dbNet_getCcAdjustOrder(self)

    def setCcAdjustOrder(self, order):
        return _opendbpy.dbNet_setCcAdjustOrder(self, order)

    def adjustCC(self, adjOrder, adjFactor, ccThreshHold, adjustedCC, halonets):
        return _opendbpy.dbNet_adjustCC(self, adjOrder, adjFactor, ccThreshHold, adjustedCC, halonets)

    def undoAdjustedCC(self, adjustedCC, halonets):
        return _opendbpy.dbNet_undoAdjustedCC(self, adjustedCC, halonets)

    def groundCC(self, gndFactor):
        return _opendbpy.dbNet_groundCC(self, gndFactor)

    def addDbCc(self, cap):
        return _opendbpy.dbNet_addDbCc(self, cap)

    def getDbCc(self):
        return _opendbpy.dbNet_getDbCc(self)

    def setDbCc(self, cap):
        return _opendbpy.dbNet_setDbCc(self, cap)

    def getRefCc(self):
        return _opendbpy.dbNet_getRefCc(self)

    def setRefCc(self, cap):
        return _opendbpy.dbNet_setRefCc(self, cap)

    def getCcMatchRatio(self):
        return _opendbpy.dbNet_getCcMatchRatio(self)

    def setCcMatchRatio(self, ratio):
        return _opendbpy.dbNet_setCcMatchRatio(self, ratio)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _opendbpy.dbNet_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def preExttreeMergeRC(self, max_cap, corner):
        return _opendbpy.dbNet_preExttreeMergeRC(self, max_cap, corner)

    def findCapNode(self, nodeId):
        return _opendbpy.dbNet_findCapNode(self, nodeId)

    def printCapN(self, type):
        return _opendbpy.dbNet_printCapN(self, type)

    def donateRC(self, donorterm, rcvterm, rtrseg, lastrrseg, lastrcapnd, ricapndCnt, fstdrseg, dtrseg, fstdcapnd, gndcc, bridgeRseg):
        return _opendbpy.dbNet_donateRC(self, donorterm, rcvterm, rtrseg, lastrrseg, lastrcapnd, ricapndCnt, fstdrseg, dtrseg, fstdcapnd, gndcc, bridgeRseg)

    def unDonateRC(self, rtrseg, lastrrseg, it, lastrcapnd, ricapndCnt, dtrseg, fstdrseg, fstdcapnd, ot, gndcc):
        return _opendbpy.dbNet_unDonateRC(self, rtrseg, lastrrseg, it, lastrcapnd, ricapndCnt, dtrseg, fstdrseg, fstdcapnd, ot, gndcc)

    def getCapNodes(self):
        return _opendbpy.dbNet_getCapNodes(self)

    def destroyCapNodes(self, cleanExtid):
        return _opendbpy.dbNet_destroyCapNodes(self, cleanExtid)

    def reverseRSegs(self):
        return _opendbpy.dbNet_reverseRSegs(self)

    def createZeroRc(self, foreign):
        return _opendbpy.dbNet_createZeroRc(self, foreign)

    def set1stRSegId(self, rseg_id):
        return _opendbpy.dbNet_set1stRSegId(self, rseg_id)

    def getZeroRSeg(self):
        return _opendbpy.dbNet_getZeroRSeg(self)

    def get1stRSegId(self):
        return _opendbpy.dbNet_get1stRSegId(self)

    def findRSeg(self, srcn, tgtn):
        return _opendbpy.dbNet_findRSeg(self, srcn, tgtn)

    def set1stCapNodeId(self, capn_id):
        return _opendbpy.dbNet_set1stCapNodeId(self, capn_id)

    def get1stCapNodeId(self):
        return _opendbpy.dbNet_get1stCapNodeId(self)

    def setTermExtIds(self, capId):
        return _opendbpy.dbNet_setTermExtIds(self, capId)

    def anchoredRSeg(self):
        return _opendbpy.dbNet_anchoredRSeg(self)

    def printRSeg(self, type):
        return _opendbpy.dbNet_printRSeg(self, type)

    def printWnP(self, type):
        return _opendbpy.dbNet_printWnP(self, type)

    def getRSegCount(self):
        return _opendbpy.dbNet_getRSegCount(self)

    def getRSegs(self):
        return _opendbpy.dbNet_getRSegs(self)

    def collapseInternalCapNum(self, capNodeMap):
        return _opendbpy.dbNet_collapseInternalCapNum(self, capNodeMap)

    def maxInternalCapNum(self):
        return _opendbpy.dbNet_maxInternalCapNum(self)

    def getCapNodeCount(self):
        return _opendbpy.dbNet_getCapNodeCount(self)

    def getCcCount(self):
        return _opendbpy.dbNet_getCcCount(self)

    def destroyRSegs(self):
        return _opendbpy.dbNet_destroyRSegs(self)

    def reverseCCSegs(self):
        return _opendbpy.dbNet_reverseCCSegs(self)

    def getSrcCCSegs(self, segs):
        return _opendbpy.dbNet_getSrcCCSegs(self, segs)

    def getTgtCCSegs(self, segs):
        return _opendbpy.dbNet_getTgtCCSegs(self, segs)

    def getCouplingNets(self, corner, ccThreshold, cnets):
        return _opendbpy.dbNet_getCouplingNets(self, corner, ccThreshold, cnets)

    def destroyCCSegs(self):
        return _opendbpy.dbNet_destroyCCSegs(self)

    def destroyParasitics(self):
        return _opendbpy.dbNet_destroyParasitics(self)

    def getTotalCapacitance(self, corner=0, cc=False):
        return _opendbpy.dbNet_getTotalCapacitance(self, corner, cc)

    def getTotalCouplingCap(self, corner=0):
        return _opendbpy.dbNet_getTotalCouplingCap(self, corner)

    def getTotalResistance(self, corner=0):
        return _opendbpy.dbNet_getTotalResistance(self, corner)

    def setNonDefaultRule(self, rule):
        return _opendbpy.dbNet_setNonDefaultRule(self, rule)

    def getNonDefaultRule(self):
        return _opendbpy.dbNet_getNonDefaultRule(self)

    def getNetStats(self, wireCnt, viaCnt, len, layerCnt, levelTable):
        return _opendbpy.dbNet_getNetStats(self, wireCnt, viaCnt, len, layerCnt, levelTable)

    def getWireCount(self, wireCnt, viaCnt):
        return _opendbpy.dbNet_getWireCount(self, wireCnt, viaCnt)

    def getSignalWireCount(self, wireCnt, viaCnt):
        return _opendbpy.dbNet_getSignalWireCount(self, wireCnt, viaCnt)

    def getPowerWireCount(self, wireCnt, viaCnt):
        return _opendbpy.dbNet_getPowerWireCount(self, wireCnt, viaCnt)

    def getTermCount(self):
        return _opendbpy.dbNet_getTermCount(self)

    def getITermCount(self):
        return _opendbpy.dbNet_getITermCount(self)

    def getBTermCount(self):
        return _opendbpy.dbNet_getBTermCount(self)

    def getPrintCnt(self, type):
        return _opendbpy.dbNet_getPrintCnt(self, type)

    def destroySWires(self):
        return _opendbpy.dbNet_destroySWires(self)

    @staticmethod
    def create(block, name, skipExistingCheck=False):
        return _opendbpy.dbNet_create(block, name, skipExistingCheck)

    @staticmethod
    def markNets(nets, block, mk):
        return _opendbpy.dbNet_markNets(nets, block, mk)

    def setLevelAtFanout(self, level, fromPI, instVector):
        return _opendbpy.dbNet_setLevelAtFanout(self, level, fromPI, instVector)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbNet_destroy(*args)

    @staticmethod
    def getNet(block, oid):
        return _opendbpy.dbNet_getNet(block, oid)

    @staticmethod
    def getValidNet(block, oid):
        return _opendbpy.dbNet_getValidNet(block, oid)

    def __init__(self):
        _opendbpy.dbNet_swiginit(self, _opendbpy.new_dbNet())
    __swig_destroy__ = _opendbpy.delete_dbNet

# Register dbNet in _opendbpy:
_opendbpy.dbNet_swigregister(dbNet)

def dbNet_create(block, name, skipExistingCheck=False):
    return _opendbpy.dbNet_create(block, name, skipExistingCheck)

def dbNet_markNets(nets, block, mk):
    return _opendbpy.dbNet_markNets(nets, block, mk)

def dbNet_destroy(*args):
    return _opendbpy.dbNet_destroy(*args)

def dbNet_getNet(block, oid):
    return _opendbpy.dbNet_getNet(block, oid)

def dbNet_getValidNet(block, oid):
    return _opendbpy.dbNet_getValidNet(block, oid)

class dbInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbInst_getName(self)

    def getConstName(self):
        return _opendbpy.dbInst_getConstName(self)

    def isNamed(self, name):
        return _opendbpy.dbInst_isNamed(self, name)

    def rename(self, name):
        return _opendbpy.dbInst_rename(self, name)

    def getOrigin(self):
        return _opendbpy.dbInst_getOrigin(self)

    def setOrigin(self, x, y):
        return _opendbpy.dbInst_setOrigin(self, x, y)

    def getOrient(self):
        return _opendbpy.dbInst_getOrient(self)

    def setOrient(self, orient):
        return _opendbpy.dbInst_setOrient(self, orient)

    def getLocation(self):
        return _opendbpy.dbInst_getLocation(self)

    def setLocation(self, x, y):
        return _opendbpy.dbInst_setLocation(self, x, y)

    def setLocationOrient(self, orient):
        return _opendbpy.dbInst_setLocationOrient(self, orient)

    def getTransform(self, t):
        return _opendbpy.dbInst_getTransform(self, t)

    def setTransform(self, t):
        return _opendbpy.dbInst_setTransform(self, t)

    def getHierTransform(self, t):
        return _opendbpy.dbInst_getHierTransform(self, t)

    def getBBox(self):
        return _opendbpy.dbInst_getBBox(self)

    def getPlacementStatus(self):
        return _opendbpy.dbInst_getPlacementStatus(self)

    def setPlacementStatus(self, status):
        return _opendbpy.dbInst_setPlacementStatus(self, status)

    def getEcoCreate(self):
        return _opendbpy.dbInst_getEcoCreate(self)

    def getEcoDestroy(self):
        return _opendbpy.dbInst_getEcoDestroy(self)

    def getEcoModify(self):
        return _opendbpy.dbInst_getEcoModify(self)

    def setEcoCreate(self, v):
        return _opendbpy.dbInst_setEcoCreate(self, v)

    def setEcoDestroy(self, v):
        return _opendbpy.dbInst_setEcoDestroy(self, v)

    def setEcoModify(self, v):
        return _opendbpy.dbInst_setEcoModify(self, v)

    def getUserFlag1(self):
        return _opendbpy.dbInst_getUserFlag1(self)

    def setUserFlag1(self):
        return _opendbpy.dbInst_setUserFlag1(self)

    def clearUserFlag1(self):
        return _opendbpy.dbInst_clearUserFlag1(self)

    def getUserFlag2(self):
        return _opendbpy.dbInst_getUserFlag2(self)

    def setUserFlag2(self):
        return _opendbpy.dbInst_setUserFlag2(self)

    def clearUserFlag2(self):
        return _opendbpy.dbInst_clearUserFlag2(self)

    def getUserFlag3(self):
        return _opendbpy.dbInst_getUserFlag3(self)

    def setUserFlag3(self):
        return _opendbpy.dbInst_setUserFlag3(self)

    def clearUserFlag3(self):
        return _opendbpy.dbInst_clearUserFlag3(self)

    def setSizeOnly(self, v):
        return _opendbpy.dbInst_setSizeOnly(self, v)

    def isSizeOnly(self):
        return _opendbpy.dbInst_isSizeOnly(self)

    def setDoNotTouch(self, v):
        return _opendbpy.dbInst_setDoNotTouch(self, v)

    def isDoNotTouch(self):
        return _opendbpy.dbInst_isDoNotTouch(self)

    def setDoNotSize(self, v):
        return _opendbpy.dbInst_setDoNotSize(self, v)

    def isDoNotSize(self):
        return _opendbpy.dbInst_isDoNotSize(self)

    def getBlock(self):
        return _opendbpy.dbInst_getBlock(self)

    def getMaster(self):
        return _opendbpy.dbInst_getMaster(self)

    def getITerms(self):
        return _opendbpy.dbInst_getITerms(self)

    def getFirstOutput(self):
        return _opendbpy.dbInst_getFirstOutput(self)

    def getRegion(self):
        return _opendbpy.dbInst_getRegion(self)

    def findITerm(self, terminal_name):
        return _opendbpy.dbInst_findITerm(self, terminal_name)

    def getClockedTerm(self):
        return _opendbpy.dbInst_getClockedTerm(self)

    def getOutputTerm(self):
        return _opendbpy.dbInst_getOutputTerm(self)

    def getConnectivity(self, *args):
        return _opendbpy.dbInst_getConnectivity(self, *args)

    def bindBlock(self, block, force=False):
        return _opendbpy.dbInst_bindBlock(self, block, force)

    def unbindBlock(self):
        return _opendbpy.dbInst_unbindBlock(self)

    def resetHierarchy(self, verbose):
        return _opendbpy.dbInst_resetHierarchy(self, verbose)

    def getChild(self):
        return _opendbpy.dbInst_getChild(self)

    def getParent(self):
        return _opendbpy.dbInst_getParent(self)

    def getChildren(self):
        return _opendbpy.dbInst_getChildren(self)

    def isHierarchical(self):
        return _opendbpy.dbInst_isHierarchical(self)

    def getHalo(self):
        return _opendbpy.dbInst_getHalo(self)

    def getWeight(self):
        return _opendbpy.dbInst_getWeight(self)

    def setWeight(self, weight):
        return _opendbpy.dbInst_setWeight(self, weight)

    def getSourceType(self):
        return _opendbpy.dbInst_getSourceType(self)

    def setSourceType(self, type):
        return _opendbpy.dbInst_setSourceType(self, type)

    def getITerm(self, *args):
        return _opendbpy.dbInst_getITerm(self, *args)

    def swapMaster(self, master):
        return _opendbpy.dbInst_swapMaster(self, master)

    def getLevel(self):
        return _opendbpy.dbInst_getLevel(self)

    def setLevel(self, v, fromPI):
        return _opendbpy.dbInst_setLevel(self, v, fromPI)

    @staticmethod
    def create(*args):
        return _opendbpy.dbInst_create(*args)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbInst_destroy(*args)

    @staticmethod
    def getInst(block, oid):
        return _opendbpy.dbInst_getInst(block, oid)

    @staticmethod
    def getValidInst(block, oid):
        return _opendbpy.dbInst_getValidInst(block, oid)

    def __init__(self):
        _opendbpy.dbInst_swiginit(self, _opendbpy.new_dbInst())
    __swig_destroy__ = _opendbpy.delete_dbInst

# Register dbInst in _opendbpy:
_opendbpy.dbInst_swigregister(dbInst)

def dbInst_create(*args):
    return _opendbpy.dbInst_create(*args)

def dbInst_destroy(*args):
    return _opendbpy.dbInst_destroy(*args)

def dbInst_getInst(block, oid):
    return _opendbpy.dbInst_getInst(block, oid)

def dbInst_getValidInst(block, oid):
    return _opendbpy.dbInst_getValidInst(block, oid)

class dbITerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def _print(self, *args):
        return _opendbpy.dbITerm__print(self, *args)

    def getInst(self):
        return _opendbpy.dbITerm_getInst(self)

    def getNet(self):
        return _opendbpy.dbITerm_getNet(self)

    def getMTerm(self):
        return _opendbpy.dbITerm_getMTerm(self)

    def getBlock(self):
        return _opendbpy.dbITerm_getBlock(self)

    def getSigType(self):
        return _opendbpy.dbITerm_getSigType(self)

    def getIoType(self):
        return _opendbpy.dbITerm_getIoType(self)

    def isInputSignal(self, io=True):
        return _opendbpy.dbITerm_isInputSignal(self, io)

    def isOutputSignal(self, io=True):
        return _opendbpy.dbITerm_isOutputSignal(self, io)

    def setSpef(self, v):
        return _opendbpy.dbITerm_setSpef(self, v)

    def isSpef(self):
        return _opendbpy.dbITerm_isSpef(self)

    def setExtId(self, v):
        return _opendbpy.dbITerm_setExtId(self, v)

    def getExtId(self):
        return _opendbpy.dbITerm_getExtId(self)

    def isSpecial(self):
        return _opendbpy.dbITerm_isSpecial(self)

    def setSpecial(self):
        return _opendbpy.dbITerm_setSpecial(self)

    def clearSpecial(self):
        return _opendbpy.dbITerm_clearSpecial(self)

    def setClocked(self, v):
        return _opendbpy.dbITerm_setClocked(self, v)

    def isClocked(self):
        return _opendbpy.dbITerm_isClocked(self)

    def setMark(self, v):
        return _opendbpy.dbITerm_setMark(self, v)

    def isSetMark(self):
        return _opendbpy.dbITerm_isSetMark(self)

    def isConnected(self):
        return _opendbpy.dbITerm_isConnected(self)

    def setConnected(self):
        return _opendbpy.dbITerm_setConnected(self)

    def clearConnected(self):
        return _opendbpy.dbITerm_clearConnected(self)

    def getBTerm(self):
        return _opendbpy.dbITerm_getBTerm(self)

    @staticmethod
    def connect(*args):
        return _opendbpy.dbITerm_connect(*args)

    @staticmethod
    def disconnect(*args):
        return _opendbpy.dbITerm_disconnect(*args)

    def getAvgXY(self, x, y):
        return _opendbpy.dbITerm_getAvgXY(self, x, y)

    @staticmethod
    def getITerm(block, oid):
        return _opendbpy.dbITerm_getITerm(block, oid)

    def staVertexId(self):
        return _opendbpy.dbITerm_staVertexId(self)

    def staSetVertexId(self, id):
        return _opendbpy.dbITerm_staSetVertexId(self, id)

    def __init__(self):
        _opendbpy.dbITerm_swiginit(self, _opendbpy.new_dbITerm())
    __swig_destroy__ = _opendbpy.delete_dbITerm

# Register dbITerm in _opendbpy:
_opendbpy.dbITerm_swigregister(dbITerm)

def dbITerm_connect(*args):
    return _opendbpy.dbITerm_connect(*args)

def dbITerm_disconnect(*args):
    return _opendbpy.dbITerm_disconnect(*args)

def dbITerm_getITerm(block, oid):
    return _opendbpy.dbITerm_getITerm(block, oid)

class dbVia(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbVia_getName(self)

    def getConstName(self):
        return _opendbpy.dbVia_getConstName(self)

    def getPattern(self):
        return _opendbpy.dbVia_getPattern(self)

    def setPattern(self, pattern):
        return _opendbpy.dbVia_setPattern(self, pattern)

    def setViaGenerateRule(self, rule):
        return _opendbpy.dbVia_setViaGenerateRule(self, rule)

    def getViaGenerateRule(self):
        return _opendbpy.dbVia_getViaGenerateRule(self)

    def hasParams(self):
        return _opendbpy.dbVia_hasParams(self)

    def setViaParams(self, params):
        return _opendbpy.dbVia_setViaParams(self, params)

    def getViaParams(self):
        return _opendbpy.dbVia_getViaParams(self)

    def getBlock(self):
        return _opendbpy.dbVia_getBlock(self)

    def getBBox(self):
        return _opendbpy.dbVia_getBBox(self)

    def getBoxes(self):
        return _opendbpy.dbVia_getBoxes(self)

    def getTopLayer(self):
        return _opendbpy.dbVia_getTopLayer(self)

    def getBottomLayer(self):
        return _opendbpy.dbVia_getBottomLayer(self)

    def isViaRotated(self):
        return _opendbpy.dbVia_isViaRotated(self)

    def getOrient(self):
        return _opendbpy.dbVia_getOrient(self)

    def getTechVia(self):
        return _opendbpy.dbVia_getTechVia(self)

    def getBlockVia(self):
        return _opendbpy.dbVia_getBlockVia(self)

    @staticmethod
    def create(*args):
        return _opendbpy.dbVia_create(*args)

    @staticmethod
    def copy(*args):
        return _opendbpy.dbVia_copy(*args)

    @staticmethod
    def getVia(block, oid):
        return _opendbpy.dbVia_getVia(block, oid)

    def __init__(self):
        _opendbpy.dbVia_swiginit(self, _opendbpy.new_dbVia())
    __swig_destroy__ = _opendbpy.delete_dbVia

# Register dbVia in _opendbpy:
_opendbpy.dbVia_swigregister(dbVia)

def dbVia_create(*args):
    return _opendbpy.dbVia_create(*args)

def dbVia_copy(*args):
    return _opendbpy.dbVia_copy(*args)

def dbVia_getVia(block, oid):
    return _opendbpy.dbVia_getVia(block, oid)

class dbWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBlock(self):
        return _opendbpy.dbWire_getBlock(self)

    def getNet(self):
        return _opendbpy.dbWire_getNet(self)

    def append(self, wire, singleSegmentWire=False):
        return _opendbpy.dbWire_append(self, wire, singleSegmentWire)

    def shuffleWireSeg(self, newNets, new_rsegs):
        return _opendbpy.dbWire_shuffleWireSeg(self, newNets, new_rsegs)

    def getTermJid(self, termid):
        return _opendbpy.dbWire_getTermJid(self, termid)

    def equal(self, target):
        return _opendbpy.dbWire_equal(self, target)

    def getShape(self, shape_id, shape):
        return _opendbpy.dbWire_getShape(self, shape_id, shape)

    def getSegment(self, *args):
        return _opendbpy.dbWire_getSegment(self, *args)

    def getPrevVia(self, shape_id, shape):
        return _opendbpy.dbWire_getPrevVia(self, shape_id, shape)

    def getNextVia(self, shape_id, shape):
        return _opendbpy.dbWire_getNextVia(self, shape_id, shape)

    def getViaBoxes(self, via_shape_id, boxes):
        return _opendbpy.dbWire_getViaBoxes(self, via_shape_id, boxes)

    def isGlobalWire(self):
        return _opendbpy.dbWire_isGlobalWire(self)

    def getBBox(self):
        return _opendbpy.dbWire_getBBox(self)

    def getLength(self):
        return _opendbpy.dbWire_getLength(self)

    def length(self):
        return _opendbpy.dbWire_length(self)

    def count(self):
        return _opendbpy.dbWire_count(self)

    def getCoord(self, jid):
        return _opendbpy.dbWire_getCoord(self, jid)

    def getProperty(self, jid, property):
        return _opendbpy.dbWire_getProperty(self, jid, property)

    def setProperty(self, jid, property):
        return _opendbpy.dbWire_setProperty(self, jid, property)

    def getData(self, n):
        return _opendbpy.dbWire_getData(self, n)

    def getOpcode(self, n):
        return _opendbpy.dbWire_getOpcode(self, n)

    def printWire(self, *args):
        return _opendbpy.dbWire_printWire(self, *args)

    def attach(self, net):
        return _opendbpy.dbWire_attach(self, net)

    def detach(self):
        return _opendbpy.dbWire_detach(self)

    def ecoUpdate(self):
        return _opendbpy.dbWire_ecoUpdate(self)

    @staticmethod
    def copy(*args):
        return _opendbpy.dbWire_copy(*args)

    @staticmethod
    def create(*args):
        return _opendbpy.dbWire_create(*args)

    @staticmethod
    def getWire(block, oid):
        return _opendbpy.dbWire_getWire(block, oid)

    @staticmethod
    def destroy(wire):
        return _opendbpy.dbWire_destroy(wire)

    def __init__(self):
        _opendbpy.dbWire_swiginit(self, _opendbpy.new_dbWire())
    __swig_destroy__ = _opendbpy.delete_dbWire

# Register dbWire in _opendbpy:
_opendbpy.dbWire_swigregister(dbWire)

def dbWire_copy(*args):
    return _opendbpy.dbWire_copy(*args)

def dbWire_create(*args):
    return _opendbpy.dbWire_create(*args)

def dbWire_getWire(block, oid):
    return _opendbpy.dbWire_getWire(block, oid)

def dbWire_destroy(wire):
    return _opendbpy.dbWire_destroy(wire)

class dbSWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBlock(self):
        return _opendbpy.dbSWire_getBlock(self)

    def getNet(self):
        return _opendbpy.dbSWire_getNet(self)

    def getWireType(self):
        return _opendbpy.dbSWire_getWireType(self)

    def getShield(self):
        return _opendbpy.dbSWire_getShield(self)

    def getWires(self):
        return _opendbpy.dbSWire_getWires(self)

    @staticmethod
    def create(net, type, shield=None):
        return _opendbpy.dbSWire_create(net, type, shield)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbSWire_destroy(*args)

    @staticmethod
    def getSWire(block, oid):
        return _opendbpy.dbSWire_getSWire(block, oid)

    def __init__(self):
        _opendbpy.dbSWire_swiginit(self, _opendbpy.new_dbSWire())
    __swig_destroy__ = _opendbpy.delete_dbSWire

# Register dbSWire in _opendbpy:
_opendbpy.dbSWire_swigregister(dbSWire)

def dbSWire_create(net, type, shield=None):
    return _opendbpy.dbSWire_create(net, type, shield)

def dbSWire_destroy(*args):
    return _opendbpy.dbSWire_destroy(*args)

def dbSWire_getSWire(block, oid):
    return _opendbpy.dbSWire_getSWire(block, oid)

class dbGCellGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getGridX(self, x_grid):
        return _opendbpy.dbGCellGrid_getGridX(self, x_grid)

    def getGridY(self, y_grid):
        return _opendbpy.dbGCellGrid_getGridY(self, y_grid)

    def getBlock(self):
        return _opendbpy.dbGCellGrid_getBlock(self)

    def addGridPatternX(self, origin_x, line_count, step):
        return _opendbpy.dbGCellGrid_addGridPatternX(self, origin_x, line_count, step)

    def addGridPatternY(self, origin_y, line_count, step):
        return _opendbpy.dbGCellGrid_addGridPatternY(self, origin_y, line_count, step)

    def getNumGridPatternsX(self):
        return _opendbpy.dbGCellGrid_getNumGridPatternsX(self)

    def getNumGridPatternsY(self):
        return _opendbpy.dbGCellGrid_getNumGridPatternsY(self)

    def getGridPatternX(self, i, origin_x, line_count, step):
        return _opendbpy.dbGCellGrid_getGridPatternX(self, i, origin_x, line_count, step)

    def getGridPatternY(self, i, origin_y, line_count, step):
        return _opendbpy.dbGCellGrid_getGridPatternY(self, i, origin_y, line_count, step)

    @staticmethod
    def create(block):
        return _opendbpy.dbGCellGrid_create(block)

    @staticmethod
    def getGCellGrid(block, oid):
        return _opendbpy.dbGCellGrid_getGCellGrid(block, oid)

    def __init__(self):
        _opendbpy.dbGCellGrid_swiginit(self, _opendbpy.new_dbGCellGrid())
    __swig_destroy__ = _opendbpy.delete_dbGCellGrid

# Register dbGCellGrid in _opendbpy:
_opendbpy.dbGCellGrid_swigregister(dbGCellGrid)

def dbGCellGrid_create(block):
    return _opendbpy.dbGCellGrid_create(block)

def dbGCellGrid_getGCellGrid(block, oid):
    return _opendbpy.dbGCellGrid_getGCellGrid(block, oid)

class dbTrackGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTechLayer(self):
        return _opendbpy.dbTrackGrid_getTechLayer(self)

    def getGridX(self, x_grid):
        return _opendbpy.dbTrackGrid_getGridX(self, x_grid)

    def getGridY(self, y_grid):
        return _opendbpy.dbTrackGrid_getGridY(self, y_grid)

    def getBlock(self):
        return _opendbpy.dbTrackGrid_getBlock(self)

    def addGridPatternX(self, origin_x, line_count, step):
        return _opendbpy.dbTrackGrid_addGridPatternX(self, origin_x, line_count, step)

    def addGridPatternY(self, origin_y, line_count, step):
        return _opendbpy.dbTrackGrid_addGridPatternY(self, origin_y, line_count, step)

    def getNumGridPatternsX(self):
        return _opendbpy.dbTrackGrid_getNumGridPatternsX(self)

    def getNumGridPatternsY(self):
        return _opendbpy.dbTrackGrid_getNumGridPatternsY(self)

    def getGridPatternX(self, i, origin_x, line_count, step):
        return _opendbpy.dbTrackGrid_getGridPatternX(self, i, origin_x, line_count, step)

    def getGridPatternY(self, i, origin_y, line_count, step):
        return _opendbpy.dbTrackGrid_getGridPatternY(self, i, origin_y, line_count, step)

    @staticmethod
    def create(block, layer):
        return _opendbpy.dbTrackGrid_create(block, layer)

    @staticmethod
    def getTrackGrid(block, oid):
        return _opendbpy.dbTrackGrid_getTrackGrid(block, oid)

    def __init__(self):
        _opendbpy.dbTrackGrid_swiginit(self, _opendbpy.new_dbTrackGrid())
    __swig_destroy__ = _opendbpy.delete_dbTrackGrid

# Register dbTrackGrid in _opendbpy:
_opendbpy.dbTrackGrid_swigregister(dbTrackGrid)

def dbTrackGrid_create(block, layer):
    return _opendbpy.dbTrackGrid_create(block, layer)

def dbTrackGrid_getTrackGrid(block, oid):
    return _opendbpy.dbTrackGrid_getTrackGrid(block, oid)

class dbObstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBBox(self):
        return _opendbpy.dbObstruction_getBBox(self)

    def getInstance(self):
        return _opendbpy.dbObstruction_getInstance(self)

    def setSlotObstruction(self):
        return _opendbpy.dbObstruction_setSlotObstruction(self)

    def isSlotObstruction(self):
        return _opendbpy.dbObstruction_isSlotObstruction(self)

    def setFillObstruction(self):
        return _opendbpy.dbObstruction_setFillObstruction(self)

    def isFillObstruction(self):
        return _opendbpy.dbObstruction_isFillObstruction(self)

    def setPushedDown(self):
        return _opendbpy.dbObstruction_setPushedDown(self)

    def isPushedDown(self):
        return _opendbpy.dbObstruction_isPushedDown(self)

    def hasEffectiveWidth(self):
        return _opendbpy.dbObstruction_hasEffectiveWidth(self)

    def setEffectiveWidth(self, w):
        return _opendbpy.dbObstruction_setEffectiveWidth(self, w)

    def getEffectiveWidth(self):
        return _opendbpy.dbObstruction_getEffectiveWidth(self)

    def hasMinSpacing(self):
        return _opendbpy.dbObstruction_hasMinSpacing(self)

    def setMinSpacing(self, w):
        return _opendbpy.dbObstruction_setMinSpacing(self, w)

    def getMinSpacing(self):
        return _opendbpy.dbObstruction_getMinSpacing(self)

    def getBlock(self):
        return _opendbpy.dbObstruction_getBlock(self)

    @staticmethod
    def create(block, layer, x1, y1, x2, y2, inst=None):
        return _opendbpy.dbObstruction_create(block, layer, x1, y1, x2, y2, inst)

    @staticmethod
    def getObstruction(block, oid):
        return _opendbpy.dbObstruction_getObstruction(block, oid)

    def __init__(self):
        _opendbpy.dbObstruction_swiginit(self, _opendbpy.new_dbObstruction())
    __swig_destroy__ = _opendbpy.delete_dbObstruction

# Register dbObstruction in _opendbpy:
_opendbpy.dbObstruction_swigregister(dbObstruction)

def dbObstruction_create(block, layer, x1, y1, x2, y2, inst=None):
    return _opendbpy.dbObstruction_create(block, layer, x1, y1, x2, y2, inst)

def dbObstruction_getObstruction(block, oid):
    return _opendbpy.dbObstruction_getObstruction(block, oid)

class dbBlockage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBBox(self):
        return _opendbpy.dbBlockage_getBBox(self)

    def getInstance(self):
        return _opendbpy.dbBlockage_getInstance(self)

    def setPushedDown(self):
        return _opendbpy.dbBlockage_setPushedDown(self)

    def isPushedDown(self):
        return _opendbpy.dbBlockage_isPushedDown(self)

    def getBlock(self):
        return _opendbpy.dbBlockage_getBlock(self)

    @staticmethod
    def create(block, x1, y1, x2, y2, inst=None):
        return _opendbpy.dbBlockage_create(block, x1, y1, x2, y2, inst)

    @staticmethod
    def getBlockage(block, oid):
        return _opendbpy.dbBlockage_getBlockage(block, oid)

    def __init__(self):
        _opendbpy.dbBlockage_swiginit(self, _opendbpy.new_dbBlockage())
    __swig_destroy__ = _opendbpy.delete_dbBlockage

# Register dbBlockage in _opendbpy:
_opendbpy.dbBlockage_swigregister(dbBlockage)

def dbBlockage_create(block, x1, y1, x2, y2, inst=None):
    return _opendbpy.dbBlockage_create(block, x1, y1, x2, y2, inst)

def dbBlockage_getBlockage(block, oid):
    return _opendbpy.dbBlockage_getBlockage(block, oid)

class dbCapNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addCapnCapacitance(self, other):
        return _opendbpy.dbCapNode_addCapnCapacitance(self, other)

    def addGndCap(self, gndcap, totalcap):
        return _opendbpy.dbCapNode_addGndCap(self, gndcap, totalcap)

    def addGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _opendbpy.dbCapNode_addGndTotalCap(self, gndcap, totalcap, MillerMult)

    def getGndCap(self, gndcap, totalcap):
        return _opendbpy.dbCapNode_getGndCap(self, gndcap, totalcap)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _opendbpy.dbCapNode_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def accAllCcCap(self, totalcap, MillerMult):
        return _opendbpy.dbCapNode_accAllCcCap(self, totalcap, MillerMult)

    def setCapacitance(self, cap, corner=0):
        return _opendbpy.dbCapNode_setCapacitance(self, cap, corner)

    def addCapacitance(self, cap, corner=0):
        return _opendbpy.dbCapNode_addCapacitance(self, cap, corner)

    def groundCC(self, gndFactor):
        return _opendbpy.dbCapNode_groundCC(self, gndFactor)

    def adjustCapacitance(self, *args):
        return _opendbpy.dbCapNode_adjustCapacitance(self, *args)

    def needAdjustCC(self, ccThreshHold):
        return _opendbpy.dbCapNode_needAdjustCC(self, ccThreshHold)

    def adjustCC(self, adjOrder, adjFactor, adjustedCC, halonets):
        return _opendbpy.dbCapNode_adjustCC(self, adjOrder, adjFactor, adjustedCC, halonets)

    def getCapacitance(self, corner=0):
        return _opendbpy.dbCapNode_getCapacitance(self, corner)

    def getNode(self):
        return _opendbpy.dbCapNode_getNode(self)

    def getShapeId(self):
        return _opendbpy.dbCapNode_getShapeId(self)

    def setNode(self, nodeid):
        return _opendbpy.dbCapNode_setNode(self, nodeid)

    def isName(self):
        return _opendbpy.dbCapNode_isName(self)

    def isITerm(self):
        return _opendbpy.dbCapNode_isITerm(self)

    def isBTerm(self):
        return _opendbpy.dbCapNode_isBTerm(self)

    def isInternal(self):
        return _opendbpy.dbCapNode_isInternal(self)

    def isBranch(self):
        return _opendbpy.dbCapNode_isBranch(self)

    def isDangling(self):
        return _opendbpy.dbCapNode_isDangling(self)

    def isForeign(self):
        return _opendbpy.dbCapNode_isForeign(self)

    def isTreeNode(self):
        return _opendbpy.dbCapNode_isTreeNode(self)

    def isSourceTerm(self, mblock=None):
        return _opendbpy.dbCapNode_isSourceTerm(self, mblock)

    def isInoutTerm(self, mblock=None):
        return _opendbpy.dbCapNode_isInoutTerm(self, mblock)

    def isSelect(self):
        return _opendbpy.dbCapNode_isSelect(self)

    def setSelect(self, value):
        return _opendbpy.dbCapNode_setSelect(self, value)

    def incrChildrenCnt(self):
        return _opendbpy.dbCapNode_incrChildrenCnt(self)

    def getChildrenCnt(self):
        return _opendbpy.dbCapNode_getChildrenCnt(self)

    def setChildrenCnt(self, cnt):
        return _opendbpy.dbCapNode_setChildrenCnt(self, cnt)

    def setNameFlag(self):
        return _opendbpy.dbCapNode_setNameFlag(self)

    def setBTermFlag(self):
        return _opendbpy.dbCapNode_setBTermFlag(self)

    def setITermFlag(self):
        return _opendbpy.dbCapNode_setITermFlag(self)

    def setInternalFlag(self):
        return _opendbpy.dbCapNode_setInternalFlag(self)

    def setBranchFlag(self):
        return _opendbpy.dbCapNode_setBranchFlag(self)

    def setForeignFlag(self):
        return _opendbpy.dbCapNode_setForeignFlag(self)

    def resetNameFlag(self):
        return _opendbpy.dbCapNode_resetNameFlag(self)

    def resetBTermFlag(self):
        return _opendbpy.dbCapNode_resetBTermFlag(self)

    def resetITermFlag(self):
        return _opendbpy.dbCapNode_resetITermFlag(self)

    def resetInternalFlag(self):
        return _opendbpy.dbCapNode_resetInternalFlag(self)

    def resetBranchFlag(self):
        return _opendbpy.dbCapNode_resetBranchFlag(self)

    def resetForeignFlag(self):
        return _opendbpy.dbCapNode_resetForeignFlag(self)

    def getSortIndex(self):
        return _opendbpy.dbCapNode_getSortIndex(self)

    def setSortIndex(self, idx):
        return _opendbpy.dbCapNode_setSortIndex(self, idx)

    def getTermCoords(self, mblock=None):
        return _opendbpy.dbCapNode_getTermCoords(self, mblock)

    def getITerm(self, mblock=None):
        return _opendbpy.dbCapNode_getITerm(self, mblock)

    def getBTerm(self, mblock=None):
        return _opendbpy.dbCapNode_getBTerm(self, mblock)

    def printCC(self):
        return _opendbpy.dbCapNode_printCC(self)

    def checkCC(self):
        return _opendbpy.dbCapNode_checkCC(self)

    def getCCSegs(self):
        return _opendbpy.dbCapNode_getCCSegs(self)

    def getNet(self):
        return _opendbpy.dbCapNode_getNet(self)

    def setNet(self, netid):
        return _opendbpy.dbCapNode_setNet(self, netid)

    def setNext(self, nextid):
        return _opendbpy.dbCapNode_setNext(self, nextid)

    @staticmethod
    def create(net, node, foreign):
        return _opendbpy.dbCapNode_create(net, node, foreign)

    def addToNet(self):
        return _opendbpy.dbCapNode_addToNet(self)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbCapNode_destroy(*args)

    @staticmethod
    def getCapNode(block, oid):
        return _opendbpy.dbCapNode_getCapNode(block, oid)

    def __init__(self):
        _opendbpy.dbCapNode_swiginit(self, _opendbpy.new_dbCapNode())
    __swig_destroy__ = _opendbpy.delete_dbCapNode

# Register dbCapNode in _opendbpy:
_opendbpy.dbCapNode_swigregister(dbCapNode)

def dbCapNode_create(net, node, foreign):
    return _opendbpy.dbCapNode_create(net, node, foreign)

def dbCapNode_destroy(*args):
    return _opendbpy.dbCapNode_destroy(*args)

def dbCapNode_getCapNode(block, oid):
    return _opendbpy.dbCapNode_getCapNode(block, oid)

class dbRSeg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addRSegResistance(self, other):
        return _opendbpy.dbRSeg_addRSegResistance(self, other)

    def addRSegCapacitance(self, other):
        return _opendbpy.dbRSeg_addRSegCapacitance(self, other)

    def getResistance(self, corner=0):
        return _opendbpy.dbRSeg_getResistance(self, corner)

    def getAllRes(self, res):
        return _opendbpy.dbRSeg_getAllRes(self, res)

    def addAllRes(self, res):
        return _opendbpy.dbRSeg_addAllRes(self, res)

    def getGndCap(self, gndcap, totalcap):
        return _opendbpy.dbRSeg_getGndCap(self, gndcap, totalcap)

    def addGndCap(self, gndcap, totalcap):
        return _opendbpy.dbRSeg_addGndCap(self, gndcap, totalcap)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _opendbpy.dbRSeg_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def addGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _opendbpy.dbRSeg_addGndTotalCap(self, gndcap, totalcap, MillerMult)

    def mergeRCs(self, mrsegs):
        return _opendbpy.dbRSeg_mergeRCs(self, mrsegs)

    def adjustSourceCapacitance(self, factor, corner):
        return _opendbpy.dbRSeg_adjustSourceCapacitance(self, factor, corner)

    def adjustCapacitance(self, *args):
        return _opendbpy.dbRSeg_adjustCapacitance(self, *args)

    def setCapacitance(self, cap, corner=0):
        return _opendbpy.dbRSeg_setCapacitance(self, cap, corner)

    def updatedCap(self):
        return _opendbpy.dbRSeg_updatedCap(self)

    def getSourceCapacitance(self, corner=0):
        return _opendbpy.dbRSeg_getSourceCapacitance(self, corner)

    def getCapacitance(self, *args):
        return _opendbpy.dbRSeg_getCapacitance(self, *args)

    def getCcSegs(self, ccsegs):
        return _opendbpy.dbRSeg_getCcSegs(self, ccsegs)

    def printCcSegs(self):
        return _opendbpy.dbRSeg_printCcSegs(self)

    def printCC(self):
        return _opendbpy.dbRSeg_printCC(self)

    def checkCC(self):
        return _opendbpy.dbRSeg_checkCC(self)

    def getCapTable(self, cap):
        return _opendbpy.dbRSeg_getCapTable(self, cap)

    def setResistance(self, res, corner=0):
        return _opendbpy.dbRSeg_setResistance(self, res, corner)

    def adjustResistance(self, *args):
        return _opendbpy.dbRSeg_adjustResistance(self, *args)

    def setNext(self, next_id):
        return _opendbpy.dbRSeg_setNext(self, next_id)

    def getSourceNode(self):
        return _opendbpy.dbRSeg_getSourceNode(self)

    def getSourceCapNode(self):
        return _opendbpy.dbRSeg_getSourceCapNode(self)

    def setSourceNode(self, nodeid):
        return _opendbpy.dbRSeg_setSourceNode(self, nodeid)

    def getTargetNode(self):
        return _opendbpy.dbRSeg_getTargetNode(self)

    def getTargetCapNode(self):
        return _opendbpy.dbRSeg_getTargetCapNode(self)

    def setTargetNode(self, nodeid):
        return _opendbpy.dbRSeg_setTargetNode(self, nodeid)

    def getShapeId(self):
        return _opendbpy.dbRSeg_getShapeId(self)

    def setCoords(self, x, y):
        return _opendbpy.dbRSeg_setCoords(self, x, y)

    def getCoords(self):
        return _opendbpy.dbRSeg_getCoords(self)

    def updateShapeId(self, nsid):
        return _opendbpy.dbRSeg_updateShapeId(self, nsid)

    def pathLowToHigh(self):
        return _opendbpy.dbRSeg_pathLowToHigh(self)

    def allocatedCap(self):
        return _opendbpy.dbRSeg_allocatedCap(self)

    def getLengthWidth(self, w):
        return _opendbpy.dbRSeg_getLengthWidth(self, w)

    def addToNet(self):
        return _opendbpy.dbRSeg_addToNet(self)

    def getNet(self):
        return _opendbpy.dbRSeg_getNet(self)

    @staticmethod
    def create(net, x, y, path_dir, allocate_cap):
        return _opendbpy.dbRSeg_create(net, x, y, path_dir, allocate_cap)

    @staticmethod
    def destroyS(seg):
        return _opendbpy.dbRSeg_destroyS(seg)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbRSeg_destroy(*args)

    @staticmethod
    def getRSeg(block, oid):
        return _opendbpy.dbRSeg_getRSeg(block, oid)

    def __init__(self):
        _opendbpy.dbRSeg_swiginit(self, _opendbpy.new_dbRSeg())
    __swig_destroy__ = _opendbpy.delete_dbRSeg

# Register dbRSeg in _opendbpy:
_opendbpy.dbRSeg_swigregister(dbRSeg)

def dbRSeg_create(net, x, y, path_dir, allocate_cap):
    return _opendbpy.dbRSeg_create(net, x, y, path_dir, allocate_cap)

def dbRSeg_destroyS(seg):
    return _opendbpy.dbRSeg_destroyS(seg)

def dbRSeg_destroy(*args):
    return _opendbpy.dbRSeg_destroy(*args)

def dbRSeg_getRSeg(block, oid):
    return _opendbpy.dbRSeg_getRSeg(block, oid)

class dbCCSeg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def adjustCapacitance(self, *args):
        return _opendbpy.dbCCSeg_adjustCapacitance(self, *args)

    def getCapacitance(self, corner=0):
        return _opendbpy.dbCCSeg_getCapacitance(self, corner)

    def setCapacitance(self, cap, corner=0):
        return _opendbpy.dbCCSeg_setCapacitance(self, cap, corner)

    def addCapacitance(self, cap, corner=0):
        return _opendbpy.dbCCSeg_addCapacitance(self, cap, corner)

    def accAllCcCap(self, ttcap, MillerMult):
        return _opendbpy.dbCCSeg_accAllCcCap(self, ttcap, MillerMult)

    def getAllCcCap(self, ttcap):
        return _opendbpy.dbCCSeg_getAllCcCap(self, ttcap)

    def setAllCcCap(self, ttcap):
        return _opendbpy.dbCCSeg_setAllCcCap(self, ttcap)

    def getSourceCapNode(self):
        return _opendbpy.dbCCSeg_getSourceCapNode(self)

    def getTargetCapNode(self):
        return _opendbpy.dbCCSeg_getTargetCapNode(self)

    def addCcCapacitance(self, other):
        return _opendbpy.dbCCSeg_addCcCapacitance(self, other)

    def swapCapnode(self, orig, newn):
        return _opendbpy.dbCCSeg_swapCapnode(self, orig, newn)

    def getTheOtherCapn(self, oneCap, cid):
        return _opendbpy.dbCCSeg_getTheOtherCapn(self, oneCap, cid)

    def getSourceNodeNum(self):
        return _opendbpy.dbCCSeg_getSourceNodeNum(self)

    def getTargetNodeNum(self):
        return _opendbpy.dbCCSeg_getTargetNodeNum(self)

    def getSourceNet(self):
        return _opendbpy.dbCCSeg_getSourceNet(self)

    def getTargetNet(self):
        return _opendbpy.dbCCSeg_getTargetNet(self)

    def getInfileCnt(self):
        return _opendbpy.dbCCSeg_getInfileCnt(self)

    def incrInfileCnt(self):
        return _opendbpy.dbCCSeg_incrInfileCnt(self)

    def isMarked(self):
        return _opendbpy.dbCCSeg_isMarked(self)

    def setMark(self, value):
        return _opendbpy.dbCCSeg_setMark(self, value)

    def printCapnCC(self, capn):
        return _opendbpy.dbCCSeg_printCapnCC(self, capn)

    def checkCapnCC(self, capn):
        return _opendbpy.dbCCSeg_checkCapnCC(self, capn)

    def unLink_cc_seg(self, capn):
        return _opendbpy.dbCCSeg_unLink_cc_seg(self, capn)

    def Link_cc_seg(self, capn, cseq):
        return _opendbpy.dbCCSeg_Link_cc_seg(self, capn, cseq)

    @staticmethod
    def findCC(nodeA, nodeB):
        return _opendbpy.dbCCSeg_findCC(nodeA, nodeB)

    @staticmethod
    def create(nodeA, nodeB, mergeParallel=False):
        return _opendbpy.dbCCSeg_create(nodeA, nodeB, mergeParallel)

    @staticmethod
    def destroyS(seg):
        return _opendbpy.dbCCSeg_destroyS(seg)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbCCSeg_destroy(*args)

    @staticmethod
    def getCCSeg(block, oid):
        return _opendbpy.dbCCSeg_getCCSeg(block, oid)

    @staticmethod
    def disconnect(tcc_):
        return _opendbpy.dbCCSeg_disconnect(tcc_)

    @staticmethod
    def connect(tcc_):
        return _opendbpy.dbCCSeg_connect(tcc_)

    def __init__(self):
        _opendbpy.dbCCSeg_swiginit(self, _opendbpy.new_dbCCSeg())
    __swig_destroy__ = _opendbpy.delete_dbCCSeg

# Register dbCCSeg in _opendbpy:
_opendbpy.dbCCSeg_swigregister(dbCCSeg)

def dbCCSeg_findCC(nodeA, nodeB):
    return _opendbpy.dbCCSeg_findCC(nodeA, nodeB)

def dbCCSeg_create(nodeA, nodeB, mergeParallel=False):
    return _opendbpy.dbCCSeg_create(nodeA, nodeB, mergeParallel)

def dbCCSeg_destroyS(seg):
    return _opendbpy.dbCCSeg_destroyS(seg)

def dbCCSeg_destroy(*args):
    return _opendbpy.dbCCSeg_destroy(*args)

def dbCCSeg_getCCSeg(block, oid):
    return _opendbpy.dbCCSeg_getCCSeg(block, oid)

def dbCCSeg_disconnect(tcc_):
    return _opendbpy.dbCCSeg_disconnect(tcc_)

def dbCCSeg_connect(tcc_):
    return _opendbpy.dbCCSeg_connect(tcc_)

class dbRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbRow_getName(self)

    def getConstName(self):
        return _opendbpy.dbRow_getConstName(self)

    def getSite(self):
        return _opendbpy.dbRow_getSite(self)

    def getOrigin(self):
        return _opendbpy.dbRow_getOrigin(self)

    def getOrient(self):
        return _opendbpy.dbRow_getOrient(self)

    def getDirection(self):
        return _opendbpy.dbRow_getDirection(self)

    def getSiteCount(self):
        return _opendbpy.dbRow_getSiteCount(self)

    def getSpacing(self):
        return _opendbpy.dbRow_getSpacing(self)

    def getBBox(self):
        return _opendbpy.dbRow_getBBox(self)

    @staticmethod
    def create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing):
        return _opendbpy.dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbRow_destroy(*args)

    @staticmethod
    def getRow(block, oid):
        return _opendbpy.dbRow_getRow(block, oid)

    def __init__(self):
        _opendbpy.dbRow_swiginit(self, _opendbpy.new_dbRow())
    __swig_destroy__ = _opendbpy.delete_dbRow

# Register dbRow in _opendbpy:
_opendbpy.dbRow_swigregister(dbRow)

def dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing):
    return _opendbpy.dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing)

def dbRow_destroy(*args):
    return _opendbpy.dbRow_destroy(*args)

def dbRow_getRow(block, oid):
    return _opendbpy.dbRow_getRow(block, oid)

class dbRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbRegion_getName(self)

    def getRegionType(self):
        return _opendbpy.dbRegion_getRegionType(self)

    def setRegionType(self, type):
        return _opendbpy.dbRegion_setRegionType(self, type)

    def getRegionInsts(self):
        return _opendbpy.dbRegion_getRegionInsts(self)

    def setInvalid(self, v):
        return _opendbpy.dbRegion_setInvalid(self, v)

    def isInvalid(self):
        return _opendbpy.dbRegion_isInvalid(self)

    def getBoundaries(self):
        return _opendbpy.dbRegion_getBoundaries(self)

    def addInst(self, inst):
        return _opendbpy.dbRegion_addInst(self, inst)

    def removeInst(self, inst):
        return _opendbpy.dbRegion_removeInst(self, inst)

    def getParent(self):
        return _opendbpy.dbRegion_getParent(self)

    def getChildren(self):
        return _opendbpy.dbRegion_getChildren(self)

    def addChild(self, region):
        return _opendbpy.dbRegion_addChild(self, region)

    def getBlock(self):
        return _opendbpy.dbRegion_getBlock(self)

    @staticmethod
    def create(*args):
        return _opendbpy.dbRegion_create(*args)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbRegion_destroy(*args)

    @staticmethod
    def getRegion(block, oid):
        return _opendbpy.dbRegion_getRegion(block, oid)

    def __init__(self):
        _opendbpy.dbRegion_swiginit(self, _opendbpy.new_dbRegion())
    __swig_destroy__ = _opendbpy.delete_dbRegion

# Register dbRegion in _opendbpy:
_opendbpy.dbRegion_swigregister(dbRegion)

def dbRegion_create(*args):
    return _opendbpy.dbRegion_create(*args)

def dbRegion_destroy(*args):
    return _opendbpy.dbRegion_destroy(*args)

def dbRegion_getRegion(block, oid):
    return _opendbpy.dbRegion_getRegion(block, oid)

class dbLib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbLib_getName(self)

    def getConstName(self):
        return _opendbpy.dbLib_getConstName(self)

    def getDbUnitsPerMicron(self):
        return _opendbpy.dbLib_getDbUnitsPerMicron(self)

    def getTech(self):
        return _opendbpy.dbLib_getTech(self)

    def getMasters(self):
        return _opendbpy.dbLib_getMasters(self)

    def findMaster(self, name):
        return _opendbpy.dbLib_findMaster(self, name)

    def getSites(self):
        return _opendbpy.dbLib_getSites(self)

    def findSite(self, name):
        return _opendbpy.dbLib_findSite(self, name)

    def getLefUnits(self):
        return _opendbpy.dbLib_getLefUnits(self)

    def setLefUnits(self, units):
        return _opendbpy.dbLib_setLefUnits(self, units)

    def getHierarchyDelimeter(self):
        return _opendbpy.dbLib_getHierarchyDelimeter(self)

    def setBusDelimeters(self, left, right):
        return _opendbpy.dbLib_setBusDelimeters(self, left, right)

    def getBusDelimeters(self, left, right):
        return _opendbpy.dbLib_getBusDelimeters(self, left, right)

    @staticmethod
    def create(db, name, hierarchy_delimeter=0):
        return _opendbpy.dbLib_create(db, name, hierarchy_delimeter)

    @staticmethod
    def getLib(db, oid):
        return _opendbpy.dbLib_getLib(db, oid)

    @staticmethod
    def destroy(lib):
        return _opendbpy.dbLib_destroy(lib)

    def __init__(self):
        _opendbpy.dbLib_swiginit(self, _opendbpy.new_dbLib())
    __swig_destroy__ = _opendbpy.delete_dbLib

# Register dbLib in _opendbpy:
_opendbpy.dbLib_swigregister(dbLib)

def dbLib_create(db, name, hierarchy_delimeter=0):
    return _opendbpy.dbLib_create(db, name, hierarchy_delimeter)

def dbLib_getLib(db, oid):
    return _opendbpy.dbLib_getLib(db, oid)

def dbLib_destroy(lib):
    return _opendbpy.dbLib_destroy(lib)

class dbSite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbSite_getName(self)

    def getConstName(self):
        return _opendbpy.dbSite_getConstName(self)

    def getWidth(self):
        return _opendbpy.dbSite_getWidth(self)

    def setWidth(self, width):
        return _opendbpy.dbSite_setWidth(self, width)

    def getHeight(self):
        return _opendbpy.dbSite_getHeight(self)

    def setHeight(self, height):
        return _opendbpy.dbSite_setHeight(self, height)

    def getClass(self):
        return _opendbpy.dbSite_getClass(self)

    def setClass(self, site_class):
        return _opendbpy.dbSite_setClass(self, site_class)

    def setSymmetryX(self):
        return _opendbpy.dbSite_setSymmetryX(self)

    def getSymmetryX(self):
        return _opendbpy.dbSite_getSymmetryX(self)

    def setSymmetryY(self):
        return _opendbpy.dbSite_setSymmetryY(self)

    def getSymmetryY(self):
        return _opendbpy.dbSite_getSymmetryY(self)

    def setSymmetryR90(self):
        return _opendbpy.dbSite_setSymmetryR90(self)

    def getSymmetryR90(self):
        return _opendbpy.dbSite_getSymmetryR90(self)

    def getLib(self):
        return _opendbpy.dbSite_getLib(self)

    @staticmethod
    def create(lib, name):
        return _opendbpy.dbSite_create(lib, name)

    @staticmethod
    def getSite(lib, oid):
        return _opendbpy.dbSite_getSite(lib, oid)

    def __init__(self):
        _opendbpy.dbSite_swiginit(self, _opendbpy.new_dbSite())
    __swig_destroy__ = _opendbpy.delete_dbSite

# Register dbSite in _opendbpy:
_opendbpy.dbSite_swigregister(dbSite)

def dbSite_create(lib, name):
    return _opendbpy.dbSite_create(lib, name)

def dbSite_getSite(lib, oid):
    return _opendbpy.dbSite_getSite(lib, oid)

class dbMaster(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbMaster_getName(self)

    def getConstName(self):
        return _opendbpy.dbMaster_getConstName(self)

    def getOrigin(self):
        return _opendbpy.dbMaster_getOrigin(self)

    def setOrigin(self, x, y):
        return _opendbpy.dbMaster_setOrigin(self, x, y)

    def getWidth(self):
        return _opendbpy.dbMaster_getWidth(self)

    def setWidth(self, width):
        return _opendbpy.dbMaster_setWidth(self, width)

    def getHeight(self):
        return _opendbpy.dbMaster_getHeight(self)

    def setHeight(self, height):
        return _opendbpy.dbMaster_setHeight(self, height)

    def isFiller(self):
        return _opendbpy.dbMaster_isFiller(self)

    def getType(self):
        return _opendbpy.dbMaster_getType(self)

    def isCoreAutoPlaceable(self):
        return _opendbpy.dbMaster_isCoreAutoPlaceable(self)

    def setType(self, type):
        return _opendbpy.dbMaster_setType(self, type)

    def getLEQ(self):
        return _opendbpy.dbMaster_getLEQ(self)

    def setLEQ(self, master):
        return _opendbpy.dbMaster_setLEQ(self, master)

    def getEEQ(self):
        return _opendbpy.dbMaster_getEEQ(self)

    def setEEQ(self, master):
        return _opendbpy.dbMaster_setEEQ(self, master)

    def setSymmetryX(self):
        return _opendbpy.dbMaster_setSymmetryX(self)

    def getSymmetryX(self):
        return _opendbpy.dbMaster_getSymmetryX(self)

    def setSymmetryY(self):
        return _opendbpy.dbMaster_setSymmetryY(self)

    def getSymmetryY(self):
        return _opendbpy.dbMaster_getSymmetryY(self)

    def setSymmetryR90(self):
        return _opendbpy.dbMaster_setSymmetryR90(self)

    def getSymmetryR90(self):
        return _opendbpy.dbMaster_getSymmetryR90(self)

    def getMTerms(self):
        return _opendbpy.dbMaster_getMTerms(self)

    def findMTerm(self, *args):
        return _opendbpy.dbMaster_findMTerm(self, *args)

    def getLib(self):
        return _opendbpy.dbMaster_getLib(self)

    def getObstructions(self):
        return _opendbpy.dbMaster_getObstructions(self)

    def getPlacementBoundary(self):
        return _opendbpy.dbMaster_getPlacementBoundary(self)

    def transform(self, t):
        return _opendbpy.dbMaster_transform(self, t)

    def setFrozen(self):
        return _opendbpy.dbMaster_setFrozen(self)

    def isFrozen(self):
        return _opendbpy.dbMaster_isFrozen(self)

    def getOutputIndex(self):
        return _opendbpy.dbMaster_getOutputIndex(self)

    def setOutputIndex(self, v):
        return _opendbpy.dbMaster_setOutputIndex(self, v)

    def setClockedIndex(self, v):
        return _opendbpy.dbMaster_setClockedIndex(self, v)

    def getClockedIndex(self):
        return _opendbpy.dbMaster_getClockedIndex(self)

    def setSequential(self, v):
        return _opendbpy.dbMaster_setSequential(self, v)

    def isSequential(self):
        return _opendbpy.dbMaster_isSequential(self)

    def setMark(self, mark):
        return _opendbpy.dbMaster_setMark(self, mark)

    def isMarked(self):
        return _opendbpy.dbMaster_isMarked(self)

    def isSpecialPower(self):
        return _opendbpy.dbMaster_isSpecialPower(self)

    def setSpecialPower(self, v):
        return _opendbpy.dbMaster_setSpecialPower(self, v)

    def getMTermCount(self):
        return _opendbpy.dbMaster_getMTermCount(self)

    def setSite(self, site):
        return _opendbpy.dbMaster_setSite(self, site)

    def getSite(self):
        return _opendbpy.dbMaster_getSite(self)

    def getMasterId(self):
        return _opendbpy.dbMaster_getMasterId(self)

    @staticmethod
    def create(lib, name):
        return _opendbpy.dbMaster_create(lib, name)

    @staticmethod
    def getMaster(lib, oid):
        return _opendbpy.dbMaster_getMaster(lib, oid)

    def staCell(self):
        return _opendbpy.dbMaster_staCell(self)

    def staSetCell(self, cell):
        return _opendbpy.dbMaster_staSetCell(self, cell)

    def __init__(self):
        _opendbpy.dbMaster_swiginit(self, _opendbpy.new_dbMaster())
    __swig_destroy__ = _opendbpy.delete_dbMaster

# Register dbMaster in _opendbpy:
_opendbpy.dbMaster_swigregister(dbMaster)

def dbMaster_create(lib, name):
    return _opendbpy.dbMaster_create(lib, name)

def dbMaster_getMaster(lib, oid):
    return _opendbpy.dbMaster_getMaster(lib, oid)

class dbMTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getConstName(self):
        return _opendbpy.dbMTerm_getConstName(self)

    def getName(self, *args):
        return _opendbpy.dbMTerm_getName(self, *args)

    def getSigType(self):
        return _opendbpy.dbMTerm_getSigType(self)

    def getIoType(self):
        return _opendbpy.dbMTerm_getIoType(self)

    def setMark(self, v):
        return _opendbpy.dbMTerm_setMark(self, v)

    def isSetMark(self):
        return _opendbpy.dbMTerm_isSetMark(self)

    def getMaster(self):
        return _opendbpy.dbMTerm_getMaster(self)

    def getMPins(self):
        return _opendbpy.dbMTerm_getMPins(self)

    def getTargets(self):
        return _opendbpy.dbMTerm_getTargets(self)

    def addPartialMetalAreaEntry(self, inval, refly=None):
        return _opendbpy.dbMTerm_addPartialMetalAreaEntry(self, inval, refly)

    def addPartialMetalSideAreaEntry(self, inval, refly=None):
        return _opendbpy.dbMTerm_addPartialMetalSideAreaEntry(self, inval, refly)

    def addPartialCutAreaEntry(self, inval, refly=None):
        return _opendbpy.dbMTerm_addPartialCutAreaEntry(self, inval, refly)

    def addDiffAreaEntry(self, inval, refly=None):
        return _opendbpy.dbMTerm_addDiffAreaEntry(self, inval, refly)

    def createDefaultAntennaModel(self):
        return _opendbpy.dbMTerm_createDefaultAntennaModel(self)

    def createOxide2AntennaModel(self):
        return _opendbpy.dbMTerm_createOxide2AntennaModel(self)

    def hasDefaultAntennaModel(self):
        return _opendbpy.dbMTerm_hasDefaultAntennaModel(self)

    def hasOxide2AntennaModel(self):
        return _opendbpy.dbMTerm_hasOxide2AntennaModel(self)

    def getDefaultAntennaModel(self):
        return _opendbpy.dbMTerm_getDefaultAntennaModel(self)

    def getOxide2AntennaModel(self):
        return _opendbpy.dbMTerm_getOxide2AntennaModel(self)

    def writeAntennaLef(self, writer):
        return _opendbpy.dbMTerm_writeAntennaLef(self, writer)

    def getDiffArea(self, data):
        return _opendbpy.dbMTerm_getDiffArea(self, data)

    def staPort(self):
        return _opendbpy.dbMTerm_staPort(self)

    def staSetPort(self, port):
        return _opendbpy.dbMTerm_staSetPort(self, port)

    def getIndex(self):
        return _opendbpy.dbMTerm_getIndex(self)

    @staticmethod
    def create(*args):
        return _opendbpy.dbMTerm_create(*args)

    @staticmethod
    def getMTerm(master, oid):
        return _opendbpy.dbMTerm_getMTerm(master, oid)

    def __init__(self):
        _opendbpy.dbMTerm_swiginit(self, _opendbpy.new_dbMTerm())
    __swig_destroy__ = _opendbpy.delete_dbMTerm

# Register dbMTerm in _opendbpy:
_opendbpy.dbMTerm_swigregister(dbMTerm)

def dbMTerm_create(*args):
    return _opendbpy.dbMTerm_create(*args)

def dbMTerm_getMTerm(master, oid):
    return _opendbpy.dbMTerm_getMTerm(master, oid)

class dbMPin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMTerm(self):
        return _opendbpy.dbMPin_getMTerm(self)

    def getMaster(self):
        return _opendbpy.dbMPin_getMaster(self)

    def getGeometry(self):
        return _opendbpy.dbMPin_getGeometry(self)

    @staticmethod
    def create(mterm):
        return _opendbpy.dbMPin_create(mterm)

    @staticmethod
    def getMPin(master, oid):
        return _opendbpy.dbMPin_getMPin(master, oid)

    def __init__(self):
        _opendbpy.dbMPin_swiginit(self, _opendbpy.new_dbMPin())
    __swig_destroy__ = _opendbpy.delete_dbMPin

# Register dbMPin in _opendbpy:
_opendbpy.dbMPin_swigregister(dbMPin)

def dbMPin_create(mterm):
    return _opendbpy.dbMPin_create(mterm)

def dbMPin_getMPin(master, oid):
    return _opendbpy.dbMPin_getMPin(master, oid)

class dbTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMaster(self):
        return _opendbpy.dbTarget_getMaster(self)

    def getMTerm(self):
        return _opendbpy.dbTarget_getMTerm(self)

    def getTechLayer(self):
        return _opendbpy.dbTarget_getTechLayer(self)

    def getPoint(self):
        return _opendbpy.dbTarget_getPoint(self)

    @staticmethod
    def create(mterm, layer, point):
        return _opendbpy.dbTarget_create(mterm, layer, point)

    @staticmethod
    def destroy(*args):
        return _opendbpy.dbTarget_destroy(*args)

    @staticmethod
    def getTarget(master, oid):
        return _opendbpy.dbTarget_getTarget(master, oid)

    def __init__(self):
        _opendbpy.dbTarget_swiginit(self, _opendbpy.new_dbTarget())
    __swig_destroy__ = _opendbpy.delete_dbTarget

# Register dbTarget in _opendbpy:
_opendbpy.dbTarget_swigregister(dbTarget)

def dbTarget_create(mterm, layer, point):
    return _opendbpy.dbTarget_create(mterm, layer, point)

def dbTarget_destroy(*args):
    return _opendbpy.dbTarget_destroy(*args)

def dbTarget_getTarget(master, oid):
    return _opendbpy.dbTarget_getTarget(master, oid)

class dbTech(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setDbUnitsPerMicron(self, value):
        return _opendbpy.dbTech_setDbUnitsPerMicron(self, value)

    def getDbUnitsPerMicron(self):
        return _opendbpy.dbTech_getDbUnitsPerMicron(self)

    def getLayers(self):
        return _opendbpy.dbTech_getLayers(self)

    def findLayer(self, *args):
        return _opendbpy.dbTech_findLayer(self, *args)

    def findRoutingLayer(self, level_number):
        return _opendbpy.dbTech_findRoutingLayer(self, level_number)

    def getVias(self):
        return _opendbpy.dbTech_getVias(self)

    def findVia(self, name):
        return _opendbpy.dbTech_findVia(self, name)

    def getLefUnits(self):
        return _opendbpy.dbTech_getLefUnits(self)

    def setLefUnits(self, units):
        return _opendbpy.dbTech_setLefUnits(self, units)

    def getLefVersion(self):
        return _opendbpy.dbTech_getLefVersion(self)

    def getLefVersionStr(self):
        return _opendbpy.dbTech_getLefVersionStr(self)

    def setLefVersion(self, inver):
        return _opendbpy.dbTech_setLefVersion(self, inver)

    def hasNoWireExtAtPin(self):
        return _opendbpy.dbTech_hasNoWireExtAtPin(self)

    def getNoWireExtAtPin(self):
        return _opendbpy.dbTech_getNoWireExtAtPin(self)

    def setNoWireExtAtPin(self, intyp):
        return _opendbpy.dbTech_setNoWireExtAtPin(self, intyp)

    def getNamesCaseSensitive(self):
        return _opendbpy.dbTech_getNamesCaseSensitive(self)

    def setNamesCaseSensitive(self, intyp):
        return _opendbpy.dbTech_setNamesCaseSensitive(self, intyp)

    def hasClearanceMeasure(self):
        return _opendbpy.dbTech_hasClearanceMeasure(self)

    def getClearanceMeasure(self):
        return _opendbpy.dbTech_getClearanceMeasure(self)

    def setClearanceMeasure(self, inmeas):
        return _opendbpy.dbTech_setClearanceMeasure(self, inmeas)

    def hasUseMinSpacingObs(self):
        return _opendbpy.dbTech_hasUseMinSpacingObs(self)

    def getUseMinSpacingObs(self):
        return _opendbpy.dbTech_getUseMinSpacingObs(self)

    def setUseMinSpacingObs(self, inval):
        return _opendbpy.dbTech_setUseMinSpacingObs(self, inval)

    def hasUseMinSpacingPin(self):
        return _opendbpy.dbTech_hasUseMinSpacingPin(self)

    def getUseMinSpacingPin(self):
        return _opendbpy.dbTech_getUseMinSpacingPin(self)

    def setUseMinSpacingPin(self, inval):
        return _opendbpy.dbTech_setUseMinSpacingPin(self, inval)

    def hasManufacturingGrid(self):
        return _opendbpy.dbTech_hasManufacturingGrid(self)

    def getManufacturingGrid(self):
        return _opendbpy.dbTech_getManufacturingGrid(self)

    def setManufacturingGrid(self, ingrd):
        return _opendbpy.dbTech_setManufacturingGrid(self, ingrd)

    def getLayerCount(self):
        return _opendbpy.dbTech_getLayerCount(self)

    def getRoutingLayerCount(self):
        return _opendbpy.dbTech_getRoutingLayerCount(self)

    def getViaCount(self):
        return _opendbpy.dbTech_getViaCount(self)

    def getNonDefaultRules(self):
        return _opendbpy.dbTech_getNonDefaultRules(self)

    def findNonDefaultRule(self, rulename):
        return _opendbpy.dbTech_findNonDefaultRule(self, rulename)

    def findSameNetRule(self, l1, l2):
        return _opendbpy.dbTech_findSameNetRule(self, l1, l2)

    def getSameNetRules(self, rules):
        return _opendbpy.dbTech_getSameNetRules(self, rules)

    def getViaRules(self):
        return _opendbpy.dbTech_getViaRules(self)

    def getViaGenerateRules(self):
        return _opendbpy.dbTech_getViaGenerateRules(self)

    def findViaRule(self, name):
        return _opendbpy.dbTech_findViaRule(self, name)

    def findViaGenerateRule(self, name):
        return _opendbpy.dbTech_findViaGenerateRule(self, name)

    def checkLayer(self, typeChk, widthChk, pitchChk, spacingChk):
        return _opendbpy.dbTech_checkLayer(self, typeChk, widthChk, pitchChk, spacingChk)

    @staticmethod
    def create(db, dbu_per_micron=1000):
        return _opendbpy.dbTech_create(db, dbu_per_micron)

    @staticmethod
    def getTech(db, oid):
        return _opendbpy.dbTech_getTech(db, oid)

    @staticmethod
    def destroy(tech):
        return _opendbpy.dbTech_destroy(tech)

    def __init__(self):
        _opendbpy.dbTech_swiginit(self, _opendbpy.new_dbTech())
    __swig_destroy__ = _opendbpy.delete_dbTech

# Register dbTech in _opendbpy:
_opendbpy.dbTech_swigregister(dbTech)

def dbTech_create(db, dbu_per_micron=1000):
    return _opendbpy.dbTech_create(db, dbu_per_micron)

def dbTech_getTech(db, oid):
    return _opendbpy.dbTech_getTech(db, oid)

def dbTech_destroy(tech):
    return _opendbpy.dbTech_destroy(tech)

class dbTechLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbTechLayer_getName(self)

    def getConstName(self):
        return _opendbpy.dbTechLayer_getConstName(self)

    def hasAlias(self):
        return _opendbpy.dbTechLayer_hasAlias(self)

    def getAlias(self):
        return _opendbpy.dbTechLayer_getAlias(self)

    def setAlias(self, alias):
        return _opendbpy.dbTechLayer_setAlias(self, alias)

    def getWidth(self):
        return _opendbpy.dbTechLayer_getWidth(self)

    def setWidth(self, width):
        return _opendbpy.dbTechLayer_setWidth(self, width)

    def setSpacing(self, spacing):
        return _opendbpy.dbTechLayer_setSpacing(self, spacing)

    def getSpacing(self, *args):
        return _opendbpy.dbTechLayer_getSpacing(self, *args)

    def getMaxWideDRCRange(self, owidth, olength):
        return _opendbpy.dbTechLayer_getMaxWideDRCRange(self, owidth, olength)

    def getMinWideDRCRange(self, owidth, olength):
        return _opendbpy.dbTechLayer_getMinWideDRCRange(self, owidth, olength)

    def getV54SpacingRules(self, sp_rules):
        return _opendbpy.dbTechLayer_getV54SpacingRules(self, sp_rules)

    def hasV55SpacingRules(self):
        return _opendbpy.dbTechLayer_hasV55SpacingRules(self)

    def printV55SpacingRules(self, writer):
        return _opendbpy.dbTechLayer_printV55SpacingRules(self, writer)

    def getV55SpacingTable(self, sptbl):
        return _opendbpy.dbTechLayer_getV55SpacingTable(self, sptbl)

    def initV55LengthIndex(self, numelems):
        return _opendbpy.dbTechLayer_initV55LengthIndex(self, numelems)

    def addV55LengthEntry(self, length):
        return _opendbpy.dbTechLayer_addV55LengthEntry(self, length)

    def initV55WidthIndex(self, numelems):
        return _opendbpy.dbTechLayer_initV55WidthIndex(self, numelems)

    def addV55WidthEntry(self, width):
        return _opendbpy.dbTechLayer_addV55WidthEntry(self, width)

    def initV55SpacingTable(self, numrows, numcols):
        return _opendbpy.dbTechLayer_initV55SpacingTable(self, numrows, numcols)

    def addV55SpacingTableEntry(self, inrow, incol, spacing):
        return _opendbpy.dbTechLayer_addV55SpacingTableEntry(self, inrow, incol, spacing)

    def getV55InfluenceRules(self, inf_tbl):
        return _opendbpy.dbTechLayer_getV55InfluenceRules(self, inf_tbl)

    def getV55InfluenceEntries(self):
        return _opendbpy.dbTechLayer_getV55InfluenceEntries(self)

    def hasTwoWidthsSpacingRules(self):
        return _opendbpy.dbTechLayer_hasTwoWidthsSpacingRules(self)

    def printTwoWidthsSpacingRules(self, writer):
        return _opendbpy.dbTechLayer_printTwoWidthsSpacingRules(self, writer)

    def getTwoWidthsSpacingTable(self, sptbl):
        return _opendbpy.dbTechLayer_getTwoWidthsSpacingTable(self, sptbl)

    def getTwoWidthsSpacingTableNumWidths(self):
        return _opendbpy.dbTechLayer_getTwoWidthsSpacingTableNumWidths(self)

    def getTwoWidthsSpacingTableWidth(self, row):
        return _opendbpy.dbTechLayer_getTwoWidthsSpacingTableWidth(self, row)

    def getTwoWidthsSpacingTableHasPRL(self, row):
        return _opendbpy.dbTechLayer_getTwoWidthsSpacingTableHasPRL(self, row)

    def getTwoWidthsSpacingTablePRL(self, row):
        return _opendbpy.dbTechLayer_getTwoWidthsSpacingTablePRL(self, row)

    def getTwoWidthsSpacingTableEntry(self, row, col):
        return _opendbpy.dbTechLayer_getTwoWidthsSpacingTableEntry(self, row, col)

    def initTwoWidths(self, num_widths):
        return _opendbpy.dbTechLayer_initTwoWidths(self, num_widths)

    def addTwoWidthsIndexEntry(self, width, parallel_run_length=-1):
        return _opendbpy.dbTechLayer_addTwoWidthsIndexEntry(self, width, parallel_run_length)

    def addTwoWidthsSpacingTableEntry(self, inrow, incol, spacing):
        return _opendbpy.dbTechLayer_addTwoWidthsSpacingTableEntry(self, inrow, incol, spacing)

    def createDefaultAntennaRule(self):
        return _opendbpy.dbTechLayer_createDefaultAntennaRule(self)

    def createOxide2AntennaRule(self):
        return _opendbpy.dbTechLayer_createOxide2AntennaRule(self)

    def hasDefaultAntennaRule(self):
        return _opendbpy.dbTechLayer_hasDefaultAntennaRule(self)

    def hasOxide2AntennaRule(self):
        return _opendbpy.dbTechLayer_hasOxide2AntennaRule(self)

    def getDefaultAntennaRule(self):
        return _opendbpy.dbTechLayer_getDefaultAntennaRule(self)

    def getOxide2AntennaRule(self):
        return _opendbpy.dbTechLayer_getOxide2AntennaRule(self)

    def writeAntennaRulesLef(self, writer):
        return _opendbpy.dbTechLayer_writeAntennaRulesLef(self, writer)

    def getMinimumCutRules(self, cut_rules):
        return _opendbpy.dbTechLayer_getMinimumCutRules(self, cut_rules)

    def getMinEnclosureRules(self, enc_rules):
        return _opendbpy.dbTechLayer_getMinEnclosureRules(self, enc_rules)

    def getMinCutRules(self):
        return _opendbpy.dbTechLayer_getMinCutRules(self)

    def getMinEncRules(self):
        return _opendbpy.dbTechLayer_getMinEncRules(self)

    def getPitch(self):
        return _opendbpy.dbTechLayer_getPitch(self)

    def getPitchX(self):
        return _opendbpy.dbTechLayer_getPitchX(self)

    def getPitchY(self):
        return _opendbpy.dbTechLayer_getPitchY(self)

    def setPitch(self, pitch):
        return _opendbpy.dbTechLayer_setPitch(self, pitch)

    def setPitchXY(self, pitch_x, pitch_y):
        return _opendbpy.dbTechLayer_setPitchXY(self, pitch_x, pitch_y)

    def hasXYPitch(self):
        return _opendbpy.dbTechLayer_hasXYPitch(self)

    def getOffset(self):
        return _opendbpy.dbTechLayer_getOffset(self)

    def getOffsetX(self):
        return _opendbpy.dbTechLayer_getOffsetX(self)

    def getOffsetY(self):
        return _opendbpy.dbTechLayer_getOffsetY(self)

    def setOffset(self, pitch):
        return _opendbpy.dbTechLayer_setOffset(self, pitch)

    def setOffsetXY(self, pitch_x, pitch_y):
        return _opendbpy.dbTechLayer_setOffsetXY(self, pitch_x, pitch_y)

    def hasXYOffset(self):
        return _opendbpy.dbTechLayer_hasXYOffset(self)

    def getThickness(self, inthk):
        return _opendbpy.dbTechLayer_getThickness(self, inthk)

    def setThickness(self, thickness):
        return _opendbpy.dbTechLayer_setThickness(self, thickness)

    def hasArea(self):
        return _opendbpy.dbTechLayer_hasArea(self)

    def getArea(self):
        return _opendbpy.dbTechLayer_getArea(self)

    def setArea(self, area):
        return _opendbpy.dbTechLayer_setArea(self, area)

    def hasMaxWidth(self):
        return _opendbpy.dbTechLayer_hasMaxWidth(self)

    def getMaxWidth(self):
        return _opendbpy.dbTechLayer_getMaxWidth(self)

    def setMaxWidth(self, max_width):
        return _opendbpy.dbTechLayer_setMaxWidth(self, max_width)

    def getMinWidth(self):
        return _opendbpy.dbTechLayer_getMinWidth(self)

    def setMinWidth(self, max_width):
        return _opendbpy.dbTechLayer_setMinWidth(self, max_width)

    def hasMinStep(self):
        return _opendbpy.dbTechLayer_hasMinStep(self)

    def getMinStep(self):
        return _opendbpy.dbTechLayer_getMinStep(self)

    def setMinStep(self, min_step):
        return _opendbpy.dbTechLayer_setMinStep(self, min_step)

    def getMinStepType(self):
        return _opendbpy.dbTechLayer_getMinStepType(self)

    def setMinStepType(self, type):
        return _opendbpy.dbTechLayer_setMinStepType(self, type)

    def hasMinStepMaxLength(self):
        return _opendbpy.dbTechLayer_hasMinStepMaxLength(self)

    def getMinStepMaxLength(self):
        return _opendbpy.dbTechLayer_getMinStepMaxLength(self)

    def setMinStepMaxLength(self, length):
        return _opendbpy.dbTechLayer_setMinStepMaxLength(self, length)

    def hasMinStepMaxEdges(self):
        return _opendbpy.dbTechLayer_hasMinStepMaxEdges(self)

    def getMinStepMaxEdges(self):
        return _opendbpy.dbTechLayer_getMinStepMaxEdges(self)

    def setMinStepMaxEdges(self, edges):
        return _opendbpy.dbTechLayer_setMinStepMaxEdges(self, edges)

    def hasProtrusion(self):
        return _opendbpy.dbTechLayer_hasProtrusion(self)

    def getProtrusionWidth(self):
        return _opendbpy.dbTechLayer_getProtrusionWidth(self)

    def getProtrusionLength(self):
        return _opendbpy.dbTechLayer_getProtrusionLength(self)

    def getProtrusionFromWidth(self):
        return _opendbpy.dbTechLayer_getProtrusionFromWidth(self)

    def setProtrusion(self, pt_width, pt_length, pt_from_width):
        return _opendbpy.dbTechLayer_setProtrusion(self, pt_width, pt_length, pt_from_width)

    def getType(self):
        return _opendbpy.dbTechLayer_getType(self)

    def getDirection(self):
        return _opendbpy.dbTechLayer_getDirection(self)

    def setDirection(self, direction):
        return _opendbpy.dbTechLayer_setDirection(self, direction)

    def getResistance(self):
        return _opendbpy.dbTechLayer_getResistance(self)

    def setResistance(self, res):
        return _opendbpy.dbTechLayer_setResistance(self, res)

    def getCapacitance(self):
        return _opendbpy.dbTechLayer_getCapacitance(self)

    def setCapacitance(self, cap):
        return _opendbpy.dbTechLayer_setCapacitance(self, cap)

    def getEdgeCapacitance(self):
        return _opendbpy.dbTechLayer_getEdgeCapacitance(self)

    def setEdgeCapacitance(self, cap):
        return _opendbpy.dbTechLayer_setEdgeCapacitance(self, cap)

    def getWireExtension(self):
        return _opendbpy.dbTechLayer_getWireExtension(self)

    def setWireExtension(self, ext):
        return _opendbpy.dbTechLayer_setWireExtension(self, ext)

    def getNumber(self):
        return _opendbpy.dbTechLayer_getNumber(self)

    def getRoutingLevel(self):
        return _opendbpy.dbTechLayer_getRoutingLevel(self)

    def getLowerLayer(self):
        return _opendbpy.dbTechLayer_getLowerLayer(self)

    def getUpperLayer(self):
        return _opendbpy.dbTechLayer_getUpperLayer(self)

    def getTech(self):
        return _opendbpy.dbTechLayer_getTech(self)

    @staticmethod
    def create(tech, name, type):
        return _opendbpy.dbTechLayer_create(tech, name, type)

    @staticmethod
    def getTechLayer(tech, oid):
        return _opendbpy.dbTechLayer_getTechLayer(tech, oid)

    def __init__(self):
        _opendbpy.dbTechLayer_swiginit(self, _opendbpy.new_dbTechLayer())
    __swig_destroy__ = _opendbpy.delete_dbTechLayer

# Register dbTechLayer in _opendbpy:
_opendbpy.dbTechLayer_swigregister(dbTechLayer)

def dbTechLayer_create(tech, name, type):
    return _opendbpy.dbTechLayer_create(tech, name, type)

def dbTechLayer_getTechLayer(tech, oid):
    return _opendbpy.dbTechLayer_getTechLayer(tech, oid)

class dbTechVia(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbTechVia_getName(self)

    def getConstName(self):
        return _opendbpy.dbTechVia_getConstName(self)

    def isDefault(self):
        return _opendbpy.dbTechVia_isDefault(self)

    def setDefault(self):
        return _opendbpy.dbTechVia_setDefault(self)

    def isTopOfStack(self):
        return _opendbpy.dbTechVia_isTopOfStack(self)

    def setTopOfStack(self):
        return _opendbpy.dbTechVia_setTopOfStack(self)

    def getResistance(self):
        return _opendbpy.dbTechVia_getResistance(self)

    def setResistance(self, res):
        return _opendbpy.dbTechVia_setResistance(self, res)

    def setPattern(self, pattern):
        return _opendbpy.dbTechVia_setPattern(self, pattern)

    def getPattern(self):
        return _opendbpy.dbTechVia_getPattern(self)

    def setViaGenerateRule(self, rule):
        return _opendbpy.dbTechVia_setViaGenerateRule(self, rule)

    def getViaGenerateRule(self):
        return _opendbpy.dbTechVia_getViaGenerateRule(self)

    def hasParams(self):
        return _opendbpy.dbTechVia_hasParams(self)

    def setViaParams(self, params):
        return _opendbpy.dbTechVia_setViaParams(self, params)

    def getViaParams(self):
        return _opendbpy.dbTechVia_getViaParams(self)

    def getTech(self):
        return _opendbpy.dbTechVia_getTech(self)

    def getBBox(self):
        return _opendbpy.dbTechVia_getBBox(self)

    def getBoxes(self):
        return _opendbpy.dbTechVia_getBoxes(self)

    def getTopLayer(self):
        return _opendbpy.dbTechVia_getTopLayer(self)

    def getBottomLayer(self):
        return _opendbpy.dbTechVia_getBottomLayer(self)

    def getNonDefaultRule(self):
        return _opendbpy.dbTechVia_getNonDefaultRule(self)

    @staticmethod
    def create(*args):
        return _opendbpy.dbTechVia_create(*args)

    @staticmethod
    def clone(rule, invia_, new_name):
        return _opendbpy.dbTechVia_clone(rule, invia_, new_name)

    @staticmethod
    def getTechVia(tech, oid):
        return _opendbpy.dbTechVia_getTechVia(tech, oid)

    def __init__(self):
        _opendbpy.dbTechVia_swiginit(self, _opendbpy.new_dbTechVia())
    __swig_destroy__ = _opendbpy.delete_dbTechVia

# Register dbTechVia in _opendbpy:
_opendbpy.dbTechVia_swigregister(dbTechVia)

def dbTechVia_create(*args):
    return _opendbpy.dbTechVia_create(*args)

def dbTechVia_clone(rule, invia_, new_name):
    return _opendbpy.dbTechVia_clone(rule, invia_, new_name)

def dbTechVia_getTechVia(tech, oid):
    return _opendbpy.dbTechVia_getTechVia(tech, oid)

class dbTechViaRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbTechViaRule_getName(self)

    def addVia(self, via):
        return _opendbpy.dbTechViaRule_addVia(self, via)

    def getViaCount(self):
        return _opendbpy.dbTechViaRule_getViaCount(self)

    def getVia(self, indx):
        return _opendbpy.dbTechViaRule_getVia(self, indx)

    def getViaLayerRuleCount(self):
        return _opendbpy.dbTechViaRule_getViaLayerRuleCount(self)

    def getViaLayerRule(self, indx):
        return _opendbpy.dbTechViaRule_getViaLayerRule(self, indx)

    @staticmethod
    def create(tech, name):
        return _opendbpy.dbTechViaRule_create(tech, name)

    @staticmethod
    def getTechViaRule(tech, oid):
        return _opendbpy.dbTechViaRule_getTechViaRule(tech, oid)

    def __init__(self):
        _opendbpy.dbTechViaRule_swiginit(self, _opendbpy.new_dbTechViaRule())
    __swig_destroy__ = _opendbpy.delete_dbTechViaRule

# Register dbTechViaRule in _opendbpy:
_opendbpy.dbTechViaRule_swigregister(dbTechViaRule)

def dbTechViaRule_create(tech, name):
    return _opendbpy.dbTechViaRule_create(tech, name)

def dbTechViaRule_getTechViaRule(tech, oid):
    return _opendbpy.dbTechViaRule_getTechViaRule(tech, oid)

class dbTechViaLayerRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer(self):
        return _opendbpy.dbTechViaLayerRule_getLayer(self)

    def getDirection(self):
        return _opendbpy.dbTechViaLayerRule_getDirection(self)

    def setDirection(self, dir):
        return _opendbpy.dbTechViaLayerRule_setDirection(self, dir)

    def hasWidth(self):
        return _opendbpy.dbTechViaLayerRule_hasWidth(self)

    def getWidth(self, minWidth, maxWidth):
        return _opendbpy.dbTechViaLayerRule_getWidth(self, minWidth, maxWidth)

    def setWidth(self, minWidth, maxWidth):
        return _opendbpy.dbTechViaLayerRule_setWidth(self, minWidth, maxWidth)

    def hasEnclosure(self):
        return _opendbpy.dbTechViaLayerRule_hasEnclosure(self)

    def getEnclosure(self):
        return _opendbpy.dbTechViaLayerRule_getEnclosure(self)

    def setEnclosure(self, overhang1, overhang2):
        return _opendbpy.dbTechViaLayerRule_setEnclosure(self, overhang1, overhang2)

    def hasOverhang(self):
        return _opendbpy.dbTechViaLayerRule_hasOverhang(self)

    def getOverhang(self):
        return _opendbpy.dbTechViaLayerRule_getOverhang(self)

    def setOverhang(self, overhang):
        return _opendbpy.dbTechViaLayerRule_setOverhang(self, overhang)

    def hasMetalOverhang(self):
        return _opendbpy.dbTechViaLayerRule_hasMetalOverhang(self)

    def getMetalOverhang(self):
        return _opendbpy.dbTechViaLayerRule_getMetalOverhang(self)

    def setMetalOverhang(self, overhang):
        return _opendbpy.dbTechViaLayerRule_setMetalOverhang(self, overhang)

    def hasRect(self):
        return _opendbpy.dbTechViaLayerRule_hasRect(self)

    def getRect(self):
        return _opendbpy.dbTechViaLayerRule_getRect(self)

    def setRect(self):
        return _opendbpy.dbTechViaLayerRule_setRect(self)

    def hasSpacing(self):
        return _opendbpy.dbTechViaLayerRule_hasSpacing(self)

    def getSpacing(self):
        return _opendbpy.dbTechViaLayerRule_getSpacing(self)

    def setSpacing(self, x_spacing, y_spacing):
        return _opendbpy.dbTechViaLayerRule_setSpacing(self, x_spacing, y_spacing)

    def hasResistance(self):
        return _opendbpy.dbTechViaLayerRule_hasResistance(self)

    def setResistance(self, r):
        return _opendbpy.dbTechViaLayerRule_setResistance(self, r)

    def getResistance(self):
        return _opendbpy.dbTechViaLayerRule_getResistance(self)

    @staticmethod
    def create(*args):
        return _opendbpy.dbTechViaLayerRule_create(*args)

    @staticmethod
    def getTechViaLayerRule(tech, oid):
        return _opendbpy.dbTechViaLayerRule_getTechViaLayerRule(tech, oid)

    def __init__(self):
        _opendbpy.dbTechViaLayerRule_swiginit(self, _opendbpy.new_dbTechViaLayerRule())
    __swig_destroy__ = _opendbpy.delete_dbTechViaLayerRule

# Register dbTechViaLayerRule in _opendbpy:
_opendbpy.dbTechViaLayerRule_swigregister(dbTechViaLayerRule)

def dbTechViaLayerRule_create(*args):
    return _opendbpy.dbTechViaLayerRule_create(*args)

def dbTechViaLayerRule_getTechViaLayerRule(tech, oid):
    return _opendbpy.dbTechViaLayerRule_getTechViaLayerRule(tech, oid)

class dbTechViaGenerateRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbTechViaGenerateRule_getName(self)

    def isDefault(self):
        return _opendbpy.dbTechViaGenerateRule_isDefault(self)

    def getViaLayerRuleCount(self):
        return _opendbpy.dbTechViaGenerateRule_getViaLayerRuleCount(self)

    def getViaLayerRule(self, indx):
        return _opendbpy.dbTechViaGenerateRule_getViaLayerRule(self, indx)

    @staticmethod
    def create(tech, name, is_default):
        return _opendbpy.dbTechViaGenerateRule_create(tech, name, is_default)

    @staticmethod
    def getTechViaGenerateRule(tech, oid):
        return _opendbpy.dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid)

    def __init__(self):
        _opendbpy.dbTechViaGenerateRule_swiginit(self, _opendbpy.new_dbTechViaGenerateRule())
    __swig_destroy__ = _opendbpy.delete_dbTechViaGenerateRule

# Register dbTechViaGenerateRule in _opendbpy:
_opendbpy.dbTechViaGenerateRule_swigregister(dbTechViaGenerateRule)

def dbTechViaGenerateRule_create(tech, name, is_default):
    return _opendbpy.dbTechViaGenerateRule_create(tech, name, is_default)

def dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid):
    return _opendbpy.dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid)

class dbTechLayerSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isUnconditional(self):
        return _opendbpy.dbTechLayerSpacingRule_isUnconditional(self)

    def getSpacing(self):
        return _opendbpy.dbTechLayerSpacingRule_getSpacing(self)

    def getLengthThreshold(self, threshold):
        return _opendbpy.dbTechLayerSpacingRule_getLengthThreshold(self, threshold)

    def getLengthThresholdRange(self, rmin, rmax):
        return _opendbpy.dbTechLayerSpacingRule_getLengthThresholdRange(self, rmin, rmax)

    def getRange(self, rmin, rmax):
        return _opendbpy.dbTechLayerSpacingRule_getRange(self, rmin, rmax)

    def hasUseLengthThreshold(self):
        return _opendbpy.dbTechLayerSpacingRule_hasUseLengthThreshold(self)

    def getInfluence(self, influence):
        return _opendbpy.dbTechLayerSpacingRule_getInfluence(self, influence)

    def getInfluenceRange(self, rmin, rmax):
        return _opendbpy.dbTechLayerSpacingRule_getInfluenceRange(self, rmin, rmax)

    def getRangeRange(self, rmin, rmax):
        return _opendbpy.dbTechLayerSpacingRule_getRangeRange(self, rmin, rmax)

    def getAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet):
        return _opendbpy.dbTechLayerSpacingRule_getAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet)

    def getCutLayer4Spacing(self, outly):
        return _opendbpy.dbTechLayerSpacingRule_getCutLayer4Spacing(self, outly)

    def getCutStacking(self):
        return _opendbpy.dbTechLayerSpacingRule_getCutStacking(self)

    def getCutCenterToCenter(self):
        return _opendbpy.dbTechLayerSpacingRule_getCutCenterToCenter(self)

    def getCutSameNet(self):
        return _opendbpy.dbTechLayerSpacingRule_getCutSameNet(self)

    def getCutParallelOverlap(self):
        return _opendbpy.dbTechLayerSpacingRule_getCutParallelOverlap(self)

    def getCutArea(self):
        return _opendbpy.dbTechLayerSpacingRule_getCutArea(self)

    def writeLef(self, writer):
        return _opendbpy.dbTechLayerSpacingRule_writeLef(self, writer)

    def setLengthThreshold(self, threshold):
        return _opendbpy.dbTechLayerSpacingRule_setLengthThreshold(self, threshold)

    def setSpacing(self, spacing):
        return _opendbpy.dbTechLayerSpacingRule_setSpacing(self, spacing)

    def setLengthThresholdRange(self, rmin, rmax):
        return _opendbpy.dbTechLayerSpacingRule_setLengthThresholdRange(self, rmin, rmax)

    def setRange(self, rmin, rmax):
        return _opendbpy.dbTechLayerSpacingRule_setRange(self, rmin, rmax)

    def setUseLengthThreshold(self):
        return _opendbpy.dbTechLayerSpacingRule_setUseLengthThreshold(self)

    def setInfluence(self, influence):
        return _opendbpy.dbTechLayerSpacingRule_setInfluence(self, influence)

    def setInfluenceRange(self, rmin, rmax):
        return _opendbpy.dbTechLayerSpacingRule_setInfluenceRange(self, rmin, rmax)

    def setRangeRange(self, rmin, rmax):
        return _opendbpy.dbTechLayerSpacingRule_setRangeRange(self, rmin, rmax)

    def setAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet):
        return _opendbpy.dbTechLayerSpacingRule_setAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet)

    def setCutLayer4Spacing(self, cutly):
        return _opendbpy.dbTechLayerSpacingRule_setCutLayer4Spacing(self, cutly)

    def setCutStacking(self, stacking):
        return _opendbpy.dbTechLayerSpacingRule_setCutStacking(self, stacking)

    def setCutCenterToCenter(self, c2c):
        return _opendbpy.dbTechLayerSpacingRule_setCutCenterToCenter(self, c2c)

    def setCutSameNet(self, same_net):
        return _opendbpy.dbTechLayerSpacingRule_setCutSameNet(self, same_net)

    def setCutParallelOverlap(self, overlap):
        return _opendbpy.dbTechLayerSpacingRule_setCutParallelOverlap(self, overlap)

    def setCutArea(self, area):
        return _opendbpy.dbTechLayerSpacingRule_setCutArea(self, area)

    def setEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges):
        return _opendbpy.dbTechLayerSpacingRule_setEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges)

    def getEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges):
        return _opendbpy.dbTechLayerSpacingRule_getEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges)

    @staticmethod
    def create(inly):
        return _opendbpy.dbTechLayerSpacingRule_create(inly)

    @staticmethod
    def getTechLayerSpacingRule(inly, dbid):
        return _opendbpy.dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid)

    def __init__(self):
        _opendbpy.dbTechLayerSpacingRule_swiginit(self, _opendbpy.new_dbTechLayerSpacingRule())
    __swig_destroy__ = _opendbpy.delete_dbTechLayerSpacingRule

# Register dbTechLayerSpacingRule in _opendbpy:
_opendbpy.dbTechLayerSpacingRule_swigregister(dbTechLayerSpacingRule)

def dbTechLayerSpacingRule_create(inly):
    return _opendbpy.dbTechLayerSpacingRule_create(inly)

def dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid):
    return _opendbpy.dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid)

class dbTechMinCutRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMinimumCuts(self, numcuts, width):
        return _opendbpy.dbTechMinCutRule_getMinimumCuts(self, numcuts, width)

    def setMinimumCuts(self, numcuts, width, above_only, below_only):
        return _opendbpy.dbTechMinCutRule_setMinimumCuts(self, numcuts, width, above_only, below_only)

    def getCutDistance(self, cut_distance):
        return _opendbpy.dbTechMinCutRule_getCutDistance(self, cut_distance)

    def setCutDistance(self, cut_distance):
        return _opendbpy.dbTechMinCutRule_setCutDistance(self, cut_distance)

    def getLengthForCuts(self, length, distance):
        return _opendbpy.dbTechMinCutRule_getLengthForCuts(self, length, distance)

    def setLengthForCuts(self, length, distance):
        return _opendbpy.dbTechMinCutRule_setLengthForCuts(self, length, distance)

    def isAboveOnly(self):
        return _opendbpy.dbTechMinCutRule_isAboveOnly(self)

    def isBelowOnly(self):
        return _opendbpy.dbTechMinCutRule_isBelowOnly(self)

    def writeLef(self, writer):
        return _opendbpy.dbTechMinCutRule_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _opendbpy.dbTechMinCutRule_create(inly)

    @staticmethod
    def getMinCutRule(inly, dbid):
        return _opendbpy.dbTechMinCutRule_getMinCutRule(inly, dbid)

    def __init__(self):
        _opendbpy.dbTechMinCutRule_swiginit(self, _opendbpy.new_dbTechMinCutRule())
    __swig_destroy__ = _opendbpy.delete_dbTechMinCutRule

# Register dbTechMinCutRule in _opendbpy:
_opendbpy.dbTechMinCutRule_swigregister(dbTechMinCutRule)

def dbTechMinCutRule_create(inly):
    return _opendbpy.dbTechMinCutRule_create(inly)

def dbTechMinCutRule_getMinCutRule(inly, dbid):
    return _opendbpy.dbTechMinCutRule_getMinCutRule(inly, dbid)

class dbTechMinEncRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getEnclosure(self, area):
        return _opendbpy.dbTechMinEncRule_getEnclosure(self, area)

    def setEnclosure(self, area):
        return _opendbpy.dbTechMinEncRule_setEnclosure(self, area)

    def getEnclosureWidth(self, width):
        return _opendbpy.dbTechMinEncRule_getEnclosureWidth(self, width)

    def setEnclosureWidth(self, width):
        return _opendbpy.dbTechMinEncRule_setEnclosureWidth(self, width)

    def writeLef(self, writer):
        return _opendbpy.dbTechMinEncRule_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _opendbpy.dbTechMinEncRule_create(inly)

    @staticmethod
    def getMinEncRule(inly, dbid):
        return _opendbpy.dbTechMinEncRule_getMinEncRule(inly, dbid)

    def __init__(self):
        _opendbpy.dbTechMinEncRule_swiginit(self, _opendbpy.new_dbTechMinEncRule())
    __swig_destroy__ = _opendbpy.delete_dbTechMinEncRule

# Register dbTechMinEncRule in _opendbpy:
_opendbpy.dbTechMinEncRule_swigregister(dbTechMinEncRule)

def dbTechMinEncRule_create(inly):
    return _opendbpy.dbTechMinEncRule_create(inly)

def dbTechMinEncRule_getMinEncRule(inly, dbid):
    return _opendbpy.dbTechMinEncRule_getMinEncRule(inly, dbid)

class dbTechV55InfluenceEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setV55InfluenceEntry(self, width, within, spacing):
        return _opendbpy.dbTechV55InfluenceEntry_setV55InfluenceEntry(self, width, within, spacing)

    def writeLef(self, writer):
        return _opendbpy.dbTechV55InfluenceEntry_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _opendbpy.dbTechV55InfluenceEntry_create(inly)

    @staticmethod
    def getV55InfluenceEntry(*args):
        return _opendbpy.dbTechV55InfluenceEntry_getV55InfluenceEntry(*args)

    def __init__(self):
        _opendbpy.dbTechV55InfluenceEntry_swiginit(self, _opendbpy.new_dbTechV55InfluenceEntry())
    __swig_destroy__ = _opendbpy.delete_dbTechV55InfluenceEntry

# Register dbTechV55InfluenceEntry in _opendbpy:
_opendbpy.dbTechV55InfluenceEntry_swigregister(dbTechV55InfluenceEntry)

def dbTechV55InfluenceEntry_create(inly):
    return _opendbpy.dbTechV55InfluenceEntry_create(inly)

def dbTechV55InfluenceEntry_getV55InfluenceEntry(*args):
    return _opendbpy.dbTechV55InfluenceEntry_getV55InfluenceEntry(*args)

class dbTechLayerAntennaRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return _opendbpy.dbTechLayerAntennaRule_isValid(self)

    def writeLef(self, writer):
        return _opendbpy.dbTechLayerAntennaRule_writeLef(self, writer)

    def setAreaFactor(self, factor, diffuse=-1.0):
        return _opendbpy.dbTechLayerAntennaRule_setAreaFactor(self, factor, diffuse)

    def setSideAreaFactor(self, factor, diffuse=-1.0):
        return _opendbpy.dbTechLayerAntennaRule_setSideAreaFactor(self, factor, diffuse)

    def getPAR(self):
        return _opendbpy.dbTechLayerAntennaRule_getPAR(self)

    def getCAR(self):
        return _opendbpy.dbTechLayerAntennaRule_getCAR(self)

    def getPSR(self):
        return _opendbpy.dbTechLayerAntennaRule_getPSR(self)

    def getCSR(self):
        return _opendbpy.dbTechLayerAntennaRule_getCSR(self)

    def setPAR(self, ratio, diff_ratio=0.0):
        return _opendbpy.dbTechLayerAntennaRule_setPAR(self, ratio, diff_ratio)

    def setCAR(self, ratio, diff_ratio=0.0):
        return _opendbpy.dbTechLayerAntennaRule_setCAR(self, ratio, diff_ratio)

    def setPSR(self, ratio, diff_ratio=0.0):
        return _opendbpy.dbTechLayerAntennaRule_setPSR(self, ratio, diff_ratio)

    def setCSR(self, ratio, diff_ratio=0.0):
        return _opendbpy.dbTechLayerAntennaRule_setCSR(self, ratio, diff_ratio)

    def setPAR_PWL(self, diff_idx, ratios):
        return _opendbpy.dbTechLayerAntennaRule_setPAR_PWL(self, diff_idx, ratios)

    def setCAR_PWL(self, diff_idx, ratios):
        return _opendbpy.dbTechLayerAntennaRule_setCAR_PWL(self, diff_idx, ratios)

    def setPSR_PWL(self, diff_idx, ratios):
        return _opendbpy.dbTechLayerAntennaRule_setPSR_PWL(self, diff_idx, ratios)

    def setCSR_PWL(self, diff_idx, ratios):
        return _opendbpy.dbTechLayerAntennaRule_setCSR_PWL(self, diff_idx, ratios)

    @staticmethod
    def getAntennaRule(inly, dbid):
        return _opendbpy.dbTechLayerAntennaRule_getAntennaRule(inly, dbid)

    def __init__(self):
        _opendbpy.dbTechLayerAntennaRule_swiginit(self, _opendbpy.new_dbTechLayerAntennaRule())
    __swig_destroy__ = _opendbpy.delete_dbTechLayerAntennaRule

# Register dbTechLayerAntennaRule in _opendbpy:
_opendbpy.dbTechLayerAntennaRule_swigregister(dbTechLayerAntennaRule)

def dbTechLayerAntennaRule_getAntennaRule(inly, dbid):
    return _opendbpy.dbTechLayerAntennaRule_getAntennaRule(inly, dbid)

class dbTechAntennaPinModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addGateAreaEntry(self, inval, refly=None):
        return _opendbpy.dbTechAntennaPinModel_addGateAreaEntry(self, inval, refly)

    def addMaxAreaCAREntry(self, inval, refly=None):
        return _opendbpy.dbTechAntennaPinModel_addMaxAreaCAREntry(self, inval, refly)

    def addMaxSideAreaCAREntry(self, inval, refly=None):
        return _opendbpy.dbTechAntennaPinModel_addMaxSideAreaCAREntry(self, inval, refly)

    def addMaxCutCAREntry(self, inval, refly=None):
        return _opendbpy.dbTechAntennaPinModel_addMaxCutCAREntry(self, inval, refly)

    def getGateArea(self, data):
        return _opendbpy.dbTechAntennaPinModel_getGateArea(self, data)

    def getMaxAreaCAR(self, data):
        return _opendbpy.dbTechAntennaPinModel_getMaxAreaCAR(self, data)

    def getMaxSideAreaCAR(self, data):
        return _opendbpy.dbTechAntennaPinModel_getMaxSideAreaCAR(self, data)

    def getMaxCutCAR(self, data):
        return _opendbpy.dbTechAntennaPinModel_getMaxCutCAR(self, data)

    def writeLef(self, tech, writer):
        return _opendbpy.dbTechAntennaPinModel_writeLef(self, tech, writer)

    @staticmethod
    def getAntennaPinModel(master, dbid):
        return _opendbpy.dbTechAntennaPinModel_getAntennaPinModel(master, dbid)

    def __init__(self):
        _opendbpy.dbTechAntennaPinModel_swiginit(self, _opendbpy.new_dbTechAntennaPinModel())
    __swig_destroy__ = _opendbpy.delete_dbTechAntennaPinModel

# Register dbTechAntennaPinModel in _opendbpy:
_opendbpy.dbTechAntennaPinModel_swigregister(dbTechAntennaPinModel)

def dbTechAntennaPinModel_getAntennaPinModel(master, dbid):
    return _opendbpy.dbTechAntennaPinModel_getAntennaPinModel(master, dbid)

class dbTechNonDefaultRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _opendbpy.dbTechNonDefaultRule_getName(self)

    def getConstName(self):
        return _opendbpy.dbTechNonDefaultRule_getConstName(self)

    def isBlockRule(self):
        return _opendbpy.dbTechNonDefaultRule_isBlockRule(self)

    def getLayerRule(self, layer):
        return _opendbpy.dbTechNonDefaultRule_getLayerRule(self, layer)

    def getLayerRules(self, layer_rules):
        return _opendbpy.dbTechNonDefaultRule_getLayerRules(self, layer_rules)

    def getVias(self, vias):
        return _opendbpy.dbTechNonDefaultRule_getVias(self, vias)

    def findSameNetRule(self, l1, l2):
        return _opendbpy.dbTechNonDefaultRule_findSameNetRule(self, l1, l2)

    def getSameNetRules(self, rules):
        return _opendbpy.dbTechNonDefaultRule_getSameNetRules(self, rules)

    def getHardSpacing(self):
        return _opendbpy.dbTechNonDefaultRule_getHardSpacing(self)

    def setHardSpacing(self, value):
        return _opendbpy.dbTechNonDefaultRule_setHardSpacing(self, value)

    def addUseVia(self, via):
        return _opendbpy.dbTechNonDefaultRule_addUseVia(self, via)

    def getUseVias(self, vias):
        return _opendbpy.dbTechNonDefaultRule_getUseVias(self, vias)

    def addUseViaRule(self, rule):
        return _opendbpy.dbTechNonDefaultRule_addUseViaRule(self, rule)

    def getUseViaRules(self, rules):
        return _opendbpy.dbTechNonDefaultRule_getUseViaRules(self, rules)

    def setMinCuts(self, cut_layer, count):
        return _opendbpy.dbTechNonDefaultRule_setMinCuts(self, cut_layer, count)

    def getMinCuts(self, cut_layer, count):
        return _opendbpy.dbTechNonDefaultRule_getMinCuts(self, cut_layer, count)

    @staticmethod
    def create(*args):
        return _opendbpy.dbTechNonDefaultRule_create(*args)

    @staticmethod
    def getTechNonDefaultRule(*args):
        return _opendbpy.dbTechNonDefaultRule_getTechNonDefaultRule(*args)

    def __init__(self):
        _opendbpy.dbTechNonDefaultRule_swiginit(self, _opendbpy.new_dbTechNonDefaultRule())
    __swig_destroy__ = _opendbpy.delete_dbTechNonDefaultRule

# Register dbTechNonDefaultRule in _opendbpy:
_opendbpy.dbTechNonDefaultRule_swigregister(dbTechNonDefaultRule)

def dbTechNonDefaultRule_create(*args):
    return _opendbpy.dbTechNonDefaultRule_create(*args)

def dbTechNonDefaultRule_getTechNonDefaultRule(*args):
    return _opendbpy.dbTechNonDefaultRule_getTechNonDefaultRule(*args)

class dbTechLayerRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer(self):
        return _opendbpy.dbTechLayerRule_getLayer(self)

    def isBlockRule(self):
        return _opendbpy.dbTechLayerRule_isBlockRule(self)

    def getNonDefaultRule(self):
        return _opendbpy.dbTechLayerRule_getNonDefaultRule(self)

    def getWidth(self):
        return _opendbpy.dbTechLayerRule_getWidth(self)

    def setWidth(self, width):
        return _opendbpy.dbTechLayerRule_setWidth(self, width)

    def getSpacing(self):
        return _opendbpy.dbTechLayerRule_getSpacing(self)

    def setSpacing(self, spacing):
        return _opendbpy.dbTechLayerRule_setSpacing(self, spacing)

    def getResistance(self):
        return _opendbpy.dbTechLayerRule_getResistance(self)

    def setResistance(self, res):
        return _opendbpy.dbTechLayerRule_setResistance(self, res)

    def getCapacitance(self):
        return _opendbpy.dbTechLayerRule_getCapacitance(self)

    def setCapacitance(self, cap):
        return _opendbpy.dbTechLayerRule_setCapacitance(self, cap)

    def getEdgeCapacitance(self):
        return _opendbpy.dbTechLayerRule_getEdgeCapacitance(self)

    def setEdgeCapacitance(self, cap):
        return _opendbpy.dbTechLayerRule_setEdgeCapacitance(self, cap)

    def getWireExtension(self):
        return _opendbpy.dbTechLayerRule_getWireExtension(self)

    def setWireExtension(self, ext):
        return _opendbpy.dbTechLayerRule_setWireExtension(self, ext)

    @staticmethod
    def create(rule, layer):
        return _opendbpy.dbTechLayerRule_create(rule, layer)

    @staticmethod
    def getTechLayerRule(*args):
        return _opendbpy.dbTechLayerRule_getTechLayerRule(*args)

    def __init__(self):
        _opendbpy.dbTechLayerRule_swiginit(self, _opendbpy.new_dbTechLayerRule())
    __swig_destroy__ = _opendbpy.delete_dbTechLayerRule

# Register dbTechLayerRule in _opendbpy:
_opendbpy.dbTechLayerRule_swigregister(dbTechLayerRule)

def dbTechLayerRule_create(rule, layer):
    return _opendbpy.dbTechLayerRule_create(rule, layer)

def dbTechLayerRule_getTechLayerRule(*args):
    return _opendbpy.dbTechLayerRule_getTechLayerRule(*args)

class dbTechSameNetRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer1(self):
        return _opendbpy.dbTechSameNetRule_getLayer1(self)

    def getLayer2(self):
        return _opendbpy.dbTechSameNetRule_getLayer2(self)

    def getSpacing(self):
        return _opendbpy.dbTechSameNetRule_getSpacing(self)

    def setSpacing(self, spacing):
        return _opendbpy.dbTechSameNetRule_setSpacing(self, spacing)

    def setAllowStackedVias(self, value):
        return _opendbpy.dbTechSameNetRule_setAllowStackedVias(self, value)

    def getAllowStackedVias(self):
        return _opendbpy.dbTechSameNetRule_getAllowStackedVias(self)

    @staticmethod
    def create(*args):
        return _opendbpy.dbTechSameNetRule_create(*args)

    @staticmethod
    def getTechSameNetRule(tech, oid):
        return _opendbpy.dbTechSameNetRule_getTechSameNetRule(tech, oid)

    def __init__(self):
        _opendbpy.dbTechSameNetRule_swiginit(self, _opendbpy.new_dbTechSameNetRule())
    __swig_destroy__ = _opendbpy.delete_dbTechSameNetRule

# Register dbTechSameNetRule in _opendbpy:
_opendbpy.dbTechSameNetRule_swigregister(dbTechSameNetRule)

def dbTechSameNetRule_create(*args):
    return _opendbpy.dbTechSameNetRule_create(*args)

def dbTechSameNetRule_getTechSameNetRule(tech, oid):
    return _opendbpy.dbTechSameNetRule_getTechSameNetRule(tech, oid)

class dbViaParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opendbpy.dbViaParams_swiginit(self, _opendbpy.new_dbViaParams(*args))
    __swig_destroy__ = _opendbpy.delete_dbViaParams

    def getXCutSize(self):
        return _opendbpy.dbViaParams_getXCutSize(self)

    def getYCutSize(self):
        return _opendbpy.dbViaParams_getYCutSize(self)

    def getXCutSpacing(self):
        return _opendbpy.dbViaParams_getXCutSpacing(self)

    def getYCutSpacing(self):
        return _opendbpy.dbViaParams_getYCutSpacing(self)

    def getXTopEnclosure(self):
        return _opendbpy.dbViaParams_getXTopEnclosure(self)

    def getYTopEnclosure(self):
        return _opendbpy.dbViaParams_getYTopEnclosure(self)

    def getXBottomEnclosure(self):
        return _opendbpy.dbViaParams_getXBottomEnclosure(self)

    def getYBottomEnclosure(self):
        return _opendbpy.dbViaParams_getYBottomEnclosure(self)

    def getNumCutRows(self):
        return _opendbpy.dbViaParams_getNumCutRows(self)

    def getNumCutCols(self):
        return _opendbpy.dbViaParams_getNumCutCols(self)

    def getXOrigin(self):
        return _opendbpy.dbViaParams_getXOrigin(self)

    def getYOrigin(self):
        return _opendbpy.dbViaParams_getYOrigin(self)

    def getXTopOffset(self):
        return _opendbpy.dbViaParams_getXTopOffset(self)

    def getYTopOffset(self):
        return _opendbpy.dbViaParams_getYTopOffset(self)

    def getXBottomOffset(self):
        return _opendbpy.dbViaParams_getXBottomOffset(self)

    def getYBottomOffset(self):
        return _opendbpy.dbViaParams_getYBottomOffset(self)

    def getTopLayer(self):
        return _opendbpy.dbViaParams_getTopLayer(self)

    def getCutLayer(self):
        return _opendbpy.dbViaParams_getCutLayer(self)

    def getBottomLayer(self):
        return _opendbpy.dbViaParams_getBottomLayer(self)

    def setXCutSize(self, value):
        return _opendbpy.dbViaParams_setXCutSize(self, value)

    def setYCutSize(self, value):
        return _opendbpy.dbViaParams_setYCutSize(self, value)

    def setXCutSpacing(self, value):
        return _opendbpy.dbViaParams_setXCutSpacing(self, value)

    def setYCutSpacing(self, value):
        return _opendbpy.dbViaParams_setYCutSpacing(self, value)

    def setXTopEnclosure(self, value):
        return _opendbpy.dbViaParams_setXTopEnclosure(self, value)

    def setYTopEnclosure(self, value):
        return _opendbpy.dbViaParams_setYTopEnclosure(self, value)

    def setXBottomEnclosure(self, value):
        return _opendbpy.dbViaParams_setXBottomEnclosure(self, value)

    def setYBottomEnclosure(self, value):
        return _opendbpy.dbViaParams_setYBottomEnclosure(self, value)

    def setNumCutRows(self, value):
        return _opendbpy.dbViaParams_setNumCutRows(self, value)

    def setNumCutCols(self, value):
        return _opendbpy.dbViaParams_setNumCutCols(self, value)

    def setXOrigin(self, value):
        return _opendbpy.dbViaParams_setXOrigin(self, value)

    def setYOrigin(self, value):
        return _opendbpy.dbViaParams_setYOrigin(self, value)

    def setXTopOffset(self, value):
        return _opendbpy.dbViaParams_setXTopOffset(self, value)

    def setYTopOffset(self, value):
        return _opendbpy.dbViaParams_setYTopOffset(self, value)

    def setXBottomOffset(self, value):
        return _opendbpy.dbViaParams_setXBottomOffset(self, value)

    def setYBottomOffset(self, value):
        return _opendbpy.dbViaParams_setYBottomOffset(self, value)

    def setTopLayer(self, layer):
        return _opendbpy.dbViaParams_setTopLayer(self, layer)

    def setCutLayer(self, layer):
        return _opendbpy.dbViaParams_setCutLayer(self, layer)

    def setBottomLayer(self, layer):
        return _opendbpy.dbViaParams_setBottomLayer(self, layer)

# Register dbViaParams in _opendbpy:
_opendbpy.dbViaParams_swigregister(dbViaParams)


def read_lef(db, path):
    return _opendbpy.read_lef(db, path)

def read_def(db, path):
    return _opendbpy.read_def(db, path)

def write_def(*args):
    return _opendbpy.write_def(*args)

def write_lef(lib, path):
    return _opendbpy.write_lef(lib, path)

def read_db(db, db_path):
    return _opendbpy.read_db(db, db_path)

def write_db(db, db_path):
    return _opendbpy.write_db(db, db_path)

def db_diff(db1, db2):
    return _opendbpy.db_diff(db1, db2)

def db_def_diff(db1, def_filename):
    return _opendbpy.db_def_diff(db1, def_filename)
class _dbViaParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _x_cut_size = property(_opendbpy._dbViaParams__x_cut_size_get, _opendbpy._dbViaParams__x_cut_size_set)
    _y_cut_size = property(_opendbpy._dbViaParams__y_cut_size_get, _opendbpy._dbViaParams__y_cut_size_set)
    _x_cut_spacing = property(_opendbpy._dbViaParams__x_cut_spacing_get, _opendbpy._dbViaParams__x_cut_spacing_set)
    _y_cut_spacing = property(_opendbpy._dbViaParams__y_cut_spacing_get, _opendbpy._dbViaParams__y_cut_spacing_set)
    _x_top_enclosure = property(_opendbpy._dbViaParams__x_top_enclosure_get, _opendbpy._dbViaParams__x_top_enclosure_set)
    _y_top_enclosure = property(_opendbpy._dbViaParams__y_top_enclosure_get, _opendbpy._dbViaParams__y_top_enclosure_set)
    _x_bot_enclosure = property(_opendbpy._dbViaParams__x_bot_enclosure_get, _opendbpy._dbViaParams__x_bot_enclosure_set)
    _y_bot_enclosure = property(_opendbpy._dbViaParams__y_bot_enclosure_get, _opendbpy._dbViaParams__y_bot_enclosure_set)
    _num_cut_rows = property(_opendbpy._dbViaParams__num_cut_rows_get, _opendbpy._dbViaParams__num_cut_rows_set)
    _num_cut_cols = property(_opendbpy._dbViaParams__num_cut_cols_get, _opendbpy._dbViaParams__num_cut_cols_set)
    _x_origin = property(_opendbpy._dbViaParams__x_origin_get, _opendbpy._dbViaParams__x_origin_set)
    _y_origin = property(_opendbpy._dbViaParams__y_origin_get, _opendbpy._dbViaParams__y_origin_set)
    _x_top_offset = property(_opendbpy._dbViaParams__x_top_offset_get, _opendbpy._dbViaParams__x_top_offset_set)
    _y_top_offset = property(_opendbpy._dbViaParams__y_top_offset_get, _opendbpy._dbViaParams__y_top_offset_set)
    _x_bot_offset = property(_opendbpy._dbViaParams__x_bot_offset_get, _opendbpy._dbViaParams__x_bot_offset_set)
    _y_bot_offset = property(_opendbpy._dbViaParams__y_bot_offset_get, _opendbpy._dbViaParams__y_bot_offset_set)
    _top_layer = property(_opendbpy._dbViaParams__top_layer_get, _opendbpy._dbViaParams__top_layer_set)
    _cut_layer = property(_opendbpy._dbViaParams__cut_layer_get, _opendbpy._dbViaParams__cut_layer_set)
    _bot_layer = property(_opendbpy._dbViaParams__bot_layer_get, _opendbpy._dbViaParams__bot_layer_set)

    def __init__(self, *args):
        _opendbpy._dbViaParams_swiginit(self, _opendbpy.new__dbViaParams(*args))
    __swig_destroy__ = _opendbpy.delete__dbViaParams

    def __eq__(self, rhs):
        return _opendbpy._dbViaParams___eq__(self, rhs)

    def __ne__(self, rhs):
        return _opendbpy._dbViaParams___ne__(self, rhs)

    def differences(self, diff, field, rhs):
        return _opendbpy._dbViaParams_differences(self, diff, field, rhs)

    def out(self, diff, side, field):
        return _opendbpy._dbViaParams_out(self, diff, side, field)

# Register _dbViaParams in _opendbpy:
_opendbpy._dbViaParams_swigregister(_dbViaParams)

class dbRtEndStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EXTENDED = _opendbpy.dbRtEndStyle_EXTENDED
    VARIABLE = _opendbpy.dbRtEndStyle_VARIABLE

    def __init__(self):
        _opendbpy.dbRtEndStyle_swiginit(self, _opendbpy.new_dbRtEndStyle())

    def setExtended(self):
        return _opendbpy.dbRtEndStyle_setExtended(self)

    def setVariable(self, ext):
        return _opendbpy.dbRtEndStyle_setVariable(self, ext)

    def getType(self):
        return _opendbpy.dbRtEndStyle_getType(self)

    def getExt(self):
        return _opendbpy.dbRtEndStyle_getExt(self)

    def __eq__(self, s):
        return _opendbpy.dbRtEndStyle___eq__(self, s)

    def __ne__(self, s):
        return _opendbpy.dbRtEndStyle___ne__(self, s)
    __swig_destroy__ = _opendbpy.delete_dbRtEndStyle

# Register dbRtEndStyle in _opendbpy:
_opendbpy.dbRtEndStyle_swigregister(dbRtEndStyle)

class dbRtEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SEGMENT = _opendbpy.dbRtEdge_SEGMENT
    TECH_VIA = _opendbpy.dbRtEdge_TECH_VIA
    VIA = _opendbpy.dbRtEdge_VIA
    SHORT = _opendbpy.dbRtEdge_SHORT
    VWIRE = _opendbpy.dbRtEdge_VWIRE
    __swig_destroy__ = _opendbpy.delete_dbRtEdge

    def getBBox(self):
        return _opendbpy.dbRtEdge_getBBox(self)

    def getType(self):
        return _opendbpy.dbRtEdge_getType(self)

    def getSource(self):
        return _opendbpy.dbRtEdge_getSource(self)

    def getTarget(self):
        return _opendbpy.dbRtEdge_getTarget(self)

    def getOpposite(self, n):
        return _opendbpy.dbRtEdge_getOpposite(self, n)

    def setWireType(self, value):
        return _opendbpy.dbRtEdge_setWireType(self, value)

    def getWireType(self):
        return _opendbpy.dbRtEdge_getWireType(self)

    def setNonDefaultRule(self, rule):
        return _opendbpy.dbRtEdge_setNonDefaultRule(self, rule)

    def getNonDefaultRule(self):
        return _opendbpy.dbRtEdge_getNonDefaultRule(self)

    def setResistance(self, r):
        return _opendbpy.dbRtEdge_setResistance(self, r)

    def getResistance(self):
        return _opendbpy.dbRtEdge_getResistance(self)

    def setCapacitance(self, c):
        return _opendbpy.dbRtEdge_setCapacitance(self, c)

    def getCapacitance(self):
        return _opendbpy.dbRtEdge_getCapacitance(self)

    def isVisited(self):
        return _opendbpy.dbRtEdge_isVisited(self)

    def setVisited(self, value):
        return _opendbpy.dbRtEdge_setVisited(self, value)

    def setProperty(self, property):
        return _opendbpy.dbRtEdge_setProperty(self, property)

    def getProperty(self):
        return _opendbpy.dbRtEdge_getProperty(self)

    @staticmethod
    def rtEdge(edge):
        return _opendbpy.dbRtEdge_rtEdge(edge)

# Register dbRtEdge in _opendbpy:
_opendbpy.dbRtEdge_swigregister(dbRtEdge)

def dbRtEdge_rtEdge(edge):
    return _opendbpy.dbRtEdge_rtEdge(edge)

class dbRtVia(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBBox(self):
        return _opendbpy.dbRtVia_getBBox(self)

    def getVia(self):
        return _opendbpy.dbRtVia_getVia(self)

    def setVia(self, via):
        return _opendbpy.dbRtVia_setVia(self, via)
    __swig_destroy__ = _opendbpy.delete_dbRtVia

# Register dbRtVia in _opendbpy:
_opendbpy.dbRtVia_swigregister(dbRtVia)

class dbRtTechVia(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, via, wire_type, rule):
        _opendbpy.dbRtTechVia_swiginit(self, _opendbpy.new_dbRtTechVia(via, wire_type, rule))

    def getBBox(self):
        return _opendbpy.dbRtTechVia_getBBox(self)

    def getVia(self):
        return _opendbpy.dbRtTechVia_getVia(self)
    __swig_destroy__ = _opendbpy.delete_dbRtTechVia

# Register dbRtTechVia in _opendbpy:
_opendbpy.dbRtTechVia_swigregister(dbRtTechVia)

class dbRtSegment(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBBox(self):
        return _opendbpy.dbRtSegment_getBBox(self)

    def setSourceEndStyle(self, style):
        return _opendbpy.dbRtSegment_setSourceEndStyle(self, style)

    def getSourceEndStyle(self):
        return _opendbpy.dbRtSegment_getSourceEndStyle(self)

    def setTargetEndStyle(self, style):
        return _opendbpy.dbRtSegment_setTargetEndStyle(self, style)

    def getTargetEndStyle(self):
        return _opendbpy.dbRtSegment_getTargetEndStyle(self)

    def getWidth(self):
        return _opendbpy.dbRtSegment_getWidth(self)
    __swig_destroy__ = _opendbpy.delete_dbRtSegment

# Register dbRtSegment in _opendbpy:
_opendbpy.dbRtSegment_swigregister(dbRtSegment)

class dbRtShort(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBBox(self):
        return _opendbpy.dbRtShort_getBBox(self)
    __swig_destroy__ = _opendbpy.delete_dbRtShort

# Register dbRtShort in _opendbpy:
_opendbpy.dbRtShort_swigregister(dbRtShort)

class dbRtVWire(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, wire_type, rule):
        _opendbpy.dbRtVWire_swiginit(self, _opendbpy.new_dbRtVWire(wire_type, rule))

    def getBBox(self):
        return _opendbpy.dbRtVWire_getBBox(self)
    __swig_destroy__ = _opendbpy.delete_dbRtVWire

# Register dbRtVWire in _opendbpy:
_opendbpy.dbRtVWire_swigregister(dbRtVWire)

class dbWireEncoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _opendbpy.dbWireEncoder_swiginit(self, _opendbpy.new_dbWireEncoder())
    __swig_destroy__ = _opendbpy.delete_dbWireEncoder

    def begin(self, wire):
        return _opendbpy.dbWireEncoder_begin(self, wire)

    def append(self, wire):
        return _opendbpy.dbWireEncoder_append(self, wire)

    def addPoint(self, *args):
        return _opendbpy.dbWireEncoder_addPoint(self, *args)

    def addVia(self, via):
        return _opendbpy.dbWireEncoder_addVia(self, via)

    def addTechVia(self, via):
        return _opendbpy.dbWireEncoder_addTechVia(self, via)

    def addRect(self, deltaX1, deltaY1, deltaX2, deltaY2):
        return _opendbpy.dbWireEncoder_addRect(self, deltaX1, deltaY1, deltaX2, deltaY2)

    def addITerm(self, iterm):
        return _opendbpy.dbWireEncoder_addITerm(self, iterm)

    def addBTerm(self, bterm):
        return _opendbpy.dbWireEncoder_addBTerm(self, bterm)

    def newPathShort(self, *args):
        return _opendbpy.dbWireEncoder_newPathShort(self, *args)

    def newPathVirtualWire(self, *args):
        return _opendbpy.dbWireEncoder_newPathVirtualWire(self, *args)

    def end(self):
        return _opendbpy.dbWireEncoder_end(self)

    def clear(self):
        return _opendbpy.dbWireEncoder_clear(self)

    def newPath(self, *args):
        return _opendbpy.dbWireEncoder_newPath(self, *args)

    def newPathExt(self, *args):
        return _opendbpy.dbWireEncoder_newPathExt(self, *args)

# Register dbWireEncoder in _opendbpy:
_opendbpy.dbWireEncoder_swigregister(dbWireEncoder)

class dbWireDecoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PATH = _opendbpy.dbWireDecoder_PATH
    JUNCTION = _opendbpy.dbWireDecoder_JUNCTION
    SHORT = _opendbpy.dbWireDecoder_SHORT
    VWIRE = _opendbpy.dbWireDecoder_VWIRE
    POINT = _opendbpy.dbWireDecoder_POINT
    POINT_EXT = _opendbpy.dbWireDecoder_POINT_EXT
    VIA = _opendbpy.dbWireDecoder_VIA
    TECH_VIA = _opendbpy.dbWireDecoder_TECH_VIA
    RECT = _opendbpy.dbWireDecoder_RECT
    ITERM = _opendbpy.dbWireDecoder_ITERM
    BTERM = _opendbpy.dbWireDecoder_BTERM
    RULE = _opendbpy.dbWireDecoder_RULE
    END_DECODE = _opendbpy.dbWireDecoder_END_DECODE

    def __init__(self):
        _opendbpy.dbWireDecoder_swiginit(self, _opendbpy.new_dbWireDecoder())
    __swig_destroy__ = _opendbpy.delete_dbWireDecoder

    def begin(self, wire):
        return _opendbpy.dbWireDecoder_begin(self, wire)

    def next(self):
        return _opendbpy.dbWireDecoder_next(self)

    def peek(self):
        return _opendbpy.dbWireDecoder_peek(self)

    def getLayer(self):
        return _opendbpy.dbWireDecoder_getLayer(self)

    def getPoint(self, *args):
        return _opendbpy.dbWireDecoder_getPoint(self, *args)

    def getProperty(self):
        return _opendbpy.dbWireDecoder_getProperty(self)

    def getVia(self):
        return _opendbpy.dbWireDecoder_getVia(self)

    def getTechVia(self):
        return _opendbpy.dbWireDecoder_getTechVia(self)

    def getRect(self, deltaX1, deltaY1, deltaX2, deltaY2):
        return _opendbpy.dbWireDecoder_getRect(self, deltaX1, deltaY1, deltaX2, deltaY2)

    def getITerm(self):
        return _opendbpy.dbWireDecoder_getITerm(self)

    def getBTerm(self):
        return _opendbpy.dbWireDecoder_getBTerm(self)

    def getWireType(self):
        return _opendbpy.dbWireDecoder_getWireType(self)

    def getRule(self):
        return _opendbpy.dbWireDecoder_getRule(self)

    def getJunctionId(self):
        return _opendbpy.dbWireDecoder_getJunctionId(self)

    def getJunctionValue(self):
        return _opendbpy.dbWireDecoder_getJunctionValue(self)

# Register dbWireDecoder in _opendbpy:
_opendbpy.dbWireDecoder_swigregister(dbWireDecoder)


def dumpDecoder(inblk, net_name_or_id):
    return _opendbpy.dumpDecoder(inblk, net_name_or_id)

def dumpDecoder4Net(innet):
    return _opendbpy.dumpDecoder4Net(innet)
class dbBlockCallBackObj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def inDbInstCreate(self, *args):
        return _opendbpy.dbBlockCallBackObj_inDbInstCreate(self, *args)

    def inDbInstDestroy(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbInstDestroy(self, arg2)

    def inDbInstSwapMasterBefore(self, arg2, arg3):
        return _opendbpy.dbBlockCallBackObj_inDbInstSwapMasterBefore(self, arg2, arg3)

    def inDbInstSwapMasterAfter(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbInstSwapMasterAfter(self, arg2)

    def inDbNetCreate(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbNetCreate(self, arg2)

    def inDbNetDestroy(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbNetDestroy(self, arg2)

    def inDbITermCreate(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbITermCreate(self, arg2)

    def inDbITermDestroy(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbITermDestroy(self, arg2)

    def inDbITermDisconnect(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbITermDisconnect(self, arg2)

    def inDbITermConnect(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbITermConnect(self, arg2)

    def inDbBlockStreamOutBefore(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbBlockStreamOutBefore(self, arg2)

    def inDbBlockStreamOutAfter(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbBlockStreamOutAfter(self, arg2)

    def inDbBlockReadNetsBefore(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbBlockReadNetsBefore(self, arg2)

    def inDbMoveInst(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbMoveInst(self, arg2)

    def inDbWireUpdate(self, arg2):
        return _opendbpy.dbBlockCallBackObj_inDbWireUpdate(self, arg2)

    def __call__(self):
        return _opendbpy.dbBlockCallBackObj___call__(self)

    def addOwner(self, new_owner):
        return _opendbpy.dbBlockCallBackObj_addOwner(self, new_owner)

    def hasOwner(self):
        return _opendbpy.dbBlockCallBackObj_hasOwner(self)

    def removeOwner(self):
        return _opendbpy.dbBlockCallBackObj_removeOwner(self)

    def __init__(self):
        _opendbpy.dbBlockCallBackObj_swiginit(self, _opendbpy.new_dbBlockCallBackObj())
    __swig_destroy__ = _opendbpy.delete_dbBlockCallBackObj

# Register dbBlockCallBackObj in _opendbpy:
_opendbpy.dbBlockCallBackObj_swigregister(dbBlockCallBackObj)

class dbIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def reversible(self):
        return _opendbpy.dbIterator_reversible(self)

    def orderReversed(self):
        return _opendbpy.dbIterator_orderReversed(self)

    def reverse(self, parent):
        return _opendbpy.dbIterator_reverse(self, parent)

    def sequential(self):
        return _opendbpy.dbIterator_sequential(self)

    def size(self, parent):
        return _opendbpy.dbIterator_size(self, parent)

    def begin(self, parent):
        return _opendbpy.dbIterator_begin(self, parent)

    def end(self, parent):
        return _opendbpy.dbIterator_end(self, parent)

    def next(self, id):
        return _opendbpy.dbIterator_next(self, id)

    def getObject(self, id):
        return _opendbpy.dbIterator_getObject(self, id)
    __swig_destroy__ = _opendbpy.delete_dbIterator

# Register dbIterator in _opendbpy:
_opendbpy.dbIterator_swigregister(dbIterator)

class dbRtNodeEdgeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opendbpy.dbRtNodeEdgeIterator_swiginit(self, _opendbpy.new_dbRtNodeEdgeIterator(*args))

    def __eq__(self, i):
        return _opendbpy.dbRtNodeEdgeIterator___eq__(self, i)

    def __ne__(self, i):
        return _opendbpy.dbRtNodeEdgeIterator___ne__(self, i)

    def __ref__(self):
        return _opendbpy.dbRtNodeEdgeIterator___ref__(self)
    __swig_destroy__ = _opendbpy.delete_dbRtNodeEdgeIterator

# Register dbRtNodeEdgeIterator in _opendbpy:
_opendbpy.dbRtNodeEdgeIterator_swigregister(dbRtNodeEdgeIterator)

class dbRtNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, layer):
        _opendbpy.dbRtNode_swiginit(self, _opendbpy.new_dbRtNode(x, y, layer))

    def setPoint(self, *args):
        return _opendbpy.dbRtNode_setPoint(self, *args)

    def getPoint(self, *args):
        return _opendbpy.dbRtNode_getPoint(self, *args)

    def x(self):
        return _opendbpy.dbRtNode_x(self)

    def y(self):
        return _opendbpy.dbRtNode_y(self)

    def setLayer(self, layer):
        return _opendbpy.dbRtNode_setLayer(self, layer)

    def getLayer(self):
        return _opendbpy.dbRtNode_getLayer(self)

    def begin(self):
        return _opendbpy.dbRtNode_begin(self)

    def end(self):
        return _opendbpy.dbRtNode_end(self)

    def addObject(self, object):
        return _opendbpy.dbRtNode_addObject(self, object)

    def getObjects(self, objects):
        return _opendbpy.dbRtNode_getObjects(self, objects)

    def isVisited(self):
        return _opendbpy.dbRtNode_isVisited(self)

    def setVisited(self, value):
        return _opendbpy.dbRtNode_setVisited(self, value)

    def isOrphan(self):
        return _opendbpy.dbRtNode_isOrphan(self)

    def isLeaf(self):
        return _opendbpy.dbRtNode_isLeaf(self)

    def begin_objects(self):
        return _opendbpy.dbRtNode_begin_objects(self)

    def end_objects(self):
        return _opendbpy.dbRtNode_end_objects(self)

    @staticmethod
    def rtNode(node):
        return _opendbpy.dbRtNode_rtNode(node)
    __swig_destroy__ = _opendbpy.delete_dbRtNode

# Register dbRtNode in _opendbpy:
_opendbpy.dbRtNode_swigregister(dbRtNode)

def dbRtNode_rtNode(node):
    return _opendbpy.dbRtNode_rtNode(node)

class dbTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opendbpy.dbTransform_swiginit(self, _opendbpy.new_dbTransform(*args))

    def __eq__(self, t):
        return _opendbpy.dbTransform___eq__(self, t)

    def __ne__(self, t):
        return _opendbpy.dbTransform___ne__(self, t)

    def setOrient(self, orient):
        return _opendbpy.dbTransform_setOrient(self, orient)

    def setOffset(self, offset):
        return _opendbpy.dbTransform_setOffset(self, offset)

    def setTransform(self, orient, offset):
        return _opendbpy.dbTransform_setTransform(self, orient, offset)

    def apply(self, *args):
        return _opendbpy.dbTransform_apply(self, *args)

    def concat(self, *args):
        return _opendbpy.dbTransform_concat(self, *args)

    def invert(self, *args):
        return _opendbpy.dbTransform_invert(self, *args)

    def getOrient(self):
        return _opendbpy.dbTransform_getOrient(self)

    def getOffset(self):
        return _opendbpy.dbTransform_getOffset(self)
    __swig_destroy__ = _opendbpy.delete_dbTransform

# Register dbTransform in _opendbpy:
_opendbpy.dbTransform_swigregister(dbTransform)


def __rshift__(*args):
    return _opendbpy.__rshift__(*args)

def __lshift__(*args):
    return _opendbpy.__lshift__(*args)
class dbWireGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _opendbpy.dbWireGraph_swiginit(self, _opendbpy.new_dbWireGraph())
    __swig_destroy__ = _opendbpy.delete_dbWireGraph

    def clear(self):
        return _opendbpy.dbWireGraph_clear(self)

    def decode(self, wire):
        return _opendbpy.dbWireGraph_decode(self, wire)

    def encode(self, wire):
        return _opendbpy.dbWireGraph_encode(self, wire)

    def getEdge(self, shape_id):
        return _opendbpy.dbWireGraph_getEdge(self, shape_id)

    def createNode(self, x, y, l):
        return _opendbpy.dbWireGraph_createNode(self, x, y, l)

    def createVia(self, *args):
        return _opendbpy.dbWireGraph_createVia(self, *args)

    def createTechVia(self, *args):
        return _opendbpy.dbWireGraph_createTechVia(self, *args)

    def createSegment(self, *args):
        return _opendbpy.dbWireGraph_createSegment(self, *args)

    def createShort(self, *args):
        return _opendbpy.dbWireGraph_createShort(self, *args)

    def createVWire(self, *args):
        return _opendbpy.dbWireGraph_createVWire(self, *args)

    def begin_nodes(self):
        return _opendbpy.dbWireGraph_begin_nodes(self)

    def end_nodes(self):
        return _opendbpy.dbWireGraph_end_nodes(self)

    def begin_edges(self):
        return _opendbpy.dbWireGraph_begin_edges(self)

    def end_edges(self):
        return _opendbpy.dbWireGraph_end_edges(self)

    def deleteNode(self, *args):
        return _opendbpy.dbWireGraph_deleteNode(self, *args)

    def deleteEdge(self, *args):
        return _opendbpy.dbWireGraph_deleteEdge(self, *args)

# Register dbWireGraph in _opendbpy:
_opendbpy.dbWireGraph_swigregister(dbWireGraph)

class dbRtTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _opendbpy.dbRtTree_swiginit(self, _opendbpy.new_dbRtTree())
    __swig_destroy__ = _opendbpy.delete_dbRtTree

    def clear(self):
        return _opendbpy.dbRtTree_clear(self)

    def decode(self, wire, decode_bterm_iterms=True):
        return _opendbpy.dbRtTree_decode(self, wire, decode_bterm_iterms)

    def encode(self, wire, encode_bterm_iterms=True):
        return _opendbpy.dbRtTree_encode(self, wire, encode_bterm_iterms)

    def getEdge(self, shape_id):
        return _opendbpy.dbRtTree_getEdge(self, shape_id)

    def createNode(self, x, y, l):
        return _opendbpy.dbRtTree_createNode(self, x, y, l)

    def createVia(self, *args):
        return _opendbpy.dbRtTree_createVia(self, *args)

    def createTechVia(self, *args):
        return _opendbpy.dbRtTree_createTechVia(self, *args)

    def createSegment(self, *args):
        return _opendbpy.dbRtTree_createSegment(self, *args)

    def createShort(self, *args):
        return _opendbpy.dbRtTree_createShort(self, *args)

    def createVWire(self, *args):
        return _opendbpy.dbRtTree_createVWire(self, *args)

    def begin_nodes(self):
        return _opendbpy.dbRtTree_begin_nodes(self)

    def end_nodes(self):
        return _opendbpy.dbRtTree_end_nodes(self)

    def begin_edges(self):
        return _opendbpy.dbRtTree_begin_edges(self)

    def end_edges(self):
        return _opendbpy.dbRtTree_end_edges(self)

    def deleteNode(self, n):
        return _opendbpy.dbRtTree_deleteNode(self, n)

    def deleteEdge(self, *args):
        return _opendbpy.dbRtTree_deleteEdge(self, *args)

    def move(self, T):
        return _opendbpy.dbRtTree_move(self, T)

    def copy(self, T):
        return _opendbpy.dbRtTree_copy(self, T)

    @staticmethod
    def duplicate(*args):
        return _opendbpy.dbRtTree_duplicate(*args)

# Register dbRtTree in _opendbpy:
_opendbpy.dbRtTree_swigregister(dbRtTree)

def dbRtTree_duplicate(*args):
    return _opendbpy.dbRtTree_duplicate(*args)



